{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"HOME"},{"location":"ABOUT/","text":"BFE is an open-source layer 7 load balancer from Baidu. The BFE documentation is composed of a few major sections: Introduction : This section covers a general overview of what BFE is, an architecture overview, etc. Getting started : Quickly get started with BFE. Installation : How to build/install BFE. Configuration : Detailed configuration instructions for BFE. Operations : General information on how to operate BFE. How to contribute : Information on how to contribute to BFE project. FAQ : Answers to frequently ask question. Monitor reference : metrics detailed reference. Condition reference : Condition detailed reference. If you can\u2019t find what you are looking for, or have an issue not covered here, we\u2019d love to hear from you on Github .","title":"About"},{"location":"COMMUNITY/","text":"We are very interested in building a community around BFE. If you are interested in using it or need help, please feel free to contact us. COMMUNITY BFE user forum : Github Discussions . BFE community on Slack : Sign up CNCF Slack and join bfe channel. WeChat developer group : Send a request mail with your WeChat ID and a contribution you have made to BFE(such as a PR/Issue). We will invite you right away. Twitter : @BFE-Networks Issue tracker : Use the GitHub issue tracker to file bugs and features request. CONTRIBUTING We sincerely appreciate your contribution. Please visit the BFE repository and follow the workflow . PROJECT GOVERNANCE BFE is an independent open-source project. BFE community follow the following rules . CODE OF CONDUCT To make BFE a welcoming and harassment-free experience for everyone, we follow the following Code of Conduct . APPLICATION FOR SPECIAL COOPERATION Welcome to email us .","title":"Get Involved"},{"location":"COMMUNITY/#community","text":"BFE user forum : Github Discussions . BFE community on Slack : Sign up CNCF Slack and join bfe channel. WeChat developer group : Send a request mail with your WeChat ID and a contribution you have made to BFE(such as a PR/Issue). We will invite you right away. Twitter : @BFE-Networks Issue tracker : Use the GitHub issue tracker to file bugs and features request.","title":"COMMUNITY"},{"location":"COMMUNITY/#contributing","text":"We sincerely appreciate your contribution. Please visit the BFE repository and follow the workflow .","title":"CONTRIBUTING"},{"location":"COMMUNITY/#project-governance","text":"BFE is an independent open-source project. BFE community follow the following rules .","title":"PROJECT GOVERNANCE"},{"location":"COMMUNITY/#code-of-conduct","text":"To make BFE a welcoming and harassment-free experience for everyone, we follow the following Code of Conduct .","title":"CODE OF CONDUCT"},{"location":"COMMUNITY/#application-for-special-cooperation","text":"Welcome to email us .","title":"APPLICATION FOR SPECIAL COOPERATION"},{"location":"DOWNLOAD/","text":"We provide precompiled binaries for bfe components. Download the latest release of BFE for your platform. bfe v1.6.0 2022-10-25 Release notes File name OS Arch Size SHA256 Checksum bfe_1.6.0_darwin_amd64.tar.gz darwin amd 64 9.3M 61c8c5cab55c2b0ae7a5a0c027559efceddf58924fec7ff7dc9342e9ae8800e6 bfe_1.6.0_linux_amd64.tar.gz linux amd64 9.56 MB 26510e09a7da8618e860beb58823b12b4305bf83a48fde4d09fae5f5c4d18aba bfe_1.6.0_linux_arm64.tar.gz linux arm64 8.84 MB 135d3d8f45612633958df923a876b5481ca5d4221f3d997de952cfd797ccd77e bfe_1.6.0_windows_amd64.tar.gz windows amd64 9.64 MB 31e331335c87c2c44faf6dce915a53f5b7fada6c1925580ee2e19db6933fe450 bfe v1.5.0 2022-01-11 Release notes File name OS Arch Size SHA256 Checksum bfe_1.5.0_darwin_amd64.tar.gz darwin amd 64 9.29M accf8ccebaf98ab38028f7beb8c4da0825a7c62976063bd844cebeb2d57760b0 bfe_1.5.0_linux_amd64.tar.gz linux amd64 9.55 MB a74818d26462995b4f79c72184bee005c3aa161d9cb7af42b41d18791733336d bfe_1.5.0_linux_arm64.tar.gz linux arm64 8.83 MB d9ee8877c679d2b7af2d1fa60cd4a498bc252c5832df0f8ced771cae1d36fa58 bfe_1.5.0_windows_amd64.tar.gz windows amd64 9.63 MB a9f54df2a2374bf53ba6ad1d728f82a27f2b2c8aaa6ae854141c58105a905992 bfe v1.4.0 2021-12-10 Release notes File name OS Arch Size SHA256 Checksum bfe_1.4.0_darwin_amd64.tar.gz darwin amd 64 9.26M 03940a193b3e6a18b9f0f0f0ad344110e362f511c7582d21f39c4b4581ff6fd1 bfe_1.4.0_linux_amd64.tar.gz linux amd64 9.51 MB 62535dd2025be9bd5484d92bb991c6f8080c7e7d69911fd7eef4fd5235cf61ab bfe_1.4.0_linux_arm64.tar.gz linux arm64 8.8 MB 33de43a45fd6c6414b4359aa2c3e1141d2299ee07ad6dfb48d2afd1af1561734 bfe_1.4.0_windows_amd64.tar.gz windows amd64 9.59 MB c637b5917a428850dde470e915eaac3076707da8959392d38bce70eee2190767 bfe v1.3.0 2021-09-16 Release notes File name OS Arch Size SHA256 Checksum bfe_1.3.0_darwin_amd64.tar.gz darwin amd 64 9.2M fc14494b466a79328c3a614545ee2fe9ee6963cfc22a2fb35345a47c35ea623a bfe_1.3.0_linux_amd64.tar.gz linux amd64 9.45 MB 2b0d484a9fcf56cc68edb7dce0357c446ba64fd2672b079b041c178da998d59a bfe_1.3.0_linux_arm64.tar.gz linux arm64 8.72 MB 43e9fdf9e909af6365727ee88c2b78d9e825f8828d5b2050f4cb8c6b6fb0add2 bfe_1.3.0_windows_amd64.tar.gz windows amd64 9.48 MB 87cdadbfa5e7bbd413b1fc853c0824971fdb2777c111c3dea22893c3a48363b8 bfe v1.2.0 2021-06-21 Release notes File name OS Arch Size SHA256 Checksum bfe_1.2.0_darwin_amd64.tar.gz darwin amd64 11.9 MB 2ebd507dbc469bba3bd3600523aa6c7c4cd306249a015f3af9fe110445243398 bfe_1.2.0_linux_amd64.tar.gz linux amd64 12.9 MB 410eb77e963adeaf0892639d1dfd9ac048027a2fba02f5efc1374aced4134809 bfe_1.2.0_linux_arm64.tar.gz linux arm64 11.8 MB 87c83da7e182fe556f60be951c7c611f9ae144fa04d87986a5c18bcd93d9dde9 bfe_1.2.0_windows_amd64.tar.gz windows amd64 12.1 MB e1b920fd6d8a4454120822e1640d2fd65c90fd7ec77983a661f426c82918cecd bfe v1.1.0 2021-04-08 Release notes File name OS Arch Size SHA256 Checksum bfe_1.1.0_darwin_amd64.tar.gz darwin amd64 11.9 MB 95a1cfe762008533886d6fb68b38cc9c492491216d6e39bfb8003785a366e22b bfe_1.1.0_linux_amd64.tar.gz linux amd64 12.9 MB 7dd8fc826c4a4b147b6ca2a19e713ecd9450b099f45e123498fdf63221b59cf2 bfe_1.1.0_linux_arm64.tar.gz linux arm64 11.8 MB a2b6047eb4121a0ff6a0255699384a94b094f9d60553ad9e2a11ee39647320bd bfe_1.1.0_windows_amd64.tar.gz windows amd64 12.1 MB e2c49b49c45db9fb89ffcf7688de08f6c73c58035021763bd9b61b7e0dbe7771 bfe v1.0.0 2021-01-15 Release notes File name OS Arch Size SHA256 Checksum bfe_1.0.0_darwin_amd64.tar.gz darwin amd64 7.03 MB c0d13440d89ab97f52c61610d1b10dec6dcfb47b468a66078d1dd60f0541ec9e bfe_1.0.0_linux_arm64.tar.gz linux arm64 5.63 MB 47a3730ac90c4700c557d6c5903361c557e169102256bac870cede4eb90ff829 bfe_1.0.0_linux_amd64.tar.gz linux amd64 6.18 MB 5ec46c26827d554ba4c76f7f5e12b6b6afb68a9333213065802fa425fb81cbd1 bfe_1.0.0_windows_amd64.tar.gz windows amd64 6.15 MB 95ba788d0335ac536036c77e39249ce1629b2d159c942293077fd57ddc487f29 bfe v0.10.0 2020-05-25 Release notes File name OS Arch Size SHA256 Checksum bfe_0.10.0_darwin_amd64.tar.gz darwin amd64 6.61 MB a8c9336efc94124bc7dc016fda3a45eed9d4d80b065ebf1f450bc4ca78f3dd39 bfe_0.10.0_linux_amd64.tar.gz linux amd64 7.36 MB f8b136990daf5f59498c7f86a9adcbabc6c93b1599614bb9d32796b538537a9c bfe_0.10.0_windows_amd64.zip windows amd64 5.99 MB 914ec8025ad6c5dc57e59f4a93a3a562c2be1f71c475d7022b9ad74f6223b861 bfe v0.9.0 2020-04-16 Release notes File name OS Arch Size SHA256 Checksum bfe_0.9.0_darwin_amd64.tar.gz darwin amd64 9.75 MB 3bdbb80cc4946bc85b7295fc86ca86800e7811d20f37b36037aadfc7df718ad9 bfe_0.9.0_linux_amd64.tar.gz linux amd64 10.90 MB 9b6aaac88651d88e86e67835b5ae0bdbe1c76076382b198f0aeb0b94b7572887 bfe_0.9.0_windows_amd64.zip windows amd64 9.75 MB 4079f97b544b3070bec3ad65a28ccb816290890a278a51c88c81c15405c1f8cf","title":"Download binaries"},{"location":"DOWNLOAD/#bfe-v160","text":"2022-10-25 Release notes File name OS Arch Size SHA256 Checksum bfe_1.6.0_darwin_amd64.tar.gz darwin amd 64 9.3M 61c8c5cab55c2b0ae7a5a0c027559efceddf58924fec7ff7dc9342e9ae8800e6 bfe_1.6.0_linux_amd64.tar.gz linux amd64 9.56 MB 26510e09a7da8618e860beb58823b12b4305bf83a48fde4d09fae5f5c4d18aba bfe_1.6.0_linux_arm64.tar.gz linux arm64 8.84 MB 135d3d8f45612633958df923a876b5481ca5d4221f3d997de952cfd797ccd77e bfe_1.6.0_windows_amd64.tar.gz windows amd64 9.64 MB 31e331335c87c2c44faf6dce915a53f5b7fada6c1925580ee2e19db6933fe450","title":"bfe v1.6.0"},{"location":"DOWNLOAD/#bfe-v150","text":"2022-01-11 Release notes File name OS Arch Size SHA256 Checksum bfe_1.5.0_darwin_amd64.tar.gz darwin amd 64 9.29M accf8ccebaf98ab38028f7beb8c4da0825a7c62976063bd844cebeb2d57760b0 bfe_1.5.0_linux_amd64.tar.gz linux amd64 9.55 MB a74818d26462995b4f79c72184bee005c3aa161d9cb7af42b41d18791733336d bfe_1.5.0_linux_arm64.tar.gz linux arm64 8.83 MB d9ee8877c679d2b7af2d1fa60cd4a498bc252c5832df0f8ced771cae1d36fa58 bfe_1.5.0_windows_amd64.tar.gz windows amd64 9.63 MB a9f54df2a2374bf53ba6ad1d728f82a27f2b2c8aaa6ae854141c58105a905992","title":"bfe v1.5.0"},{"location":"DOWNLOAD/#bfe-v140","text":"2021-12-10 Release notes File name OS Arch Size SHA256 Checksum bfe_1.4.0_darwin_amd64.tar.gz darwin amd 64 9.26M 03940a193b3e6a18b9f0f0f0ad344110e362f511c7582d21f39c4b4581ff6fd1 bfe_1.4.0_linux_amd64.tar.gz linux amd64 9.51 MB 62535dd2025be9bd5484d92bb991c6f8080c7e7d69911fd7eef4fd5235cf61ab bfe_1.4.0_linux_arm64.tar.gz linux arm64 8.8 MB 33de43a45fd6c6414b4359aa2c3e1141d2299ee07ad6dfb48d2afd1af1561734 bfe_1.4.0_windows_amd64.tar.gz windows amd64 9.59 MB c637b5917a428850dde470e915eaac3076707da8959392d38bce70eee2190767","title":"bfe v1.4.0"},{"location":"DOWNLOAD/#bfe-v130","text":"2021-09-16 Release notes File name OS Arch Size SHA256 Checksum bfe_1.3.0_darwin_amd64.tar.gz darwin amd 64 9.2M fc14494b466a79328c3a614545ee2fe9ee6963cfc22a2fb35345a47c35ea623a bfe_1.3.0_linux_amd64.tar.gz linux amd64 9.45 MB 2b0d484a9fcf56cc68edb7dce0357c446ba64fd2672b079b041c178da998d59a bfe_1.3.0_linux_arm64.tar.gz linux arm64 8.72 MB 43e9fdf9e909af6365727ee88c2b78d9e825f8828d5b2050f4cb8c6b6fb0add2 bfe_1.3.0_windows_amd64.tar.gz windows amd64 9.48 MB 87cdadbfa5e7bbd413b1fc853c0824971fdb2777c111c3dea22893c3a48363b8","title":"bfe v1.3.0"},{"location":"DOWNLOAD/#bfe-v120","text":"2021-06-21 Release notes File name OS Arch Size SHA256 Checksum bfe_1.2.0_darwin_amd64.tar.gz darwin amd64 11.9 MB 2ebd507dbc469bba3bd3600523aa6c7c4cd306249a015f3af9fe110445243398 bfe_1.2.0_linux_amd64.tar.gz linux amd64 12.9 MB 410eb77e963adeaf0892639d1dfd9ac048027a2fba02f5efc1374aced4134809 bfe_1.2.0_linux_arm64.tar.gz linux arm64 11.8 MB 87c83da7e182fe556f60be951c7c611f9ae144fa04d87986a5c18bcd93d9dde9 bfe_1.2.0_windows_amd64.tar.gz windows amd64 12.1 MB e1b920fd6d8a4454120822e1640d2fd65c90fd7ec77983a661f426c82918cecd","title":"bfe v1.2.0"},{"location":"DOWNLOAD/#bfe-v110","text":"2021-04-08 Release notes File name OS Arch Size SHA256 Checksum bfe_1.1.0_darwin_amd64.tar.gz darwin amd64 11.9 MB 95a1cfe762008533886d6fb68b38cc9c492491216d6e39bfb8003785a366e22b bfe_1.1.0_linux_amd64.tar.gz linux amd64 12.9 MB 7dd8fc826c4a4b147b6ca2a19e713ecd9450b099f45e123498fdf63221b59cf2 bfe_1.1.0_linux_arm64.tar.gz linux arm64 11.8 MB a2b6047eb4121a0ff6a0255699384a94b094f9d60553ad9e2a11ee39647320bd bfe_1.1.0_windows_amd64.tar.gz windows amd64 12.1 MB e2c49b49c45db9fb89ffcf7688de08f6c73c58035021763bd9b61b7e0dbe7771","title":"bfe v1.1.0"},{"location":"DOWNLOAD/#bfe-v100","text":"2021-01-15 Release notes File name OS Arch Size SHA256 Checksum bfe_1.0.0_darwin_amd64.tar.gz darwin amd64 7.03 MB c0d13440d89ab97f52c61610d1b10dec6dcfb47b468a66078d1dd60f0541ec9e bfe_1.0.0_linux_arm64.tar.gz linux arm64 5.63 MB 47a3730ac90c4700c557d6c5903361c557e169102256bac870cede4eb90ff829 bfe_1.0.0_linux_amd64.tar.gz linux amd64 6.18 MB 5ec46c26827d554ba4c76f7f5e12b6b6afb68a9333213065802fa425fb81cbd1 bfe_1.0.0_windows_amd64.tar.gz windows amd64 6.15 MB 95ba788d0335ac536036c77e39249ce1629b2d159c942293077fd57ddc487f29","title":"bfe v1.0.0"},{"location":"DOWNLOAD/#bfe-v0100","text":"2020-05-25 Release notes File name OS Arch Size SHA256 Checksum bfe_0.10.0_darwin_amd64.tar.gz darwin amd64 6.61 MB a8c9336efc94124bc7dc016fda3a45eed9d4d80b065ebf1f450bc4ca78f3dd39 bfe_0.10.0_linux_amd64.tar.gz linux amd64 7.36 MB f8b136990daf5f59498c7f86a9adcbabc6c93b1599614bb9d32796b538537a9c bfe_0.10.0_windows_amd64.zip windows amd64 5.99 MB 914ec8025ad6c5dc57e59f4a93a3a562c2be1f71c475d7022b9ad74f6223b861","title":"bfe v0.10.0"},{"location":"DOWNLOAD/#bfe-v090","text":"2020-04-16 Release notes File name OS Arch Size SHA256 Checksum bfe_0.9.0_darwin_amd64.tar.gz darwin amd64 9.75 MB 3bdbb80cc4946bc85b7295fc86ca86800e7811d20f37b36037aadfc7df718ad9 bfe_0.9.0_linux_amd64.tar.gz linux amd64 10.90 MB 9b6aaac88651d88e86e67835b5ae0bdbe1c76076382b198f0aeb0b94b7572887 bfe_0.9.0_windows_amd64.zip windows amd64 9.75 MB 4079f97b544b3070bec3ad65a28ccb816290890a278a51c88c81c15405c1f8cf","title":"bfe v0.9.0"},{"location":"SUMMARY/","text":"Summary About Introduction Overview Comparsion to similar systems Design overview Terminology Traffic fowarding model Traffic routing Traffic balancing Getting help Version History Getting Started Install User Guides Traffic forwarding Traffic blocking Request redirect Request rewrite FastCGI procotol TLS mutual authentication Installation Install from source Install using binaries Install using go Install using snap Configuration Overview Core Protocol SSL/TLS Certificate Session ticket key Routing Host rule Vip rule Route rule Backend Cluster Load Balancing Sub-clusters balancing Instances balancing Name Service Naming Modules mod_access mod_auth_basic mod_auth_jwt mod_block mod_compress mod_doh mod_errors mod_geo mod_header mod_http_code mod_key_log mod_logid mod_prison mod_redirect mod_rewrite mod_static mod_tag mod_trace mod_trust_clientip mod_userid mod_secure_link Operations Command line options Environment variables System signals Management API Configuration reload System metrics Log Rotation Traffic tapping Performance How to Contribute Contribute codes Local development Sumbit PR Contribute documents Releasing process Development guides Source code layout BFE module development BFE callback introduction How to write a module FAQ Installation Configuration Performance Development Appendix A: Monitor Protocol TLS HTTP HTTP2 SPDY WebSocket Stream Routing Host table Load Balancing Balance details Balance error Proxy Proxy state Memory Modules Lentency Lentency histogram Appendix B: Condition Condition Concept and Grammar Condition Naming Convention Condition Primitives Index Request related Condition Primitives Method URI Protocol Header Cookie Tag IP Response related Condition Primitives Code Header Session related Condition Primitives IP System related Condition Primitives Time Note: This documentation is working in process. Please help improve it by filing issues or pull requests .","title":"Summary"},{"location":"SUMMARY/#summary","text":"About Introduction Overview Comparsion to similar systems Design overview Terminology Traffic fowarding model Traffic routing Traffic balancing Getting help Version History Getting Started Install User Guides Traffic forwarding Traffic blocking Request redirect Request rewrite FastCGI procotol TLS mutual authentication Installation Install from source Install using binaries Install using go Install using snap Configuration Overview Core Protocol SSL/TLS Certificate Session ticket key Routing Host rule Vip rule Route rule Backend Cluster Load Balancing Sub-clusters balancing Instances balancing Name Service Naming Modules mod_access mod_auth_basic mod_auth_jwt mod_block mod_compress mod_doh mod_errors mod_geo mod_header mod_http_code mod_key_log mod_logid mod_prison mod_redirect mod_rewrite mod_static mod_tag mod_trace mod_trust_clientip mod_userid mod_secure_link Operations Command line options Environment variables System signals Management API Configuration reload System metrics Log Rotation Traffic tapping Performance How to Contribute Contribute codes Local development Sumbit PR Contribute documents Releasing process Development guides Source code layout BFE module development BFE callback introduction How to write a module FAQ Installation Configuration Performance Development Appendix A: Monitor Protocol TLS HTTP HTTP2 SPDY WebSocket Stream Routing Host table Load Balancing Balance details Balance error Proxy Proxy state Memory Modules Lentency Lentency histogram Appendix B: Condition Condition Concept and Grammar Condition Naming Convention Condition Primitives Index Request related Condition Primitives Method URI Protocol Header Cookie Tag IP Response related Condition Primitives Code Header Session related Condition Primitives IP System related Condition Primitives Time Note: This documentation is working in process. Please help improve it by filing issues or pull requests .","title":"Summary"},{"location":"condition/condition_grammar/","text":"Concept and Grammar Basic Concepts Condition Primitive A condition primitive is a basic and built-in function which check some specified condition matched or not. // return true if the request Host is \"www.bfe-networks.com\" or \"bfe-networks.com\" req_host_in(\"www.bfe-networks.com|bfe-networks.com\") BFE provides a set of built-in condition primitives Condition Expression A condition expression is a series of condition primitives combined with operators (e.g. AND, OR, NOT, etc). // return ture if the request host is \"bfe-networks.com\" and the request method is \"GET\" req_host_in(\"bfe-networks.com\") && req_method_in(\"GET\") The supported operators are described in another section below. Condition Variable You can define a variable and assign a condition expression to it. // define a condition varaible bfe_host = req_host_in(\"bfe-networks.com\") Advanced Condition Expression An advanced condition expression is a series of condition primitives and condition variables combined with operators (e.g. AND, OR, NOT, etc). In an advanced condition expression, the condition variable is identified by \"$\" prefix // return true if the value of new_host is true and the request method is GET $news_host && req_method_in(\"GET\") Grammar Condition Primitive Grammar A condition primitive is shown as follows: func_name(params) func_name is the name of condition primitive params are the parameters condition primitive The type of return value is bool Condition Expression Grammar Condition Expression(CE) grammar is defined as follows: CE = CE && CE | CE || CE | ( CE ) | ! CE | ConditionPrimitive Advanced Condition Expression Grammar Advanced Condition Expression(ACE) grammar is defined as follows: ACE = ACE && ACE | ACE || ACE | ( ACE) | ! ACE | ConditionPrimitive | ConditionVariable Operator Precedence The precedence and associativity of operators are similar to the C language. The following table lists the precedence and associativity of all operators. Operators are listed top to bottom, in descending precedence. Precedence Operator Description Associativity 1 () parentheses (grouping) Left-to-right 2 ! logical NOT Right-to-left 3 && logical AND Left-to-right 4 || logical OR Left-to-right","title":"Concept and grammar"},{"location":"condition/condition_grammar/#concept-and-grammar","text":"","title":"Concept and Grammar"},{"location":"condition/condition_grammar/#basic-concepts","text":"","title":"Basic Concepts"},{"location":"condition/condition_grammar/#condition-primitive","text":"A condition primitive is a basic and built-in function which check some specified condition matched or not. // return true if the request Host is \"www.bfe-networks.com\" or \"bfe-networks.com\" req_host_in(\"www.bfe-networks.com|bfe-networks.com\") BFE provides a set of built-in condition primitives","title":"Condition Primitive"},{"location":"condition/condition_grammar/#condition-expression","text":"A condition expression is a series of condition primitives combined with operators (e.g. AND, OR, NOT, etc). // return ture if the request host is \"bfe-networks.com\" and the request method is \"GET\" req_host_in(\"bfe-networks.com\") && req_method_in(\"GET\") The supported operators are described in another section below.","title":"Condition Expression"},{"location":"condition/condition_grammar/#condition-variable","text":"You can define a variable and assign a condition expression to it. // define a condition varaible bfe_host = req_host_in(\"bfe-networks.com\")","title":"Condition Variable"},{"location":"condition/condition_grammar/#advanced-condition-expression","text":"An advanced condition expression is a series of condition primitives and condition variables combined with operators (e.g. AND, OR, NOT, etc). In an advanced condition expression, the condition variable is identified by \"$\" prefix // return true if the value of new_host is true and the request method is GET $news_host && req_method_in(\"GET\")","title":"Advanced Condition Expression"},{"location":"condition/condition_grammar/#grammar","text":"","title":"Grammar"},{"location":"condition/condition_grammar/#condition-primitive-grammar","text":"A condition primitive is shown as follows: func_name(params) func_name is the name of condition primitive params are the parameters condition primitive The type of return value is bool","title":"Condition Primitive Grammar"},{"location":"condition/condition_grammar/#condition-expression-grammar","text":"Condition Expression(CE) grammar is defined as follows: CE = CE && CE | CE || CE | ( CE ) | ! CE | ConditionPrimitive","title":"Condition Expression Grammar"},{"location":"condition/condition_grammar/#advanced-condition-expression-grammar","text":"Advanced Condition Expression(ACE) grammar is defined as follows: ACE = ACE && ACE | ACE || ACE | ( ACE) | ! ACE | ConditionPrimitive | ConditionVariable","title":"Advanced Condition Expression Grammar"},{"location":"condition/condition_grammar/#operator-precedence","text":"The precedence and associativity of operators are similar to the C language. The following table lists the precedence and associativity of all operators. Operators are listed top to bottom, in descending precedence. Precedence Operator Description Associativity 1 () parentheses (grouping) Left-to-right 2 ! logical NOT Right-to-left 3 && logical AND Left-to-right 4 || logical OR Left-to-right","title":"Operator Precedence"},{"location":"condition/condition_naming_convention/","text":"Naming convention of condition primitives BFE adopts the following naming convention for condition primitives. Name prefix of condition primitives Name prefix of the request primitive is \" req_ \" e.g. req_host_in() Name prefix of the response primitive is \" res_ \" e.g. res_code_in() Name prefix of the session primitive is \" ses_ \" e.g. ses_vip_in() Name prefix of the system primitive is \" bfe_ \" e.g. bfe_time_range() Name of comparison operations match : exact match eg. req_tag_match() in : whether an element exists in a set or not eg. req_host_in() prefix_in : whether the prefix exists in a set or not eg. req_path_prefix_in() suffix_in : whether the suffix exists in a set or not eg. req_path_suffix_in() key_exist : whether the specified key exists or not eg. req_query_key_exist() value_in : whether the value exists in a set or not eg. req_query_key_exist() value_prefix_in : whether the value prefix exists in a set or not eg. req_header_value_prefix_in() value_suffix_in : whether the value suffix exists in a set or not eg. req_header_value_suffix_in() range : range match eg. req_cip_range() regmatch : use regular expression to match eg. req_url_regmatch() Warning: Inappropriate use can significantly affect performance contain : string match eg. req_cookie_value_contain()","title":"Naming convention"},{"location":"condition/condition_naming_convention/#naming-convention-of-condition-primitives","text":"BFE adopts the following naming convention for condition primitives.","title":"Naming convention of condition primitives"},{"location":"condition/condition_naming_convention/#name-prefix-of-condition-primitives","text":"Name prefix of the request primitive is \" req_ \" e.g. req_host_in() Name prefix of the response primitive is \" res_ \" e.g. res_code_in() Name prefix of the session primitive is \" ses_ \" e.g. ses_vip_in() Name prefix of the system primitive is \" bfe_ \" e.g. bfe_time_range()","title":"Name prefix of condition primitives"},{"location":"condition/condition_naming_convention/#name-of-comparison-operations","text":"match : exact match eg. req_tag_match() in : whether an element exists in a set or not eg. req_host_in() prefix_in : whether the prefix exists in a set or not eg. req_path_prefix_in() suffix_in : whether the suffix exists in a set or not eg. req_path_suffix_in() key_exist : whether the specified key exists or not eg. req_query_key_exist() value_in : whether the value exists in a set or not eg. req_query_key_exist() value_prefix_in : whether the value prefix exists in a set or not eg. req_header_value_prefix_in() value_suffix_in : whether the value suffix exists in a set or not eg. req_header_value_suffix_in() range : range match eg. req_cip_range() regmatch : use regular expression to match eg. req_url_regmatch() Warning: Inappropriate use can significantly affect performance contain : string match eg. req_cookie_value_contain()","title":"Name of comparison operations"},{"location":"condition/condition_primitive_index/","text":"Condition Primitive Index Request Primitive cip req_cip_hash_in(value_list) req_cip_range(start_ip, end_ip) req_cip_trusted() context req_context_value_in(key, value_list, case_insensitive) cookie req_cookie_key_in(key_list) req_cookie_value_contain(key, value, case_insensitive) req_cookie_value_hash_in(key, value_list, case_insensitive) req_cookie_value_in(key, value_list, case_insensitive) req_cookie_value_prefix_in(key, value_prefix_list, case_insensitive) req_cookie_value_suffix_in(key, value_suffix_list, case_insensitive) header req_header_key_in(key_list) req_header_value_contain(key, value_list, case_insensitive) req_header_value_hash_in(header_name, value_list, case_insensitive) req_header_value_in(header_name, value_list, case_insensitive) req_header_value_prefix_in(header_name, value_prefix_list, case_insensitive) req_header_value_suffix_in(header_name, value_suffix_list, case_insensitive) host req_host_in(host_list) method req_method_in(method_list) path req_path_contain(path_list, case_insensitive) req_path_element_prefix_in(prefix_list, case_insensitive) req_path_in(path_list, case_insensitive) req_path_prefix_in(prefix_list, case_insensitive) req_path_suffix_in(suffix_list, case_insensitive) port req_port_in(port_list) protocol req_proto_secure() query req_query_key_in(key_list) req_query_key_prefix_in(prefix_list) req_query_value_hash_in(key, value_list, case_insensitive) req_query_value_in(key, value_list, case_insensitive) req_query_value_prefix_in(key, prefix_list, case_insensitive) req_query_value_suffix_in(key, suffix_list, case_insensitive) tag req_tag_match(tagName, tagValue) url req_url_regmatch(reg_exp) vip req_vip_in(vip_list) req_vip_range(start_ip, end_ip) Response Primitive code res_code_in(codes) header res_header_key_in(key_list) res_header_value_in(key, value_list, case_insensitive) Session Primitive sip ses_sip_range(start_ip, end_ip) tls client ses_tls_client_auth() ses_tls_client_ca_in(ca_list) tls sni ses_tls_sni_in(host_list) vip ses_vip_range(start_ip, end_ip) System Primitive time bfe_time_range(start_time, end_time) bfe_periodic_time_range(start_time, end_time, period)","title":"Primitives index"},{"location":"condition/condition_primitive_index/#condition-primitive-index","text":"","title":"Condition Primitive Index"},{"location":"condition/condition_primitive_index/#request-primitive","text":"","title":"Request Primitive"},{"location":"condition/condition_primitive_index/#cip","text":"req_cip_hash_in(value_list) req_cip_range(start_ip, end_ip) req_cip_trusted()","title":"cip"},{"location":"condition/condition_primitive_index/#context","text":"req_context_value_in(key, value_list, case_insensitive)","title":"context"},{"location":"condition/condition_primitive_index/#cookie","text":"req_cookie_key_in(key_list) req_cookie_value_contain(key, value, case_insensitive) req_cookie_value_hash_in(key, value_list, case_insensitive) req_cookie_value_in(key, value_list, case_insensitive) req_cookie_value_prefix_in(key, value_prefix_list, case_insensitive) req_cookie_value_suffix_in(key, value_suffix_list, case_insensitive)","title":"cookie"},{"location":"condition/condition_primitive_index/#header","text":"req_header_key_in(key_list) req_header_value_contain(key, value_list, case_insensitive) req_header_value_hash_in(header_name, value_list, case_insensitive) req_header_value_in(header_name, value_list, case_insensitive) req_header_value_prefix_in(header_name, value_prefix_list, case_insensitive) req_header_value_suffix_in(header_name, value_suffix_list, case_insensitive)","title":"header"},{"location":"condition/condition_primitive_index/#host","text":"req_host_in(host_list)","title":"host"},{"location":"condition/condition_primitive_index/#method","text":"req_method_in(method_list)","title":"method"},{"location":"condition/condition_primitive_index/#path","text":"req_path_contain(path_list, case_insensitive) req_path_element_prefix_in(prefix_list, case_insensitive) req_path_in(path_list, case_insensitive) req_path_prefix_in(prefix_list, case_insensitive) req_path_suffix_in(suffix_list, case_insensitive)","title":"path"},{"location":"condition/condition_primitive_index/#port","text":"req_port_in(port_list)","title":"port"},{"location":"condition/condition_primitive_index/#protocol","text":"req_proto_secure()","title":"protocol"},{"location":"condition/condition_primitive_index/#query","text":"req_query_key_in(key_list) req_query_key_prefix_in(prefix_list) req_query_value_hash_in(key, value_list, case_insensitive) req_query_value_in(key, value_list, case_insensitive) req_query_value_prefix_in(key, prefix_list, case_insensitive) req_query_value_suffix_in(key, suffix_list, case_insensitive)","title":"query"},{"location":"condition/condition_primitive_index/#tag","text":"req_tag_match(tagName, tagValue)","title":"tag"},{"location":"condition/condition_primitive_index/#url","text":"req_url_regmatch(reg_exp)","title":"url"},{"location":"condition/condition_primitive_index/#vip","text":"req_vip_in(vip_list) req_vip_range(start_ip, end_ip)","title":"vip"},{"location":"condition/condition_primitive_index/#response-primitive","text":"","title":"Response Primitive"},{"location":"condition/condition_primitive_index/#code","text":"res_code_in(codes)","title":"code"},{"location":"condition/condition_primitive_index/#header_1","text":"res_header_key_in(key_list) res_header_value_in(key, value_list, case_insensitive)","title":"header"},{"location":"condition/condition_primitive_index/#session-primitive","text":"","title":"Session Primitive"},{"location":"condition/condition_primitive_index/#sip","text":"ses_sip_range(start_ip, end_ip)","title":"sip"},{"location":"condition/condition_primitive_index/#tls-client","text":"ses_tls_client_auth() ses_tls_client_ca_in(ca_list)","title":"tls client"},{"location":"condition/condition_primitive_index/#tls-sni","text":"ses_tls_sni_in(host_list)","title":"tls sni"},{"location":"condition/condition_primitive_index/#vip_1","text":"ses_vip_range(start_ip, end_ip)","title":"vip"},{"location":"condition/condition_primitive_index/#system-primitive","text":"","title":"System Primitive"},{"location":"condition/condition_primitive_index/#time","text":"bfe_time_range(start_time, end_time) bfe_periodic_time_range(start_time, end_time, period)","title":"time"},{"location":"condition/request/context/","text":"req_context_value_in(key, value_list, case_insensitive) Description: Judge if value of context key matches configured patterns Parameters Parameter Description key String context key value_list String a list of query values which are concatenated using | case_insensitive Boolean case insensitive Example req_context_value_in(\"cmd\", \"add|del|list\", true)","title":"Context"},{"location":"condition/request/context/#req_context_value_inkey-value_list-case_insensitive","text":"Description: Judge if value of context key matches configured patterns Parameters Parameter Description key String context key value_list String a list of query values which are concatenated using | case_insensitive Boolean case insensitive Example req_context_value_in(\"cmd\", \"add|del|list\", true)","title":"req_context_value_in(key, value_list, case_insensitive)"},{"location":"condition/request/cookie/","text":"Request Cookie Related Primitives req_cookie_key_in(key_list) Description: Judge if cookie key matches configured patterns Parameters Parameter Description key_list String a list of cookie keys which are concatenated using | Example req_cookie_key_in(\"uid|cid|uss\") req_cookie_value_in(key, value_list, case_insensitive) Description: Judge if value of cookie key matches configured patterns Parameters Parameter Description key String cookie key value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_in(\"deviceid\", \"testid\", true) req_cookie_value_prefix_in(key, value_prefix_list, case_insensitive) Description: Judge if value prefix of cookie key matches configured patterns Parameters Parameter Description key String cookie key value_prefix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_prefix_in(\"deviceid\", \"x\", true) req_cookie_value_suffix_in(key, value_suffix_list, case_insensitive) Description: Judge if value suffix of cookie key matches configured patterns Parameters Parameter Description key String cookie key value_suffix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_suffix_in(\"deviceid\", \"1\", true) req_cookie_value_hash_in(key, value_list, case_insensitive) Description: Judge if hash value of specified cookie matches configured patterns(value range: 0\uff5e9999) Parameters Parameter Description key String cookie key value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_hash_in(\"uid\", \"100\", true) req_cookie_value_contain(key, value, case_insensitive) Description: Judge if value of cookie key contains configured patterns Parameters Parameter Description key String cookie key value String a string case_insensitive Boolean case insensitive Example req_cookie_value_contain(\"deviceid\", \"test\", true)","title":"Cookie"},{"location":"condition/request/cookie/#request-cookie-related-primitives","text":"","title":"Request Cookie Related Primitives"},{"location":"condition/request/cookie/#req_cookie_key_inkey_list","text":"Description: Judge if cookie key matches configured patterns Parameters Parameter Description key_list String a list of cookie keys which are concatenated using | Example req_cookie_key_in(\"uid|cid|uss\")","title":"req_cookie_key_in(key_list)"},{"location":"condition/request/cookie/#req_cookie_value_inkey-value_list-case_insensitive","text":"Description: Judge if value of cookie key matches configured patterns Parameters Parameter Description key String cookie key value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_in(\"deviceid\", \"testid\", true)","title":"req_cookie_value_in(key, value_list, case_insensitive)"},{"location":"condition/request/cookie/#req_cookie_value_prefix_inkey-value_prefix_list-case_insensitive","text":"Description: Judge if value prefix of cookie key matches configured patterns Parameters Parameter Description key String cookie key value_prefix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_prefix_in(\"deviceid\", \"x\", true)","title":"req_cookie_value_prefix_in(key, value_prefix_list, case_insensitive)"},{"location":"condition/request/cookie/#req_cookie_value_suffix_inkey-value_suffix_list-case_insensitive","text":"Description: Judge if value suffix of cookie key matches configured patterns Parameters Parameter Description key String cookie key value_suffix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_suffix_in(\"deviceid\", \"1\", true)","title":"req_cookie_value_suffix_in(key, value_suffix_list, case_insensitive)"},{"location":"condition/request/cookie/#req_cookie_value_hash_inkey-value_list-case_insensitive","text":"Description: Judge if hash value of specified cookie matches configured patterns(value range: 0\uff5e9999) Parameters Parameter Description key String cookie key value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_cookie_value_hash_in(\"uid\", \"100\", true)","title":"req_cookie_value_hash_in(key, value_list, case_insensitive)"},{"location":"condition/request/cookie/#req_cookie_value_containkey-value-case_insensitive","text":"Description: Judge if value of cookie key contains configured patterns Parameters Parameter Description key String cookie key value String a string case_insensitive Boolean case insensitive Example req_cookie_value_contain(\"deviceid\", \"test\", true)","title":"req_cookie_value_contain(key, value, case_insensitive)"},{"location":"condition/request/header/","text":"Request Header Related Primitives req_header_key_in(key_list) Description: Judge if header key in matches configured patterns Parameters Parameter Description key_list String a list of header keys which are concatenated using | The header key should be in canonical form Example // right\uff1a req_header_key_in(\"Header-Test\") // wrong\uff1a req_header_key_in(\"Header-test\") req_header_key_in(\"header-test\") req_header_key_in(\"header-Test\") req_header_value_in(header_name, value_list, case_insensitive) Description: Judge if value of key in header matches configured patterns Parameters Parameter Description header_name String header name value_list String a list of header values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_value_in(\"Referer\", \"https://example.org/login\", true) req_header_value_prefix_in(header_name, value_prefix_list, case_insensitive) Description: Judge if value prefix of key in header matches configured patterns Parameters Parameter Description header_name String header name value_prefix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_prefix_value_in(\"Referer\", \"https://example.org\", true) req_header_value_suffix_in(header_name, value_suffix_list, case_insensitive) Description: Judge if value suffix of key in header matches configured patterns Parameters Parameter Description header_name String header name value_suffix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_suffix_value_in(\"User-Agent\", \"2.0.4\", true) req_header_value_hash_in(header_name, value_list, case_insensitive) Description: Judge if hash value of specified header matches configured patterns (value range: 0\uff5e9999) Parameters Parameter Description header_name String header name value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_value_hash_in(\"X-Device-Id\", \"100-200|400\", true) req_header_value_contain(header_name, value_list, case_insensitive) Description: Judge if value of key in header contains configured patterns Parameters Parameter Description header_name String header name value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_value_contain(\"User-Agent\", \"Firefox|Chrome\", true)","title":"Header"},{"location":"condition/request/header/#request-header-related-primitives","text":"","title":"Request Header Related Primitives"},{"location":"condition/request/header/#req_header_key_inkey_list","text":"Description: Judge if header key in matches configured patterns Parameters Parameter Description key_list String a list of header keys which are concatenated using | The header key should be in canonical form Example // right\uff1a req_header_key_in(\"Header-Test\") // wrong\uff1a req_header_key_in(\"Header-test\") req_header_key_in(\"header-test\") req_header_key_in(\"header-Test\")","title":"req_header_key_in(key_list)"},{"location":"condition/request/header/#req_header_value_inheader_name-value_list-case_insensitive","text":"Description: Judge if value of key in header matches configured patterns Parameters Parameter Description header_name String header name value_list String a list of header values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_value_in(\"Referer\", \"https://example.org/login\", true)","title":"req_header_value_in(header_name, value_list, case_insensitive)"},{"location":"condition/request/header/#req_header_value_prefix_inheader_name-value_prefix_list-case_insensitive","text":"Description: Judge if value prefix of key in header matches configured patterns Parameters Parameter Description header_name String header name value_prefix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_prefix_value_in(\"Referer\", \"https://example.org\", true)","title":"req_header_value_prefix_in(header_name, value_prefix_list, case_insensitive)"},{"location":"condition/request/header/#req_header_value_suffix_inheader_name-value_suffix_list-case_insensitive","text":"Description: Judge if value suffix of key in header matches configured patterns Parameters Parameter Description header_name String header name value_suffix_list String a list of values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_suffix_value_in(\"User-Agent\", \"2.0.4\", true)","title":"req_header_value_suffix_in(header_name, value_suffix_list, case_insensitive)"},{"location":"condition/request/header/#req_header_value_hash_inheader_name-value_list-case_insensitive","text":"Description: Judge if hash value of specified header matches configured patterns (value range: 0\uff5e9999) Parameters Parameter Description header_name String header name value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_value_hash_in(\"X-Device-Id\", \"100-200|400\", true)","title":"req_header_value_hash_in(header_name, value_list, case_insensitive)"},{"location":"condition/request/header/#req_header_value_containheader_name-value_list-case_insensitive","text":"Description: Judge if value of key in header contains configured patterns Parameters Parameter Description header_name String header name value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_header_value_contain(\"User-Agent\", \"Firefox|Chrome\", true)","title":"req_header_value_contain(header_name, value_list, case_insensitive)"},{"location":"condition/request/ip/","text":"IP Related Primitives req_cip_range(start_ip, end_ip) Description: Judge if client IP is in [start_ip, end_ip] Parameters Parameter Description start_ip String start ip address end_ip String end ip address Example req_cip_range(\"10.0.0.1\", \"10.0.0.10\") req_cip_trusted() Description: Judge if client IP is trust IP req_cip_hash_in(value_list) Description: Judge if client IP after hash matches configured patterns (value after hash is 0\uff5e9999) Parameters Parameter Description value_list String a list of hash values which are concatenated using | Example req_cip_hash_in(\"100\") req_cip_hash_in(\"100-200\") req_cip_hash_in(\"100-200|1000-1000\") req_vip_in(vip_list) Description: Judge if VIP is in configured VIP list Parameters Parameter Description vip_list String a list of vips which are concatenated using | Example req_vip_in(\"10.0.0.1|10.0.0.2\") req_vip_range(start_ip, end_ip) Description: Judge if VIP is in [start_ip, end_ip] Parameters Parameter Description start_ip String start ip address end_ip String end ip address Example req_vip_range(\"10.0.0.1\", \"10.0.0.10\")","title":"IP"},{"location":"condition/request/ip/#ip-related-primitives","text":"","title":"IP Related Primitives"},{"location":"condition/request/ip/#req_cip_rangestart_ip-end_ip","text":"Description: Judge if client IP is in [start_ip, end_ip] Parameters Parameter Description start_ip String start ip address end_ip String end ip address Example req_cip_range(\"10.0.0.1\", \"10.0.0.10\")","title":"req_cip_range(start_ip, end_ip)"},{"location":"condition/request/ip/#req_cip_trusted","text":"Description: Judge if client IP is trust IP","title":"req_cip_trusted()"},{"location":"condition/request/ip/#req_cip_hash_invalue_list","text":"Description: Judge if client IP after hash matches configured patterns (value after hash is 0\uff5e9999) Parameters Parameter Description value_list String a list of hash values which are concatenated using | Example req_cip_hash_in(\"100\") req_cip_hash_in(\"100-200\") req_cip_hash_in(\"100-200|1000-1000\")","title":"req_cip_hash_in(value_list)"},{"location":"condition/request/ip/#req_vip_invip_list","text":"Description: Judge if VIP is in configured VIP list Parameters Parameter Description vip_list String a list of vips which are concatenated using | Example req_vip_in(\"10.0.0.1|10.0.0.2\")","title":"req_vip_in(vip_list)"},{"location":"condition/request/ip/#req_vip_rangestart_ip-end_ip","text":"Description: Judge if VIP is in [start_ip, end_ip] Parameters Parameter Description start_ip String start ip address end_ip String end ip address Example req_vip_range(\"10.0.0.1\", \"10.0.0.10\")","title":"req_vip_range(start_ip, end_ip)"},{"location":"condition/request/method/","text":"Request Method Related Primitives req_method_in(method_list) Description: Judge if request method matches configured patterns Parameters Parameter Description method_list String a list of methods which are concatenated by |. valid method:GET/POST/PUT/DELETE Example req_method_in(\"GET|POST\")","title":"Method"},{"location":"condition/request/method/#request-method-related-primitives","text":"","title":"Request Method Related Primitives"},{"location":"condition/request/method/#req_method_inmethod_list","text":"Description: Judge if request method matches configured patterns Parameters Parameter Description method_list String a list of methods which are concatenated by |. valid method:GET/POST/PUT/DELETE Example req_method_in(\"GET|POST\")","title":"req_method_in(method_list)"},{"location":"condition/request/protocol/","text":"Protocol Related Primitives req_proto_secure() Description: Judge if request is over TLS protocol(ie. HTTPS/SPDY/HTTP2)","title":"Protocol"},{"location":"condition/request/protocol/#protocol-related-primitives","text":"","title":"Protocol Related Primitives"},{"location":"condition/request/protocol/#req_proto_secure","text":"Description: Judge if request is over TLS protocol(ie. HTTPS/SPDY/HTTP2)","title":"req_proto_secure()"},{"location":"condition/request/tag/","text":"Request Tag Related Primtives req_tag_match(tagName, tagValue) Description: Judge if request tag matches configured value Parameters Parameter Description tagName String tag name tagValue String tag value Example req_tag_match(\"clientIP\", \"blocklist\")","title":"Tag"},{"location":"condition/request/tag/#request-tag-related-primtives","text":"","title":"Request Tag Related Primtives"},{"location":"condition/request/tag/#req_tag_matchtagname-tagvalue","text":"Description: Judge if request tag matches configured value Parameters Parameter Description tagName String tag name tagValue String tag value Example req_tag_match(\"clientIP\", \"blocklist\")","title":"req_tag_match(tagName, tagValue)"},{"location":"condition/request/uri/","text":"Request URI Related Primitives req_host_in(host_list) Description: Judge if host matches configured patterns Parameters Parameter Description host_list String a list of hosts keys which are concatenated using | case insensitive Example // right\uff1a req_host_in(\"www.bfe-networks.com|bfe-networks.com\") // wrong\uff1a req_host_in(\"www.bfe-networks.com | bfe-networks.com\") req_path_in(path_list, case_insensitive) Description: Judge if request path matches configured patterns Parameters Parameter Description path_list String a list of paths which are concatenated using | Each path should start with '/' case_insensitive Boolean case insensitive Example req_path_in(\"/api/search|/api/list\", true) req_path_contain(path_list, case_insensitive) Description: Judge if request path contains configured patterns Parameters Parameter Description path_list String path's substring list which are concatenated with | case_insensitive Boolean case insensitive Example req_path_contain(\"search|analytics\", true) req_path_prefix_in(prefix_list, case_insensitive) Description: Judge if request path prefix matches configured patterns Parameters Parameter Description prefix_list String a list of path prefixs which are concatenated using | Each path prefix should start with '/' case_insensitive Boolean case insensitive Example req_path_prefix_in(\"/api/report|/api/analytics\", false) req_path_suffix_in(suffix_list, case_insensitive) Description: Judge if request path suffix matches configured patterns Parameters Parameter Description suffix_list String a list of path sufixs which are concatenated using | case_insensitive Boolean case insensitive Example req_path_suffix_in(\".php|.jsp\", false) req_path_element_prefix_in(prefix_list, case_insensitive) Description: Judge if request path element prefix matches configured patterns Parameters Parameter Description prefix_list String a list of path element prefixs which are concatenated using | Each path prefix should start with '/' and end with '/', Automatic add '/' suffix when not end with '/' case_insensitive Boolean case insensitive Example req_path_element_prefix_in(\"/api/report/|/api/analytics/\", false) req_query_key_in(key_list) Description: Judge if query key matches configured patterns Parameters Parameter Description key_list String a list of query keys which are concatenated using | Example req_query_key_exist(\"word|wd\") req_query_key_prefix_in(prefix_list) Description: Judge if query key prefix matches configured patterns Parameters Parameter Description prefix_list String a list of query key prefixs which are concatenated using | Example req_query_key_prefix_in(\"rid\") req_query_value_in(key, value_list, case_insensitive) Description: Judge if value of query key matches configured patterns Parameters Parameter Description key String query key value_list String a list of query values which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_in(\"uid\", \"x|y|z\", true) req_query_value_prefix_in(key, prefix_list, case_insensitive) Description: Judge if value prefix of query key matches configured patterns Parameters Parameter Description key String query key value_list String a list of query value prefixs which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_prefix_in(\"uid\", \"100|200\", true) req_query_value_suffix_in(key, suffix_list, case_insensitive) Description: Judge if value suffix of query key matches configured patterns Parameters Parameter Description key String query key suffix_list String a list of query value suffixs which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_suffix_in(\"uid\", \"1|2|3\", true) req_query_value_hash_in(key, value_list, case_insensitive) Description: Judge if the hash value of specified query matches configured patterns (value after hash is 0\uff5e9999) Parameters Parameter Description key String query key value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_hash_in(\"cid\", \"100\", true) req_port_in(port_list) Description: Judge if port matches configured patterns Parameters Parameter Description port_list String a list of ports which are concatenated using | Example req_port_in(\"80|8080\") req_url_regmatch(reg_exp) Description: patterns is regular expression to match url Parameters Parameter Description reg_exp String a regular expression It is recommended that use `` to avoid from character escaping Example req_url_regmatch(`/s\\?word=123`)","title":"URI"},{"location":"condition/request/uri/#request-uri-related-primitives","text":"","title":"Request URI Related Primitives"},{"location":"condition/request/uri/#req_host_inhost_list","text":"Description: Judge if host matches configured patterns Parameters Parameter Description host_list String a list of hosts keys which are concatenated using | case insensitive Example // right\uff1a req_host_in(\"www.bfe-networks.com|bfe-networks.com\") // wrong\uff1a req_host_in(\"www.bfe-networks.com | bfe-networks.com\")","title":"req_host_in(host_list)"},{"location":"condition/request/uri/#req_path_inpath_list-case_insensitive","text":"Description: Judge if request path matches configured patterns Parameters Parameter Description path_list String a list of paths which are concatenated using | Each path should start with '/' case_insensitive Boolean case insensitive Example req_path_in(\"/api/search|/api/list\", true)","title":"req_path_in(path_list, case_insensitive)"},{"location":"condition/request/uri/#req_path_containpath_list-case_insensitive","text":"Description: Judge if request path contains configured patterns Parameters Parameter Description path_list String path's substring list which are concatenated with | case_insensitive Boolean case insensitive Example req_path_contain(\"search|analytics\", true)","title":"req_path_contain(path_list, case_insensitive)"},{"location":"condition/request/uri/#req_path_prefix_inprefix_list-case_insensitive","text":"Description: Judge if request path prefix matches configured patterns Parameters Parameter Description prefix_list String a list of path prefixs which are concatenated using | Each path prefix should start with '/' case_insensitive Boolean case insensitive Example req_path_prefix_in(\"/api/report|/api/analytics\", false)","title":"req_path_prefix_in(prefix_list, case_insensitive)"},{"location":"condition/request/uri/#req_path_suffix_insuffix_list-case_insensitive","text":"Description: Judge if request path suffix matches configured patterns Parameters Parameter Description suffix_list String a list of path sufixs which are concatenated using | case_insensitive Boolean case insensitive Example req_path_suffix_in(\".php|.jsp\", false)","title":"req_path_suffix_in(suffix_list, case_insensitive)"},{"location":"condition/request/uri/#req_path_element_prefix_inprefix_list-case_insensitive","text":"Description: Judge if request path element prefix matches configured patterns Parameters Parameter Description prefix_list String a list of path element prefixs which are concatenated using | Each path prefix should start with '/' and end with '/', Automatic add '/' suffix when not end with '/' case_insensitive Boolean case insensitive Example req_path_element_prefix_in(\"/api/report/|/api/analytics/\", false)","title":"req_path_element_prefix_in(prefix_list, case_insensitive)"},{"location":"condition/request/uri/#req_query_key_inkey_list","text":"Description: Judge if query key matches configured patterns Parameters Parameter Description key_list String a list of query keys which are concatenated using | Example req_query_key_exist(\"word|wd\")","title":"req_query_key_in(key_list)"},{"location":"condition/request/uri/#req_query_key_prefix_inprefix_list","text":"Description: Judge if query key prefix matches configured patterns Parameters Parameter Description prefix_list String a list of query key prefixs which are concatenated using | Example req_query_key_prefix_in(\"rid\")","title":"req_query_key_prefix_in(prefix_list)"},{"location":"condition/request/uri/#req_query_value_inkey-value_list-case_insensitive","text":"Description: Judge if value of query key matches configured patterns Parameters Parameter Description key String query key value_list String a list of query values which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_in(\"uid\", \"x|y|z\", true)","title":"req_query_value_in(key, value_list, case_insensitive)"},{"location":"condition/request/uri/#req_query_value_prefix_inkey-prefix_list-case_insensitive","text":"Description: Judge if value prefix of query key matches configured patterns Parameters Parameter Description key String query key value_list String a list of query value prefixs which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_prefix_in(\"uid\", \"100|200\", true)","title":"req_query_value_prefix_in(key, prefix_list, case_insensitive)"},{"location":"condition/request/uri/#req_query_value_suffix_inkey-suffix_list-case_insensitive","text":"Description: Judge if value suffix of query key matches configured patterns Parameters Parameter Description key String query key suffix_list String a list of query value suffixs which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_suffix_in(\"uid\", \"1|2|3\", true)","title":"req_query_value_suffix_in(key, suffix_list, case_insensitive)"},{"location":"condition/request/uri/#req_query_value_hash_inkey-value_list-case_insensitive","text":"Description: Judge if the hash value of specified query matches configured patterns (value after hash is 0\uff5e9999) Parameters Parameter Description key String query key value_list String a list of hash values which are concatenated using | case_insensitive Boolean case insensitive Example req_query_value_hash_in(\"cid\", \"100\", true)","title":"req_query_value_hash_in(key, value_list, case_insensitive)"},{"location":"condition/request/uri/#req_port_inport_list","text":"Description: Judge if port matches configured patterns Parameters Parameter Description port_list String a list of ports which are concatenated using | Example req_port_in(\"80|8080\")","title":"req_port_in(port_list)"},{"location":"condition/request/uri/#req_url_regmatchreg_exp","text":"Description: patterns is regular expression to match url Parameters Parameter Description reg_exp String a regular expression It is recommended that use `` to avoid from character escaping Example req_url_regmatch(`/s\\?word=123`)","title":"req_url_regmatch(reg_exp)"},{"location":"condition/response/code/","text":"Response code related primitives res_code_in(codes) Description: Judge response HTTP status code is in configured codes Parameters Parameter Description codes String a list of codes which are concatenated using | Example res_code_in(\"200|500\")","title":"Code"},{"location":"condition/response/code/#response-code-related-primitives","text":"","title":"Response code related primitives"},{"location":"condition/response/code/#res_code_incodes","text":"Description: Judge response HTTP status code is in configured codes Parameters Parameter Description codes String a list of codes which are concatenated using | Example res_code_in(\"200|500\")","title":"res_code_in(codes)"},{"location":"condition/response/header/","text":"Response header related primitives res_header_key_in(key_list) Description: Judge if key in Header of response matches configured key_list Parameters Parameter Description key_list String a list of header keys which are concatenated using | Example res_header_key_in(\"X-Bfe-Debug\") res_header_value_in(key, value_list, case_insensitive) Description: Judge if value of key in response header matches configured patterns Parameters Parameter Description key String header name value_list String a list of header values which are concatenated using | case_insensitive Boolean case insensitive Example res_header_value_in(\"X-Bfe-Debug\", \"1\", true)","title":"Header"},{"location":"condition/response/header/#response-header-related-primitives","text":"","title":"Response header related primitives"},{"location":"condition/response/header/#res_header_key_inkey_list","text":"Description: Judge if key in Header of response matches configured key_list Parameters Parameter Description key_list String a list of header keys which are concatenated using | Example res_header_key_in(\"X-Bfe-Debug\")","title":"res_header_key_in(key_list)"},{"location":"condition/response/header/#res_header_value_inkey-value_list-case_insensitive","text":"Description: Judge if value of key in response header matches configured patterns Parameters Parameter Description key String header name value_list String a list of header values which are concatenated using | case_insensitive Boolean case insensitive Example res_header_value_in(\"X-Bfe-Debug\", \"1\", true)","title":"res_header_value_in(key, value_list, case_insensitive)"},{"location":"condition/session/ip/","text":"Session IP related primitives ses_sip_range(start_ip, end_ip) Description: Judge if source IP of session is in [start_ip, end_ip] Parameter Parameter Description start_ip String start ip address end_ip String end ip address Example ses_sip_range(\"10.0.0.1\", \"10.0.0.10\") ses_vip_range(start_ip, end_ip) Description: Judge if VIP of session is in [start_ip, end_ip] Parameter Parameter Description start_ip String start ip address end_ip String end ip address Example ses_vip_range(\"10.0.0.1\", \"10.0.0.10\")","title":"IP"},{"location":"condition/session/ip/#session-ip-related-primitives","text":"","title":"Session IP related primitives"},{"location":"condition/session/ip/#ses_sip_rangestart_ip-end_ip","text":"Description: Judge if source IP of session is in [start_ip, end_ip] Parameter Parameter Description start_ip String start ip address end_ip String end ip address Example ses_sip_range(\"10.0.0.1\", \"10.0.0.10\")","title":"ses_sip_range(start_ip, end_ip)"},{"location":"condition/session/ip/#ses_vip_rangestart_ip-end_ip","text":"Description: Judge if VIP of session is in [start_ip, end_ip] Parameter Parameter Description start_ip String start ip address end_ip String end ip address Example ses_vip_range(\"10.0.0.1\", \"10.0.0.10\")","title":"ses_vip_range(start_ip, end_ip)"},{"location":"condition/session/tls/","text":"TLS related primtives ses_tls_sni_in(host_list) Description: Check whether tls sni matches host_list Parameters Parameter Description host_list String a list of hosts which are concatenated using | Example ses_tls_sni_in(\"example.com|example.org\") ses_tls_client_auth() Description: Check whether tls mutual authentication is enabled ses_tls_client_ca_in(ca_list) Description: Check whether tls mutual authentication is enabled and client ca matches ca_list Parameters Parameter Description ca_list String a list of ca names which are concatenated using | Example ses_tls_client_ca_in(\"ca1|ca2\")","title":"TLS"},{"location":"condition/session/tls/#tls-related-primtives","text":"","title":"TLS related primtives"},{"location":"condition/session/tls/#ses_tls_sni_inhost_list","text":"Description: Check whether tls sni matches host_list Parameters Parameter Description host_list String a list of hosts which are concatenated using | Example ses_tls_sni_in(\"example.com|example.org\")","title":"ses_tls_sni_in(host_list)"},{"location":"condition/session/tls/#ses_tls_client_auth","text":"Description: Check whether tls mutual authentication is enabled","title":"ses_tls_client_auth()"},{"location":"condition/session/tls/#ses_tls_client_ca_inca_list","text":"Description: Check whether tls mutual authentication is enabled and client ca matches ca_list Parameters Parameter Description ca_list String a list of ca names which are concatenated using | Example ses_tls_client_ca_in(\"ca1|ca2\")","title":"ses_tls_client_ca_in(ca_list)"},{"location":"condition/system/time/","text":"Time related primitives bfe_time_range(start_time, end_time) Description: Judge if current time is in [start_time, end_time] Parameters Parameter Description start_time String start time end_time String end time Time format\uff1ayyyymmddhhmmssZ\uff0cZ is time zone\uff0cdetail information is shown in Section \"Time Zone Detail\" Example bfe_time_range(\"20190204203000H\", \"20190204204500H\") bfe_periodic_time_range(start_time, end_time, period) Description: Judge if current time is periodly(period) in [start_time, end_time] Parameters Parameter Description start_time String start time end_time String end time period String period, defualt Day Time format: hhmmssZ\uff0cZ is time zone\uff0cdetail information is shown in \"Appendix B: Time Zone Detail\" Example bfe_periodic_time_range(\"203000H\", \"204500H\", \"\") Appendix A: Condition Primitive Test In order to test time condition primitive, X-Bfe-Debug-Time can be added in header of request to mock system time Appendix B: Time Zone Detail Time zone name Letter Offset Description Alfa Time Zone A +1 Bravo Time Zone B +2 Charlie Time Zone C +3 Delta Time Zone D +4 Echo Time Zone E +5 Foxtrot Time Zone F +6 Golf Time Zone G +7 Hotel Time Zone H +8 Beijing Time India Time Zone I +9 Kilo Time Zone K +10 Lima Time Zone L +11 Mike Time Zone M +12 November Time Zone N \u22121 Oscar Time Zone O \u22122 Papa Time Zone P \u22123 Quebec Time Zone Q \u22124 Romeo Time Zone R \u22125 Sierra Time Zone S \u22126 Tango Time Zone T \u22127 Uniform Time Zone U \u22128 Victor Time Zone V \u22129 Whiskey Time Zone W \u221210 X-ray Time Zone X \u221211 Yankee Time Zone Y \u221212 Zulu Time Zone Z 0 Greenwich Mean Time","title":"Time"},{"location":"condition/system/time/#time-related-primitives","text":"","title":"Time related primitives"},{"location":"condition/system/time/#bfe_time_rangestart_time-end_time","text":"Description: Judge if current time is in [start_time, end_time] Parameters Parameter Description start_time String start time end_time String end time Time format\uff1ayyyymmddhhmmssZ\uff0cZ is time zone\uff0cdetail information is shown in Section \"Time Zone Detail\" Example bfe_time_range(\"20190204203000H\", \"20190204204500H\")","title":"bfe_time_range(start_time, end_time)"},{"location":"condition/system/time/#bfe_periodic_time_rangestart_time-end_time-period","text":"Description: Judge if current time is periodly(period) in [start_time, end_time] Parameters Parameter Description start_time String start time end_time String end time period String period, defualt Day Time format: hhmmssZ\uff0cZ is time zone\uff0cdetail information is shown in \"Appendix B: Time Zone Detail\" Example bfe_periodic_time_range(\"203000H\", \"204500H\", \"\")","title":"bfe_periodic_time_range(start_time, end_time, period)"},{"location":"condition/system/time/#appendix-a-condition-primitive-test","text":"In order to test time condition primitive, X-Bfe-Debug-Time can be added in header of request to mock system time","title":"Appendix A: Condition Primitive Test"},{"location":"condition/system/time/#appendix-b-time-zone-detail","text":"Time zone name Letter Offset Description Alfa Time Zone A +1 Bravo Time Zone B +2 Charlie Time Zone C +3 Delta Time Zone D +4 Echo Time Zone E +5 Foxtrot Time Zone F +6 Golf Time Zone G +7 Hotel Time Zone H +8 Beijing Time India Time Zone I +9 Kilo Time Zone K +10 Lima Time Zone L +11 Mike Time Zone M +12 November Time Zone N \u22121 Oscar Time Zone O \u22122 Papa Time Zone P \u22123 Quebec Time Zone Q \u22124 Romeo Time Zone R \u22125 Sierra Time Zone S \u22126 Tango Time Zone T \u22127 Uniform Time Zone U \u22128 Victor Time Zone V \u22129 Whiskey Time Zone W \u221210 X-ray Time Zone X \u221211 Yankee Time Zone Y \u221212 Zulu Time Zone Z 0 Greenwich Mean Time","title":"Appendix B: Time Zone Detail"},{"location":"configuration/bfe.conf/","text":"Core Configuration Introduction bfe.conf is the core configuration file of BFE. Configuration Server basic config Config Item Description Basic.HttpPort Integer Listen port for HTTP Default 8080 Basic.HttpsPort Integer Listen port for HTTPS Default 8443 Basic.MonitorPort Integer Listen port for monitor Default 8421 Basic.MonitorEnabled Boolean If false, monitor server is disabled Default True Basic.MaxCpus Integer Max number of CPUs to use (0 to use all CPUs) Default 0 Basic.Layer4LoadBalancer String Type of layer-4 load balancer (PROXY/NONE) Default NONE Basic.TlsHandshakeTimeout Integer TLS handshake timeout, in seconds Default 30 Basic.ClientReadTimeout Integer Read timeout of communicating with http client, in seconds Default 60 Basic.ClientWriteTimeout Integer Write timeout of communicating with http client, in seconds Default 60 Basic.KeepAliveEnabled Boolean If false, HTTP Keep-Alive is disabled Default True Basic.GracefulShutdownTimeout Integer Timeout for graceful shutdown (maximum 300 sec) Default 10 Basic.MaxHeaderBytes Integer Max length of request header, in bytes Default 10485 Basic.MaxHeaderUriBytes Integer Max lenght of request URI, in bytes Default 8192 Basic.HostRuleConf String Path of host config Default server_data_conf/host_rule.data Basic.VipRuleConf String Path of VIP config Default server_data_conf/vip_rule.data Basic.RouteRuleConf String Path of route rule config Default server_data_conf/route_rule.data Basic.ClusterConf String Path of cluster config Default server_data_conf/cluster_conf.data Basic.GslbConf String Path of subcluster balancing config Default cluster_conf/gslb.data Basic.ClusterTableConf String Path of instance balancing config Default cluster_conf/cluster_table.data Basic.NameConf String Path of naming config Default server_data_conf/name_conf.data Basic.Modules String Enabled modules Default \"\" Basic.MonitorInterval Integer Interval for get diff of proxy-state Default 20 Basic.DebugServHttp Boolean Debug flag for ServerHttp Default False Basic.DebugBfeRoute Boolean Debug flag for BfeRoute Default False Basic.DebugBal Boolean Debug flag for Bal Default False Basic.DebugHealthCheck Boolean Debug flag for HealthCheck Default False TLS basic config Config Item Description HttpsBasic.ServerCertConf String Path of cert config Default tls_conf/server_cert_conf.data HttpsBasic.TlsRuleConf String Path of tls rule config Default tls_conf/tls_rule_conf.data HttpsBasic.CipherSuites String CipherSuites preference settings Default HttpsBasic.CurvePreferences String Curve perference settings Default CurveP256 HttpsBasic.EnableSslv2ClientHello Boolean Enable Sslv2ClientHello for compatible with ancient sslv3 client Default True HttpsBasic.ClientCABaseDir String Base directory of client ca certificates Note: filename suffix of ca certificate must be \".crt\" Default tls_conf/client_ca SessioCache.SessionCacheDisabled Boolean Disable tls session cache or not Default True SessioCache.Servers String Address of cache server Default \"\" SessioCache.KeyPrefix String Prefix for cache key Default bfe SessioCache.ConnectTimeout Integer Connection timeout (ms) Default 50 SessioCache.ReadTimeout Integer Read timeout of connection with redis server (ms) Default 50 SessioCache.WriteTimeout Integer Write timeout of connection with redis server (ms) Default 50 SessioCache.MaxIdle Integer Max idle connections in connection pool Default 20 SessioCache.SessionExpire Integer Expire time for tls session state (second) Default 3600 SessionTicket.SessionTicketsDisabled Boolean Disable tls session ticket or not Default True SessionTicket.SessionTicketKeyFile String Path of session ticket key config Default tls_conf/session_ticket_key.data Example [Server] # listen port for http request HttpPort = 8080 # listen port for https request HttpsPort = 8443 # listen port for monitor request MonitorPort = 8421 # max number of CPUs to use (0 to use all CPUs) MaxCpus = 0 # type of layer-4 load balancer (PROXY/NONE) # # Note: # - PROXY: layer-4 balancer talking the proxy protocol # eg. F5 BigIP/Citrix ADC # - NONE: layer-4 balancer disabled Layer4LoadBalancer = \"\" # tls handshake timeout, in seconds TlsHandshakeTimeout = 30 # read timeout, in seconds ClientReadTimeout = 60 # write timeout, in seconds ClientWriteTimeout = 60 # if false, client connection is shutdown disregard of http headers KeepAliveEnabled = true # timeout for graceful shutdown (maximum 300 sec) GracefulShutdownTimeout = 10 # max header length in bytes in request MaxHeaderBytes = 1048576 # max URI(in header) length in bytes in request MaxHeaderUriBytes = 8192 # routing related confs HostRuleConf = server_data_conf/host_rule.data VipRuleConf = server_data_conf/vip_rule.data RouteRuleConf = server_data_conf/route_rule.data ClusterConf = server_data_conf/cluster_conf.data NameConf = server_data_conf/name_conf.data # load balancing related confs ClusterTableConf = cluster_conf/cluster_table.data GslbConf = cluster_conf/gslb.data Modules = mod_trust_clientip Modules = mod_block Modules = mod_header Modules = mod_rewrite Modules = mod_redirect Modules = mod_logid # interval for get diff of proxy-state MonitorInterval = 20 DebugServHttp = false DebugBfeRoute = false DebugBal = false DebugHealthCheck = false [HttpsBasic] # cert conf for https ServerCertConf = tls_conf/server_cert_conf.data # tls rule for https TlsRuleConf = tls_conf/tls_rule_conf.data # supported cipherSuites preference settings # # ciphersuites implemented in golang # TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 # TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 # TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 # TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 # TLS_ECDHE_RSA_WITH_RC4_128_SHA # TLS_ECDHE_ECDSA_WITH_RC4_128_SHA # TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA # TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA # TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA # TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA # TLS_RSA_WITH_RC4_128_SHA # TLS_RSA_WITH_AES_128_CBC_SHA # TLS_RSA_WITH_AES_256_CBC_SHA # TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA # TLS_RSA_WITH_3DES_EDE_CBC_SHA # # Note: # -. Equivalent cipher suites (cipher suites with same priority in server side): # CipherSuites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 # CipherSuites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 # CipherSuites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 CipherSuites=TLS_ECDHE_RSA_WITH_RC4_128_SHA CipherSuites=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA CipherSuites=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA CipherSuites=TLS_RSA_WITH_RC4_128_SHA CipherSuites=TLS_RSA_WITH_AES_128_CBC_SHA CipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA # supported curve perference settings # # curves implemented in golang: # CurveP256 # CurveP384 # CurveP521 # # Note: # - Do not use CurveP384/CurveP521 which is with poor performance # CurvePreferences=CurveP256 # support Sslv2 ClientHello for compatible with ancient # TLS capable clients (mozilla 5, java 5/6, openssl 0.9.8 etc) EnableSslv2ClientHello = true # client ca certificates base directory # Note: filename suffix for ca certificate file should be \".crt\", eg. example_ca_bundle.crt ClientCABaseDir = tls_conf/client_ca [SessionCache] # disable tls session cache or not SessionCacheDisabled = true # tcp address of redis server Servers = \"example.redis.cluster\" # prefix for cache key KeyPrefix = \"bfe\" # connection params (ms) ConnectTimeout = 50 ReadTimeout = 50 WriteTimeout = 50 # max idle connections in connection pool MaxIdle = 20 # expire time for tls session state (second) SessionExpire = 3600 [SessionTicket] # disable tls session ticket or not SessionTicketsDisabled = true # session ticket key SessionTicketKeyFile = tls_conf/session_ticket_key.data","title":"Core"},{"location":"configuration/bfe.conf/#core-configuration","text":"","title":"Core Configuration"},{"location":"configuration/bfe.conf/#introduction","text":"bfe.conf is the core configuration file of BFE.","title":"Introduction"},{"location":"configuration/bfe.conf/#configuration","text":"","title":"Configuration"},{"location":"configuration/bfe.conf/#server-basic-config","text":"Config Item Description Basic.HttpPort Integer Listen port for HTTP Default 8080 Basic.HttpsPort Integer Listen port for HTTPS Default 8443 Basic.MonitorPort Integer Listen port for monitor Default 8421 Basic.MonitorEnabled Boolean If false, monitor server is disabled Default True Basic.MaxCpus Integer Max number of CPUs to use (0 to use all CPUs) Default 0 Basic.Layer4LoadBalancer String Type of layer-4 load balancer (PROXY/NONE) Default NONE Basic.TlsHandshakeTimeout Integer TLS handshake timeout, in seconds Default 30 Basic.ClientReadTimeout Integer Read timeout of communicating with http client, in seconds Default 60 Basic.ClientWriteTimeout Integer Write timeout of communicating with http client, in seconds Default 60 Basic.KeepAliveEnabled Boolean If false, HTTP Keep-Alive is disabled Default True Basic.GracefulShutdownTimeout Integer Timeout for graceful shutdown (maximum 300 sec) Default 10 Basic.MaxHeaderBytes Integer Max length of request header, in bytes Default 10485 Basic.MaxHeaderUriBytes Integer Max lenght of request URI, in bytes Default 8192 Basic.HostRuleConf String Path of host config Default server_data_conf/host_rule.data Basic.VipRuleConf String Path of VIP config Default server_data_conf/vip_rule.data Basic.RouteRuleConf String Path of route rule config Default server_data_conf/route_rule.data Basic.ClusterConf String Path of cluster config Default server_data_conf/cluster_conf.data Basic.GslbConf String Path of subcluster balancing config Default cluster_conf/gslb.data Basic.ClusterTableConf String Path of instance balancing config Default cluster_conf/cluster_table.data Basic.NameConf String Path of naming config Default server_data_conf/name_conf.data Basic.Modules String Enabled modules Default \"\" Basic.MonitorInterval Integer Interval for get diff of proxy-state Default 20 Basic.DebugServHttp Boolean Debug flag for ServerHttp Default False Basic.DebugBfeRoute Boolean Debug flag for BfeRoute Default False Basic.DebugBal Boolean Debug flag for Bal Default False Basic.DebugHealthCheck Boolean Debug flag for HealthCheck Default False","title":"Server basic config"},{"location":"configuration/bfe.conf/#tls-basic-config","text":"Config Item Description HttpsBasic.ServerCertConf String Path of cert config Default tls_conf/server_cert_conf.data HttpsBasic.TlsRuleConf String Path of tls rule config Default tls_conf/tls_rule_conf.data HttpsBasic.CipherSuites String CipherSuites preference settings Default HttpsBasic.CurvePreferences String Curve perference settings Default CurveP256 HttpsBasic.EnableSslv2ClientHello Boolean Enable Sslv2ClientHello for compatible with ancient sslv3 client Default True HttpsBasic.ClientCABaseDir String Base directory of client ca certificates Note: filename suffix of ca certificate must be \".crt\" Default tls_conf/client_ca SessioCache.SessionCacheDisabled Boolean Disable tls session cache or not Default True SessioCache.Servers String Address of cache server Default \"\" SessioCache.KeyPrefix String Prefix for cache key Default bfe SessioCache.ConnectTimeout Integer Connection timeout (ms) Default 50 SessioCache.ReadTimeout Integer Read timeout of connection with redis server (ms) Default 50 SessioCache.WriteTimeout Integer Write timeout of connection with redis server (ms) Default 50 SessioCache.MaxIdle Integer Max idle connections in connection pool Default 20 SessioCache.SessionExpire Integer Expire time for tls session state (second) Default 3600 SessionTicket.SessionTicketsDisabled Boolean Disable tls session ticket or not Default True SessionTicket.SessionTicketKeyFile String Path of session ticket key config Default tls_conf/session_ticket_key.data","title":"TLS basic config"},{"location":"configuration/bfe.conf/#example","text":"[Server] # listen port for http request HttpPort = 8080 # listen port for https request HttpsPort = 8443 # listen port for monitor request MonitorPort = 8421 # max number of CPUs to use (0 to use all CPUs) MaxCpus = 0 # type of layer-4 load balancer (PROXY/NONE) # # Note: # - PROXY: layer-4 balancer talking the proxy protocol # eg. F5 BigIP/Citrix ADC # - NONE: layer-4 balancer disabled Layer4LoadBalancer = \"\" # tls handshake timeout, in seconds TlsHandshakeTimeout = 30 # read timeout, in seconds ClientReadTimeout = 60 # write timeout, in seconds ClientWriteTimeout = 60 # if false, client connection is shutdown disregard of http headers KeepAliveEnabled = true # timeout for graceful shutdown (maximum 300 sec) GracefulShutdownTimeout = 10 # max header length in bytes in request MaxHeaderBytes = 1048576 # max URI(in header) length in bytes in request MaxHeaderUriBytes = 8192 # routing related confs HostRuleConf = server_data_conf/host_rule.data VipRuleConf = server_data_conf/vip_rule.data RouteRuleConf = server_data_conf/route_rule.data ClusterConf = server_data_conf/cluster_conf.data NameConf = server_data_conf/name_conf.data # load balancing related confs ClusterTableConf = cluster_conf/cluster_table.data GslbConf = cluster_conf/gslb.data Modules = mod_trust_clientip Modules = mod_block Modules = mod_header Modules = mod_rewrite Modules = mod_redirect Modules = mod_logid # interval for get diff of proxy-state MonitorInterval = 20 DebugServHttp = false DebugBfeRoute = false DebugBal = false DebugHealthCheck = false [HttpsBasic] # cert conf for https ServerCertConf = tls_conf/server_cert_conf.data # tls rule for https TlsRuleConf = tls_conf/tls_rule_conf.data # supported cipherSuites preference settings # # ciphersuites implemented in golang # TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 # TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 # TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 # TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 # TLS_ECDHE_RSA_WITH_RC4_128_SHA # TLS_ECDHE_ECDSA_WITH_RC4_128_SHA # TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA # TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA # TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA # TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA # TLS_RSA_WITH_RC4_128_SHA # TLS_RSA_WITH_AES_128_CBC_SHA # TLS_RSA_WITH_AES_256_CBC_SHA # TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA # TLS_RSA_WITH_3DES_EDE_CBC_SHA # # Note: # -. Equivalent cipher suites (cipher suites with same priority in server side): # CipherSuites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 # CipherSuites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 # CipherSuites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 CipherSuites=TLS_ECDHE_RSA_WITH_RC4_128_SHA CipherSuites=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA CipherSuites=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA CipherSuites=TLS_RSA_WITH_RC4_128_SHA CipherSuites=TLS_RSA_WITH_AES_128_CBC_SHA CipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA # supported curve perference settings # # curves implemented in golang: # CurveP256 # CurveP384 # CurveP521 # # Note: # - Do not use CurveP384/CurveP521 which is with poor performance # CurvePreferences=CurveP256 # support Sslv2 ClientHello for compatible with ancient # TLS capable clients (mozilla 5, java 5/6, openssl 0.9.8 etc) EnableSslv2ClientHello = true # client ca certificates base directory # Note: filename suffix for ca certificate file should be \".crt\", eg. example_ca_bundle.crt ClientCABaseDir = tls_conf/client_ca [SessionCache] # disable tls session cache or not SessionCacheDisabled = true # tcp address of redis server Servers = \"example.redis.cluster\" # prefix for cache key KeyPrefix = \"bfe\" # connection params (ms) ConnectTimeout = 50 ReadTimeout = 50 WriteTimeout = 50 # max idle connections in connection pool MaxIdle = 20 # expire time for tls session state (second) SessionExpire = 3600 [SessionTicket] # disable tls session ticket or not SessionTicketsDisabled = true # session ticket key SessionTicketKeyFile = tls_conf/session_ticket_key.data","title":"Example"},{"location":"configuration/config/","text":"Configuration overview Notes This document explain how to configure BFE Server directly. For guide of configure BFE via BFE control plane components, see documents of BFE API Server and BFE Dashboard . Configuration types Normal configuration: For changes to the configuration file to take effect, you must restart the bfe process. Dynamic configuration: For changes to the configuration file to take effect, you can either restart or reload the bfe process. Configuration format Normal configuration file: INI format Dynamic configuration file: JSON format (except for cerfificate/dict file, etc) Configuration layout The main configuration file is named bfe.conf (conf/bfe.conf). To make the configuration easier to maintain, we split it into a set of feature-specific files stored in the conf/<feature>/ directory. Category Layout Main configuration conf/bfe.conf Configuration about protocol conf/tls_conf/ Configuration about routing conf/server_data_conf/ Configuration about balancing conf/cluster_conf/ Configuration about modules conf/mod_<name> Reloading Configuration See Reloading configuration","title":"Overview"},{"location":"configuration/config/#configuration-overview","text":"","title":"Configuration overview"},{"location":"configuration/config/#notes","text":"This document explain how to configure BFE Server directly. For guide of configure BFE via BFE control plane components, see documents of BFE API Server and BFE Dashboard .","title":"Notes"},{"location":"configuration/config/#configuration-types","text":"Normal configuration: For changes to the configuration file to take effect, you must restart the bfe process. Dynamic configuration: For changes to the configuration file to take effect, you can either restart or reload the bfe process.","title":"Configuration types"},{"location":"configuration/config/#configuration-format","text":"Normal configuration file: INI format Dynamic configuration file: JSON format (except for cerfificate/dict file, etc)","title":"Configuration format"},{"location":"configuration/config/#configuration-layout","text":"The main configuration file is named bfe.conf (conf/bfe.conf). To make the configuration easier to maintain, we split it into a set of feature-specific files stored in the conf/<feature>/ directory. Category Layout Main configuration conf/bfe.conf Configuration about protocol conf/tls_conf/ Configuration about routing conf/server_data_conf/ Configuration about balancing conf/cluster_conf/ Configuration about modules conf/mod_<name>","title":"Configuration layout"},{"location":"configuration/config/#reloading-configuration","text":"See Reloading configuration","title":"Reloading Configuration"},{"location":"configuration/cluster_conf/cluster_table.data/","text":"Instances Balancing Configuration Introduction cluster_table.data records the load balancing config among instances. Configuration Basic configuration Config Item Description Version String Verson of config file Config Object config of all clusters Config{k} String name of cluster Config{v} Object config of cluster Config{v}{k} String name of subcluster Config{v}{v} Object config of subcluster(a list of instance) Instance configuraton Config Item Description Addr String ip address of instance Name String name of instance Port String port of instance Weight String weight of instance Example { \"Config\": { \"cluster_example\": { \"example.bfe.bj\": [ { \"Addr\": \"10.199.189.26\", \"Name\": \"example_hostname\", \"Port\": 10257, \"Weight\": 10 } ] } }, \"Version\": \"20190101000000\" }","title":"Instances balancing"},{"location":"configuration/cluster_conf/cluster_table.data/#instances-balancing-configuration","text":"","title":"Instances Balancing Configuration"},{"location":"configuration/cluster_conf/cluster_table.data/#introduction","text":"cluster_table.data records the load balancing config among instances.","title":"Introduction"},{"location":"configuration/cluster_conf/cluster_table.data/#configuration","text":"","title":"Configuration"},{"location":"configuration/cluster_conf/cluster_table.data/#basic-configuration","text":"Config Item Description Version String Verson of config file Config Object config of all clusters Config{k} String name of cluster Config{v} Object config of cluster Config{v}{k} String name of subcluster Config{v}{v} Object config of subcluster(a list of instance)","title":"Basic configuration"},{"location":"configuration/cluster_conf/cluster_table.data/#instance-configuraton","text":"Config Item Description Addr String ip address of instance Name String name of instance Port String port of instance Weight String weight of instance","title":"Instance configuraton"},{"location":"configuration/cluster_conf/cluster_table.data/#example","text":"{ \"Config\": { \"cluster_example\": { \"example.bfe.bj\": [ { \"Addr\": \"10.199.189.26\", \"Name\": \"example_hostname\", \"Port\": 10257, \"Weight\": 10 } ] } }, \"Version\": \"20190101000000\" }","title":"Example"},{"location":"configuration/cluster_conf/gslb.data/","text":"SubClusters Balancing Configuration Introduction gslb.data records the load balancing config between sub-clusters. Configuration Config Item Description Clusters Object cluster config Clusters{k} String cluster name Clusters{v} Object weight config for each sub-cluster Clusters{v}{k} String name of sub-cluster GSLB_BLACKHOLE is the name of blackhole sub-cluster which discards all incoming requests Clusters{v}{v} Integer weight of sub-cluster The weight should be [0, 100] and the weight sum of all sub-cluster should be 100 Hostname String Hostname of gslb scheduler Ts String Timestamp of config file Example { \"Clusters\": { \"cluster_example\": { \"GSLB_BLACKHOLE\": 0, \"example.bfe.bj\": 100 } }, \"Hostname\": \"gslb-sch.example.com\", \"Ts\": \"20190101000000\" }","title":"Sub-clusters balancing"},{"location":"configuration/cluster_conf/gslb.data/#subclusters-balancing-configuration","text":"","title":"SubClusters Balancing Configuration"},{"location":"configuration/cluster_conf/gslb.data/#introduction","text":"gslb.data records the load balancing config between sub-clusters.","title":"Introduction"},{"location":"configuration/cluster_conf/gslb.data/#configuration","text":"Config Item Description Clusters Object cluster config Clusters{k} String cluster name Clusters{v} Object weight config for each sub-cluster Clusters{v}{k} String name of sub-cluster GSLB_BLACKHOLE is the name of blackhole sub-cluster which discards all incoming requests Clusters{v}{v} Integer weight of sub-cluster The weight should be [0, 100] and the weight sum of all sub-cluster should be 100 Hostname String Hostname of gslb scheduler Ts String Timestamp of config file","title":"Configuration"},{"location":"configuration/cluster_conf/gslb.data/#example","text":"{ \"Clusters\": { \"cluster_example\": { \"GSLB_BLACKHOLE\": 0, \"example.bfe.bj\": 100 } }, \"Hostname\": \"gslb-sch.example.com\", \"Ts\": \"20190101000000\" }","title":"Example"},{"location":"configuration/server_data_conf/cluster_conf.data/","text":"Cluster Configuration Introduction cluster_conf.data records the cluster config. Configuration Config Item Description Version String Version of config file Config Struct Map data, key is cluster name, value is cluster config detail Config[k] String Cluster name Config[v] Object Cluster's routing config Cluster Config Detail Notice: the following configs are in namespace Config[v]. Backend Config BackendConf is config for backend. Config Item Description Protocol String Protocol for connecting backend. http and fcgi are supported. Default value is http. TimeoutConnSrv Int Timeout for connecting backend, in ms. Default value is 2000. TimeoutResponseHeader Int Timeout for reading response header, in ms. Default value is 60000. MaxIdleConnsPerHost Int Max idle connections to each backend per BFE. Default value is 2. MaxConnsPerHost Int Max number of concurrent connections to each backend per BFE. 0 means no limitation. Default value is 0. RetryLevel Int Retry level if request fail. 0: retry after connecting backend fails; 1: retry after connecting backend fails or forwarding GET request fails. Default value is 0. BackendConf.OutlierDetectionHttpCode String Backend HTTP status code outlier detection. \"\" means disable detection, \"500\" means \"500\" is considered as backend failure. Supports two formats: \"[0-9]{3}\"(e.g \"500\"), and \"[0-9]xx\"(e.g \"4xx\"). Multiple status codes are seperated by \"|\". Default value is \"\", which means disable the detection. FCGIConf Object Conf for FastCGI Protocol FCGIConf.Root String The root folder of the website FCGIConf.EnvVars Map[string]string Extra environment variable Health Check Config CheckConf is config of backend check. Config Item Description Schem String Protocol for health check (HTTP/TCP). Default value is http. Uri String Uri used in health check (HTTP only). Default value is \"/health_check\". Host String Host used in health check (HTTP only). Default value is \"\". StatusCode Int Expected response code (HTTP only). Default value is 200. And 0 means any response code is considered valid. FailNum Int Failure threshold (consecutive failures of forwarded requests), which will trigger BFE to set the backend instance to unavailable state and start the health check. SuccNum Int Healthy threshold (consecutive successes of health check request), which will trigger BFE to set the backend instance to available state and stop the health check. CheckTimeout Int Timeout for health check, in ms. Default value is 0, which means no timeout. CheckInterval Int Interval of health check, in ms. Default value is 1000. GSLB Config GslbBasic is cluster config for Gslb. Config Item Description CrossRetry Int Max cross sub-clusters retry times. Default value is 0. RetryMax Int Max retry times within same sub-cluster. Default value is 2. BalanceMode String Load Balance Mode. Supported mode: WRR(Weighted Round Robin), WLC(Weighted Least Connection). Default value is WRR. HashConf Struct Hash config of session persistence HashConf.HashStrategy Int Hash Strategy of session persistence. Supported strategies: 0: ClientIdOnly, 1: ClientIpOnly, 2: ClientIdPreferred, 3: RequestURI. Default value is 1 (ClientIpOnly). HashConf.HashHeader String HashHeader is an optional request header which represents a unique client. Format for speicial cookie header is \"Cookie:Key\" HashConf.SessonSticky Boolean Set SessionSticky to \"true\" enable sticky session (ensures that all requests from the user during the session are sent to the same backend). If set to \"false\", the session persistence will be at sub-cluster level. Cluster Basic Config ClusterBasic is basic config for cluster. Config Item Description TimeoutReadClient Int Timeout for read client body in ms. Default value is 30000. TimeoutWriteClient Int Timeout for write response to client. Default value is 60000. TimeoutReadClientAgain Int Timeout for read client again in ms. Default value is 60000. ReqWriteBufferSize Int Write buffer size for request in byte. Default and recommended value is 512. ReqFlushInterval Int Interval to flush request in ms. Default and recommended value is 0, means disable periodic flush. ResFlushInterval Int Interval to flush response in ms. Default and recommended value is -1, means not to cache response. 0 means disable periodic flush. CancelOnClientClose Bool During reading response from backend, cancel the blocking status if client connection disconnected. Default and recommended value is false. Example { \"Version\": \"20190101000000\", \"Config\": { \"cluster_example\": { \"BackendConf\": { \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"MaxConnsPerHost\": 0, \"RetryLevel\": 0, \"OutlierDetectionHttpCode\": \"5xx|400\" }, \"CheckConf\": { \"Schem\": \"http\", \"Uri\": \"/healthcheck\", \"Host\": \"example.org\", \"StatusCode\": 200, \"FailNum\": 10, \"CheckInterval\": 1000 }, \"GslbBasic\": { \"CrossRetry\": 0, \"RetryMax\": 2, \"HashConf\": { \"HashStrategy\": 0, \"HashHeader\": \"Cookie:UID\", \"SessionSticky\": false } }, \"ClusterBasic\": { \"TimeoutReadClient\": 30000, \"TimeoutWriteClient\": 60000, \"TimeoutReadClientAgain\": 60000, \"ReqWriteBufferSize\": 512, \"ReqFlushInterval\": 0, \"ResFlushInterval\": -1, \"CancelOnClientClose\": false } }, \"fcgi_cluster_example\": { \"BackendConf\": { \"Protocol\": \"fcgi\", \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"RetryLevel\": 0, \"FCGIConf\": { \"Root\": \"/home/work\", \"EnvVars\": { \"VarKey\": \"VarVal\" } } }, \"CheckConf\": { \"Schem\": \"http\", \"Uri\": \"/healthcheck\", \"Host\": \"example.org\", \"StatusCode\": 200, \"FailNum\": 10, \"CheckInterval\": 1000 }, \"GslbBasic\": { \"CrossRetry\": 0, \"RetryMax\": 2, \"HashConf\": { \"HashStrategy\": 1, \"HashHeader\": \"Cookie:UID\", \"SessionSticky\": false } }, \"ClusterBasic\": { \"TimeoutReadClient\": 30000, \"TimeoutWriteClient\": 60000, \"TimeoutReadClientAgain\": 60000, \"ReqWriteBufferSize\": 512, \"ReqFlushInterval\": 0, \"ResFlushInterval\": -1, \"CancelOnClientClose\": false } } } }","title":"Backend cluster"},{"location":"configuration/server_data_conf/cluster_conf.data/#cluster-configuration","text":"","title":"Cluster Configuration"},{"location":"configuration/server_data_conf/cluster_conf.data/#introduction","text":"cluster_conf.data records the cluster config.","title":"Introduction"},{"location":"configuration/server_data_conf/cluster_conf.data/#configuration","text":"Config Item Description Version String Version of config file Config Struct Map data, key is cluster name, value is cluster config detail Config[k] String Cluster name Config[v] Object Cluster's routing config","title":"Configuration"},{"location":"configuration/server_data_conf/cluster_conf.data/#cluster-config-detail","text":"Notice: the following configs are in namespace Config[v].","title":"Cluster Config Detail"},{"location":"configuration/server_data_conf/cluster_conf.data/#backend-config","text":"BackendConf is config for backend. Config Item Description Protocol String Protocol for connecting backend. http and fcgi are supported. Default value is http. TimeoutConnSrv Int Timeout for connecting backend, in ms. Default value is 2000. TimeoutResponseHeader Int Timeout for reading response header, in ms. Default value is 60000. MaxIdleConnsPerHost Int Max idle connections to each backend per BFE. Default value is 2. MaxConnsPerHost Int Max number of concurrent connections to each backend per BFE. 0 means no limitation. Default value is 0. RetryLevel Int Retry level if request fail. 0: retry after connecting backend fails; 1: retry after connecting backend fails or forwarding GET request fails. Default value is 0. BackendConf.OutlierDetectionHttpCode String Backend HTTP status code outlier detection. \"\" means disable detection, \"500\" means \"500\" is considered as backend failure. Supports two formats: \"[0-9]{3}\"(e.g \"500\"), and \"[0-9]xx\"(e.g \"4xx\"). Multiple status codes are seperated by \"|\". Default value is \"\", which means disable the detection. FCGIConf Object Conf for FastCGI Protocol FCGIConf.Root String The root folder of the website FCGIConf.EnvVars Map[string]string Extra environment variable","title":"Backend Config"},{"location":"configuration/server_data_conf/cluster_conf.data/#health-check-config","text":"CheckConf is config of backend check. Config Item Description Schem String Protocol for health check (HTTP/TCP). Default value is http. Uri String Uri used in health check (HTTP only). Default value is \"/health_check\". Host String Host used in health check (HTTP only). Default value is \"\". StatusCode Int Expected response code (HTTP only). Default value is 200. And 0 means any response code is considered valid. FailNum Int Failure threshold (consecutive failures of forwarded requests), which will trigger BFE to set the backend instance to unavailable state and start the health check. SuccNum Int Healthy threshold (consecutive successes of health check request), which will trigger BFE to set the backend instance to available state and stop the health check. CheckTimeout Int Timeout for health check, in ms. Default value is 0, which means no timeout. CheckInterval Int Interval of health check, in ms. Default value is 1000.","title":"Health Check Config"},{"location":"configuration/server_data_conf/cluster_conf.data/#gslb-config","text":"GslbBasic is cluster config for Gslb. Config Item Description CrossRetry Int Max cross sub-clusters retry times. Default value is 0. RetryMax Int Max retry times within same sub-cluster. Default value is 2. BalanceMode String Load Balance Mode. Supported mode: WRR(Weighted Round Robin), WLC(Weighted Least Connection). Default value is WRR. HashConf Struct Hash config of session persistence HashConf.HashStrategy Int Hash Strategy of session persistence. Supported strategies: 0: ClientIdOnly, 1: ClientIpOnly, 2: ClientIdPreferred, 3: RequestURI. Default value is 1 (ClientIpOnly). HashConf.HashHeader String HashHeader is an optional request header which represents a unique client. Format for speicial cookie header is \"Cookie:Key\" HashConf.SessonSticky Boolean Set SessionSticky to \"true\" enable sticky session (ensures that all requests from the user during the session are sent to the same backend). If set to \"false\", the session persistence will be at sub-cluster level.","title":"GSLB Config"},{"location":"configuration/server_data_conf/cluster_conf.data/#cluster-basic-config","text":"ClusterBasic is basic config for cluster. Config Item Description TimeoutReadClient Int Timeout for read client body in ms. Default value is 30000. TimeoutWriteClient Int Timeout for write response to client. Default value is 60000. TimeoutReadClientAgain Int Timeout for read client again in ms. Default value is 60000. ReqWriteBufferSize Int Write buffer size for request in byte. Default and recommended value is 512. ReqFlushInterval Int Interval to flush request in ms. Default and recommended value is 0, means disable periodic flush. ResFlushInterval Int Interval to flush response in ms. Default and recommended value is -1, means not to cache response. 0 means disable periodic flush. CancelOnClientClose Bool During reading response from backend, cancel the blocking status if client connection disconnected. Default and recommended value is false.","title":"Cluster Basic Config"},{"location":"configuration/server_data_conf/cluster_conf.data/#example","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"cluster_example\": { \"BackendConf\": { \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"MaxConnsPerHost\": 0, \"RetryLevel\": 0, \"OutlierDetectionHttpCode\": \"5xx|400\" }, \"CheckConf\": { \"Schem\": \"http\", \"Uri\": \"/healthcheck\", \"Host\": \"example.org\", \"StatusCode\": 200, \"FailNum\": 10, \"CheckInterval\": 1000 }, \"GslbBasic\": { \"CrossRetry\": 0, \"RetryMax\": 2, \"HashConf\": { \"HashStrategy\": 0, \"HashHeader\": \"Cookie:UID\", \"SessionSticky\": false } }, \"ClusterBasic\": { \"TimeoutReadClient\": 30000, \"TimeoutWriteClient\": 60000, \"TimeoutReadClientAgain\": 60000, \"ReqWriteBufferSize\": 512, \"ReqFlushInterval\": 0, \"ResFlushInterval\": -1, \"CancelOnClientClose\": false } }, \"fcgi_cluster_example\": { \"BackendConf\": { \"Protocol\": \"fcgi\", \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"RetryLevel\": 0, \"FCGIConf\": { \"Root\": \"/home/work\", \"EnvVars\": { \"VarKey\": \"VarVal\" } } }, \"CheckConf\": { \"Schem\": \"http\", \"Uri\": \"/healthcheck\", \"Host\": \"example.org\", \"StatusCode\": 200, \"FailNum\": 10, \"CheckInterval\": 1000 }, \"GslbBasic\": { \"CrossRetry\": 0, \"RetryMax\": 2, \"HashConf\": { \"HashStrategy\": 1, \"HashHeader\": \"Cookie:UID\", \"SessionSticky\": false } }, \"ClusterBasic\": { \"TimeoutReadClient\": 30000, \"TimeoutWriteClient\": 60000, \"TimeoutReadClientAgain\": 60000, \"ReqWriteBufferSize\": 512, \"ReqFlushInterval\": 0, \"ResFlushInterval\": -1, \"CancelOnClientClose\": false } } } }","title":"Example"},{"location":"configuration/server_data_conf/host_rule.data/","text":"Host Rule Configuration Introduction host_rule.data records the domain names for each product. Configuration Config Item Description Version String Verson of config file DefaultProduct String Default product name. Hosts Struct Host list for each HostTag Hosts{k} Struct HostTag Hosts{v} String Host list for HostTag HostTags Struct HostTag list for each product HostTags{k} Struct Product name HostTags{v} Struct HostTag list for product Example { \"Version\": \"20190101000000\", \"DefaultProduct\": null, \"Hosts\": { \"exampleTag\":[ \"example.org\" ] }, \"HostTags\": { \"example_product\":[ \"exampleTag\" ] } }","title":"Host rule"},{"location":"configuration/server_data_conf/host_rule.data/#host-rule-configuration","text":"","title":"Host Rule Configuration"},{"location":"configuration/server_data_conf/host_rule.data/#introduction","text":"host_rule.data records the domain names for each product.","title":"Introduction"},{"location":"configuration/server_data_conf/host_rule.data/#configuration","text":"Config Item Description Version String Verson of config file DefaultProduct String Default product name. Hosts Struct Host list for each HostTag Hosts{k} Struct HostTag Hosts{v} String Host list for HostTag HostTags Struct HostTag list for each product HostTags{k} Struct Product name HostTags{v} Struct HostTag list for product","title":"Configuration"},{"location":"configuration/server_data_conf/host_rule.data/#example","text":"{ \"Version\": \"20190101000000\", \"DefaultProduct\": null, \"Hosts\": { \"exampleTag\":[ \"example.org\" ] }, \"HostTags\": { \"example_product\":[ \"exampleTag\" ] } }","title":"Example"},{"location":"configuration/server_data_conf/name_conf.data/","text":"Naming Configurationn Introduction name_conf.data records the mapping between service name and service instances. Configuration Config Item Description Version String Version of config file Config Struct Mapping between service name and instances Config{k} String Service name Config{v} Struct A list of instances Config{v}[].Host String Instance address Config{v}[].Port Integer Instance port Config{v}[].Weight Integer Instance weight Example { \"Version\": \"20190101000000\", \"Config\": { \"example.redis.cluster\": [ { \"Host\": \"192.168.1.1\", \"Port\": 6439, \"Weight\": 10 } ] } }","title":"Naming"},{"location":"configuration/server_data_conf/name_conf.data/#naming-configurationn","text":"","title":"Naming Configurationn"},{"location":"configuration/server_data_conf/name_conf.data/#introduction","text":"name_conf.data records the mapping between service name and service instances.","title":"Introduction"},{"location":"configuration/server_data_conf/name_conf.data/#configuration","text":"Config Item Description Version String Version of config file Config Struct Mapping between service name and instances Config{k} String Service name Config{v} Struct A list of instances Config{v}[].Host String Instance address Config{v}[].Port Integer Instance port Config{v}[].Weight Integer Instance weight","title":"Configuration"},{"location":"configuration/server_data_conf/name_conf.data/#example","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example.redis.cluster\": [ { \"Host\": \"192.168.1.1\", \"Port\": 6439, \"Weight\": 10 } ] } }","title":"Example"},{"location":"configuration/server_data_conf/route_rule.data/","text":"Route Rule Configuration Introduction route_rule.data records route rule config for each product. Configuration Config Item Description Version String Time of generating config file ProductRule Struct Route rules for each product ProductRule{k} String Product name ProductRule{v} Struct A ordered list of route rules ProductRule{v}[].Cond String Condition expression ProductRule{v}[].ClusterName String Destination cluster name Example { \"Version\": \"20190101000000\", \"ProductRule\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"ClusterName\": \"cluster_example1\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"cluster_example2\" } ] } }","title":"Route rule"},{"location":"configuration/server_data_conf/route_rule.data/#route-rule-configuration","text":"","title":"Route Rule Configuration"},{"location":"configuration/server_data_conf/route_rule.data/#introduction","text":"route_rule.data records route rule config for each product.","title":"Introduction"},{"location":"configuration/server_data_conf/route_rule.data/#configuration","text":"Config Item Description Version String Time of generating config file ProductRule Struct Route rules for each product ProductRule{k} String Product name ProductRule{v} Struct A ordered list of route rules ProductRule{v}[].Cond String Condition expression ProductRule{v}[].ClusterName String Destination cluster name","title":"Configuration"},{"location":"configuration/server_data_conf/route_rule.data/#example","text":"{ \"Version\": \"20190101000000\", \"ProductRule\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"ClusterName\": \"cluster_example1\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"cluster_example2\" } ] } }","title":"Example"},{"location":"configuration/server_data_conf/vip_rule.data/","text":"VIP Rule Configuration Introduction vip_rule.data records vip lists for each product. Configuration Config Item Description Version String Version of config file Vips Struct Vip list for each product Vips{k} String Product name Vips{v} Struct Vip list for product Example { \"Version\": \"20190101000000\", \"Vips\": { \"example_product\": [ \"111.111.111.111\" ] } }","title":"VIP rule"},{"location":"configuration/server_data_conf/vip_rule.data/#vip-rule-configuration","text":"","title":"VIP Rule Configuration"},{"location":"configuration/server_data_conf/vip_rule.data/#introduction","text":"vip_rule.data records vip lists for each product.","title":"Introduction"},{"location":"configuration/server_data_conf/vip_rule.data/#configuration","text":"Config Item Description Version String Version of config file Vips Struct Vip list for each product Vips{k} String Product name Vips{v} Struct Vip list for product","title":"Configuration"},{"location":"configuration/server_data_conf/vip_rule.data/#example","text":"{ \"Version\": \"20190101000000\", \"Vips\": { \"example_product\": [ \"111.111.111.111\" ] } }","title":"Example"},{"location":"configuration/tls_conf/server_cert_conf.data/","text":"Configuration about Server Certificates Introduction server_cert_conf.data records the config for server certificate and private key Configuration Config Item Description Version String Version of configure file Config Object Server certificate configuration information Config.Default String Name of default cert - Default cert must be configured - Default cert must be included in cert list {CertConf} Config.CertConf Object Cert list Config.CertConf{k} String Name of cert - Cert name can not be \"BFE_DEFAULT_CERT\" Config.CertConf{v} Object Cert related file path Config.CertConf{v}.ServerCertFile String Path of server certificate Config.CertConf{v}.ServerKeyFile String Path of private key Config.CertConf{v}.OcspResponseFile String Path of OCSP Stple (optional) Example { \"Version\": \"20190101000000\", \"Config\": { \"Default\": \"example.org\", \"CertConf\": { \"example.org\": { \"ServerCertFile\": \"tls_conf/certs/server.crt\", \"ServerKeyFile\" : \"tls_conf/certs/server.key\" } } } }","title":"Certificate"},{"location":"configuration/tls_conf/server_cert_conf.data/#configuration-about-server-certificates","text":"","title":"Configuration about Server Certificates"},{"location":"configuration/tls_conf/server_cert_conf.data/#introduction","text":"server_cert_conf.data records the config for server certificate and private key","title":"Introduction"},{"location":"configuration/tls_conf/server_cert_conf.data/#configuration","text":"Config Item Description Version String Version of configure file Config Object Server certificate configuration information Config.Default String Name of default cert - Default cert must be configured - Default cert must be included in cert list {CertConf} Config.CertConf Object Cert list Config.CertConf{k} String Name of cert - Cert name can not be \"BFE_DEFAULT_CERT\" Config.CertConf{v} Object Cert related file path Config.CertConf{v}.ServerCertFile String Path of server certificate Config.CertConf{v}.ServerKeyFile String Path of private key Config.CertConf{v}.OcspResponseFile String Path of OCSP Stple (optional)","title":"Configuration"},{"location":"configuration/tls_conf/server_cert_conf.data/#example","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"Default\": \"example.org\", \"CertConf\": { \"example.org\": { \"ServerCertFile\": \"tls_conf/certs/server.crt\", \"ServerKeyFile\" : \"tls_conf/certs/server.key\" } } } }","title":"Example"},{"location":"configuration/tls_conf/session_ticket_key.data/","text":"Configuration about TLS Session Ticket Key Introduction session_ticket_key.data records the session ticket key. Configuration Config Item Description Version String Version of config file SessionTicketKey String The session ticket key. length is 48 and contains only [a-z0-9] Example { \"Version\": \"20190101000000\", \"SessionTicketKey\": \"08a0d852ef494143af613ef32d3c39314758885f7108e9ab021d55f422a454f7c9cd5a53978f48fa1063eadcdc06878f\" }","title":"Session ticket key"},{"location":"configuration/tls_conf/session_ticket_key.data/#configuration-about-tls-session-ticket-key","text":"","title":"Configuration about TLS Session Ticket Key"},{"location":"configuration/tls_conf/session_ticket_key.data/#introduction","text":"session_ticket_key.data records the session ticket key.","title":"Introduction"},{"location":"configuration/tls_conf/session_ticket_key.data/#configuration","text":"Config Item Description Version String Version of config file SessionTicketKey String The session ticket key. length is 48 and contains only [a-z0-9]","title":"Configuration"},{"location":"configuration/tls_conf/session_ticket_key.data/#example","text":"{ \"Version\": \"20190101000000\", \"SessionTicketKey\": \"08a0d852ef494143af613ef32d3c39314758885f7108e9ab021d55f422a454f7c9cd5a53978f48fa1063eadcdc06878f\" }","title":"Example"},{"location":"configuration/tls_conf/tls_rule_conf.data/","text":"Configration about TLS Introduction tls_rule_conf.data records the tls protocol config Configuration Config Item Description Version String Version of configure file Config Object TLS rule config. Config{k} String Unique label Config{v} Object TLS rule detail Config{v}.CertName String Name of server certificate (Note: defined in server_cert_conf.data) Config{v}.NextProtos Object TLS application layer protocol list Default [\"http/1.1\"] Config{v}.NextProtos[] String TLS application layer protocol (h2, spdy/3.1, http/1.1) Config{v}.Grade String TLS Security grade ( A+, A, B, C) Config{v}.ClientAuth Bool Enable TLS Client Authentication Config{v}.ClientCAName String Name of Client CA certificate Config{v}.VipConf Object Array List of VIPs Note: TLS policy selection is based on VIP Config{v}.VipConf[] String Array VIP Config{v}.SniConf Object Array List of hostnames (optional) Config{v}.SniConf[] String Array Hostname DefaultNextProtos Object Default application layer protocols over TLS DefaultNextProtos[] String TLS application layer protocol (h2, spdy/3.1, http/1.1) Example { \"Version\": \"20190101000000\", \"DefaultNextProtos\": [\"h2\", \"http/1.1\"], \"Config\": { \"example_product\": { \"VipConf\": [ \"10.199.4.14\" ], \"SniConf\": null, \"CertName\": \"example.org\", \"NextProtos\": [ \"h2\", \"http/1.1\" ], \"Grade\": \"C\", \"ClientCAName\": \"\" } } } Security Grade BFE supports multiple security grades(A+/A/B/C) for ease of TLS configuration. Security grades vary depending on the protocols and the cipher suites supported. Grade A+ Supported Protocols Supported Cipher Suites TLS1.2 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA Grade A Supported Protocols Supported Cipher Suites TLS1.2 TLS1.1 TLS1.0 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA Grade B Supported Protocols Supported Cipher Suites TLS1.2 TLS1.1 TLS1.0 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA SSLv3 TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA Grade C Supported Protocols Supported Cipher Suites TLS1.2 TLS1.1 TLS1.0 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA SSLv3 TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA","title":"SSL/TLS"},{"location":"configuration/tls_conf/tls_rule_conf.data/#configration-about-tls","text":"","title":"Configration about TLS"},{"location":"configuration/tls_conf/tls_rule_conf.data/#introduction","text":"tls_rule_conf.data records the tls protocol config","title":"Introduction"},{"location":"configuration/tls_conf/tls_rule_conf.data/#configuration","text":"Config Item Description Version String Version of configure file Config Object TLS rule config. Config{k} String Unique label Config{v} Object TLS rule detail Config{v}.CertName String Name of server certificate (Note: defined in server_cert_conf.data) Config{v}.NextProtos Object TLS application layer protocol list Default [\"http/1.1\"] Config{v}.NextProtos[] String TLS application layer protocol (h2, spdy/3.1, http/1.1) Config{v}.Grade String TLS Security grade ( A+, A, B, C) Config{v}.ClientAuth Bool Enable TLS Client Authentication Config{v}.ClientCAName String Name of Client CA certificate Config{v}.VipConf Object Array List of VIPs Note: TLS policy selection is based on VIP Config{v}.VipConf[] String Array VIP Config{v}.SniConf Object Array List of hostnames (optional) Config{v}.SniConf[] String Array Hostname DefaultNextProtos Object Default application layer protocols over TLS DefaultNextProtos[] String TLS application layer protocol (h2, spdy/3.1, http/1.1)","title":"Configuration"},{"location":"configuration/tls_conf/tls_rule_conf.data/#example","text":"{ \"Version\": \"20190101000000\", \"DefaultNextProtos\": [\"h2\", \"http/1.1\"], \"Config\": { \"example_product\": { \"VipConf\": [ \"10.199.4.14\" ], \"SniConf\": null, \"CertName\": \"example.org\", \"NextProtos\": [ \"h2\", \"http/1.1\" ], \"Grade\": \"C\", \"ClientCAName\": \"\" } } }","title":"Example"},{"location":"configuration/tls_conf/tls_rule_conf.data/#security-grade","text":"BFE supports multiple security grades(A+/A/B/C) for ease of TLS configuration. Security grades vary depending on the protocols and the cipher suites supported.","title":"Security Grade"},{"location":"configuration/tls_conf/tls_rule_conf.data/#grade-a","text":"Supported Protocols Supported Cipher Suites TLS1.2 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA","title":"Grade A+"},{"location":"configuration/tls_conf/tls_rule_conf.data/#grade-a_1","text":"Supported Protocols Supported Cipher Suites TLS1.2 TLS1.1 TLS1.0 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA","title":"Grade A"},{"location":"configuration/tls_conf/tls_rule_conf.data/#grade-b","text":"Supported Protocols Supported Cipher Suites TLS1.2 TLS1.1 TLS1.0 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA SSLv3 TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA","title":"Grade B"},{"location":"configuration/tls_conf/tls_rule_conf.data/#grade-c","text":"Supported Protocols Supported Cipher Suites TLS1.2 TLS1.1 TLS1.0 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_OLD_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA SSLv3 TLS_ECDHE_RSA_WITH_RC4_128_SHA TLS_RSA_WITH_RC4_128_SHA","title":"Grade C"},{"location":"development/local_dev_guide/","text":"Guide of local development You will learn how to develop BFE in local environment under the guidelines of this document. Requirements of coding Please refer to the coding format of golang Unit test is needed for all codes. Pass through all unit tests. Please follow regulations of submmiting codes The following guidiance tells you how to submit code. Fork Transfer to the home page of Github BFE ,and then click button Fork to generate the git under your own file directory,such as https://github.com/USERNAME/bfe Clone Clone remote git to local: $ git clone https://github.com/USERNAME/bfe $ cd bfe Create local branch At present Git stream branch model is applied to BFE to undergo task of development,test,release and maintenance.Please refer to branch regulation of BFE about details\u3002 All development tasks of feature and bug fix should be finished in a new branch which is extended from develop branch. Create and switch to a new branch with command git checkout -b . $ git checkout -b my-cool-stuff It is worth noting that before the checkout, you need to keep the current branch directory clean, otherwise the untracked file will be brought to the new branch, which can be viewed by git status . Install dependent tools make deps install all the dependent tools, include pre-commit goyacc license-eye staticcheck . Use pre-commit hook BFE developers use the pre-commit tool to manage Git pre-commit hooks. It helps us format the source code and automatically check some basic things before committing (such as having only one EOL per file, not adding large files in Git, etc.). The pre-commit test is part of the unit test in Travis-CI. A PR that does not satisfy the hook cannot be submitted to BFE. Install pre-commit first and then run it in current directory\uff1a # ensure installed pre-commit $ make deps # enable autoupdate and install hooks $ make precommit BFE modify the format of golang source code with gofmt . Use license-eye tool license-eye helps us check and fix file's license header declaration. All files' license header should be done before committing. The license-eye check is part of the Github-Action. A PR that check failed cannot be submitted to BFE. Install license-eye and do check or fix: # ensure installed license-eye $ make deps # check the license header $ make license-check # fix the license header $ make license-fix Start development I delete a line of README.md and create a new file in the case. View the current state via git status , which will prompt some changes to the current directory, and you can also view the file's specific changes via git diff . $ git status On branch test Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: README.md Untracked files: (use \"git add <file>...\" to include in what will be committed) test no changes added to commit (use \"git add\" and/or \"git commit -a\") Build and test Please refer to Build and Run about construction and test. Commit Next we cancel the modification of README.md,and submit new added test file. $ git checkout -- README.md $ git status On branch test Untracked files: (use \"git add <file>...\" to include in what will be committed) test nothing added to commit but untracked files present (use \"git add\" to track) $ git add test It's required that the commit message is also given on every Git commit, through which other developers will be notified of what changes have been made. Type git commit to realize it. $ git commit CRLF end-lines remover...............................(no files to check)Skipped yapf.................................................(no files to check)Skipped Check for added large files..............................................Passed Check for merge conflicts................................................Passed Check for broken symlinks................................................Passed Detect Private Key...................................(no files to check)Skipped Fix End of Files.....................................(no files to check)Skipped clang-formatter.......................................(no files to check)Skipped [my-cool-stuff c703c041] add test file 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 233 Attention needs to be paid\uff1ayou need to add commit message to trigger CI test.The command is as follows: # Touch CI single test of develop branch $ git commit -m \"test=develop\" # Touch CI single test of release/1.1 branch $ git commit -m \"test=release/1.1\" Keep the latest local repository It needs to keep up with the latest code of original repository( https://github.com/bfenetworks/bfe \uff09before Pull Request. Check the name of current remote repository with git remote . $ git remote origin $ git remote -v origin https://github.com/USERNAME/bfe (fetch) origin https://github.com/USERNAME/bfe (push) origin is the name of remote repository that we clone, which is also the BFE under your own account. Next we create a remote host of an original BFE and name it upstream. $ git remote add upstream https://github.com/bfenetworks/bfe $ git remote origin upstream Get the latest code of upstream and update current branch. $ git fetch upstream $ git pull upstream develop Push to remote repository Push local modification to GitHub(https://github.com/USERNAME/bfe). # submit it to remote git the branch my-cool-stuff of origin $ git push origin my-cool-stuff","title":"Local development"},{"location":"development/local_dev_guide/#guide-of-local-development","text":"You will learn how to develop BFE in local environment under the guidelines of this document.","title":"Guide of local development"},{"location":"development/local_dev_guide/#requirements-of-coding","text":"Please refer to the coding format of golang Unit test is needed for all codes. Pass through all unit tests. Please follow regulations of submmiting codes The following guidiance tells you how to submit code.","title":"Requirements of coding"},{"location":"development/local_dev_guide/#fork","text":"Transfer to the home page of Github BFE ,and then click button Fork to generate the git under your own file directory,such as https://github.com/USERNAME/bfe","title":"Fork"},{"location":"development/local_dev_guide/#clone","text":"Clone remote git to local: $ git clone https://github.com/USERNAME/bfe $ cd bfe","title":"Clone"},{"location":"development/local_dev_guide/#create-local-branch","text":"At present Git stream branch model is applied to BFE to undergo task of development,test,release and maintenance.Please refer to branch regulation of BFE about details\u3002 All development tasks of feature and bug fix should be finished in a new branch which is extended from develop branch. Create and switch to a new branch with command git checkout -b . $ git checkout -b my-cool-stuff It is worth noting that before the checkout, you need to keep the current branch directory clean, otherwise the untracked file will be brought to the new branch, which can be viewed by git status .","title":"Create local branch"},{"location":"development/local_dev_guide/#install-dependent-tools","text":"make deps install all the dependent tools, include pre-commit goyacc license-eye staticcheck .","title":"Install dependent tools"},{"location":"development/local_dev_guide/#use-pre-commit-hook","text":"BFE developers use the pre-commit tool to manage Git pre-commit hooks. It helps us format the source code and automatically check some basic things before committing (such as having only one EOL per file, not adding large files in Git, etc.). The pre-commit test is part of the unit test in Travis-CI. A PR that does not satisfy the hook cannot be submitted to BFE. Install pre-commit first and then run it in current directory\uff1a # ensure installed pre-commit $ make deps # enable autoupdate and install hooks $ make precommit BFE modify the format of golang source code with gofmt .","title":"Use pre-commit hook"},{"location":"development/local_dev_guide/#use-license-eye-tool","text":"license-eye helps us check and fix file's license header declaration. All files' license header should be done before committing. The license-eye check is part of the Github-Action. A PR that check failed cannot be submitted to BFE. Install license-eye and do check or fix: # ensure installed license-eye $ make deps # check the license header $ make license-check # fix the license header $ make license-fix","title":"Use license-eye tool"},{"location":"development/local_dev_guide/#start-development","text":"I delete a line of README.md and create a new file in the case. View the current state via git status , which will prompt some changes to the current directory, and you can also view the file's specific changes via git diff . $ git status On branch test Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: README.md Untracked files: (use \"git add <file>...\" to include in what will be committed) test no changes added to commit (use \"git add\" and/or \"git commit -a\")","title":"Start development"},{"location":"development/local_dev_guide/#build-and-test","text":"Please refer to Build and Run about construction and test.","title":"Build and test"},{"location":"development/local_dev_guide/#commit","text":"Next we cancel the modification of README.md,and submit new added test file. $ git checkout -- README.md $ git status On branch test Untracked files: (use \"git add <file>...\" to include in what will be committed) test nothing added to commit but untracked files present (use \"git add\" to track) $ git add test It's required that the commit message is also given on every Git commit, through which other developers will be notified of what changes have been made. Type git commit to realize it. $ git commit CRLF end-lines remover...............................(no files to check)Skipped yapf.................................................(no files to check)Skipped Check for added large files..............................................Passed Check for merge conflicts................................................Passed Check for broken symlinks................................................Passed Detect Private Key...................................(no files to check)Skipped Fix End of Files.....................................(no files to check)Skipped clang-formatter.......................................(no files to check)Skipped [my-cool-stuff c703c041] add test file 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 233 Attention needs to be paid\uff1ayou need to add commit message to trigger CI test.The command is as follows: # Touch CI single test of develop branch $ git commit -m \"test=develop\" # Touch CI single test of release/1.1 branch $ git commit -m \"test=release/1.1\"","title":"Commit"},{"location":"development/local_dev_guide/#keep-the-latest-local-repository","text":"It needs to keep up with the latest code of original repository( https://github.com/bfenetworks/bfe \uff09before Pull Request. Check the name of current remote repository with git remote . $ git remote origin $ git remote -v origin https://github.com/USERNAME/bfe (fetch) origin https://github.com/USERNAME/bfe (push) origin is the name of remote repository that we clone, which is also the BFE under your own account. Next we create a remote host of an original BFE and name it upstream. $ git remote add upstream https://github.com/bfenetworks/bfe $ git remote origin upstream Get the latest code of upstream and update current branch. $ git fetch upstream $ git pull upstream develop","title":"Keep the latest local repository"},{"location":"development/local_dev_guide/#push-to-remote-repository","text":"Push local modification to GitHub(https://github.com/USERNAME/bfe). # submit it to remote git the branch my-cool-stuff of origin $ git push origin my-cool-stuff","title":"Push to remote repository"},{"location":"development/release_regulation/","text":"BFE Release Regulation BFE development follows git-flow branching model and Semantic Versioning . Branch Regulation BFE development follows git-flow , but makes some minor differences for github. For the official bfe repository, developers should follow git-flow . 'master' branch is the stable branch. Latest commit of the 'master' branch is unit-tested and regression-tested. 'develop' branch is the development branch. Every commit of the 'develop' branch is unit-tested, but not regression-tested. 'release/vX.Y.Z' branch is the temporary branch created for release. The code on this branch is undergoing regression testing. For the forked bfe repository, developers don't need to strictly abide the git-flow(http://nvie.com/posts/a-successful-git-branching-model/). Each branch of the forked repository is equivalent to feature branch. Specific Suggestions are as follows: Developers synchronize 'develop' branches of the forked repository with that of the official repository. Developers create 'feature' branch from 'develop' branch of the forked repository. After completion of 'feature' branch development, developers submit 'Pull Request' to the official repository for code review. During the review process, developers may continue to modify and submit code in their feature branches. In addition, the 'bugfix' branch is also maintained in the developer's forked repository. Different from the feature branch, developers should submit 'Pull Request' from the 'bugfix' branch to 'master', 'develop' and possibly 'release/vX.Y.Z' branches of the official repository respectively. Release Regulation Follow the following procedures to release a new version: Create a new branch from the 'develop' branch with the name 'release/vX.Y.Z'. For example, release/v0.10.0 Tag the version of the new branch with 'X.Y.Z-rc.N' (N is patch number). The first tag is'0.10.0-rc.1', the second tag is '0.10.0-rc.2', and so on. For the submission of this version, do the following: Modify version information in 'VERSION' file. Test the functional correctness of the version. If it fails, fixing all the bugs in the 'release/vX.Y.Z' branch, and return to the second step with patch number added by 1. Complete the writing of Release Note . Merge the 'release/vX.Y.Z' branch into the master branch, and delete the 'release/vX.Y.Z' branch. Merge 'master' branches into the 'develop' branch. Tag the latest commit of the master branch with 'vX.Y.Z' Note: Once a release branch has been created, it is generally not allowed to merge 'release/vX.Y.Z' from the 'develop' branch. This ensures that the 'release/vX.Y.Z' branch is frozen, making it easy for QA to test. When the 'release/vX.Y.Z' branch exists, merge the 'bugfix' branch into the 'master', 'develop' and 'release/vX.Y.Z' branches at the same time, if there are bugfix behaviors.","title":"Releasing process"},{"location":"development/release_regulation/#bfe-release-regulation","text":"BFE development follows git-flow branching model and Semantic Versioning .","title":"BFE Release Regulation"},{"location":"development/release_regulation/#branch-regulation","text":"BFE development follows git-flow , but makes some minor differences for github. For the official bfe repository, developers should follow git-flow . 'master' branch is the stable branch. Latest commit of the 'master' branch is unit-tested and regression-tested. 'develop' branch is the development branch. Every commit of the 'develop' branch is unit-tested, but not regression-tested. 'release/vX.Y.Z' branch is the temporary branch created for release. The code on this branch is undergoing regression testing. For the forked bfe repository, developers don't need to strictly abide the git-flow(http://nvie.com/posts/a-successful-git-branching-model/). Each branch of the forked repository is equivalent to feature branch. Specific Suggestions are as follows: Developers synchronize 'develop' branches of the forked repository with that of the official repository. Developers create 'feature' branch from 'develop' branch of the forked repository. After completion of 'feature' branch development, developers submit 'Pull Request' to the official repository for code review. During the review process, developers may continue to modify and submit code in their feature branches. In addition, the 'bugfix' branch is also maintained in the developer's forked repository. Different from the feature branch, developers should submit 'Pull Request' from the 'bugfix' branch to 'master', 'develop' and possibly 'release/vX.Y.Z' branches of the official repository respectively.","title":"Branch Regulation"},{"location":"development/release_regulation/#release-regulation","text":"Follow the following procedures to release a new version: Create a new branch from the 'develop' branch with the name 'release/vX.Y.Z'. For example, release/v0.10.0 Tag the version of the new branch with 'X.Y.Z-rc.N' (N is patch number). The first tag is'0.10.0-rc.1', the second tag is '0.10.0-rc.2', and so on. For the submission of this version, do the following: Modify version information in 'VERSION' file. Test the functional correctness of the version. If it fails, fixing all the bugs in the 'release/vX.Y.Z' branch, and return to the second step with patch number added by 1. Complete the writing of Release Note . Merge the 'release/vX.Y.Z' branch into the master branch, and delete the 'release/vX.Y.Z' branch. Merge 'master' branches into the 'develop' branch. Tag the latest commit of the master branch with 'vX.Y.Z' Note: Once a release branch has been created, it is generally not allowed to merge 'release/vX.Y.Z' from the 'develop' branch. This ensures that the 'release/vX.Y.Z' branch is frozen, making it easy for QA to test. When the 'release/vX.Y.Z' branch exists, merge the 'bugfix' branch into the 'master', 'develop' and 'release/vX.Y.Z' branches at the same time, if there are bugfix behaviors.","title":"Release Regulation"},{"location":"development/source_code_layout/","text":"BFE Source Code Directory Structure Protocol bfe_net : common utility for net bfe_http : implementation of HTTP protocol bfe_tls : implementation of TLS protocol bfe_http2 : implementation of HTTP2 protocol bfe_spdy : implementation of SPDY protocol bfe_stream : implementation of TLS/TCP proxy bfe_websocket : implementation WebSocket protocol bfe_proxy : implementation of Proxy protocol Routing and Balancing bfe_route : implementation of routing bfe_balance : implementation of load balancing Modules bfe_module : module framework bfe_modules : implementation of various modules Server bfe_server : implementation of core server Utils bfe_basic : defines basic data type bfe_config : implementation of config bfe_debug : defines debug flags for important components bfe_util : common utility functions","title":"Source code layout"},{"location":"development/source_code_layout/#bfe-source-code-directory-structure","text":"","title":"BFE Source Code Directory Structure"},{"location":"development/source_code_layout/#protocol","text":"bfe_net : common utility for net bfe_http : implementation of HTTP protocol bfe_tls : implementation of TLS protocol bfe_http2 : implementation of HTTP2 protocol bfe_spdy : implementation of SPDY protocol bfe_stream : implementation of TLS/TCP proxy bfe_websocket : implementation WebSocket protocol bfe_proxy : implementation of Proxy protocol","title":"Protocol"},{"location":"development/source_code_layout/#routing-and-balancing","text":"bfe_route : implementation of routing bfe_balance : implementation of load balancing","title":"Routing and Balancing"},{"location":"development/source_code_layout/#modules","text":"bfe_module : module framework bfe_modules : implementation of various modules","title":"Modules"},{"location":"development/source_code_layout/#server","text":"bfe_server : implementation of core server","title":"Server"},{"location":"development/source_code_layout/#utils","text":"bfe_basic : defines basic data type bfe_config : implementation of config bfe_debug : defines debug flags for important components bfe_util : common utility functions","title":"Utils"},{"location":"development/submit_pr_guide/","text":"Guide of submitting PR to Github Create an Issue and finish Pull Request Create an Issue to describe your problem and keep its number. Switch to the branch you have created and click New pull request . Switch to targeted branch. A note of resolve #Issue number in PR description results in automatic close of corresponding Issue after the merge of PR. More details can be viewed here . Then please wait for review. If there is any need to make a modification, you can update corresponding branch in origin following the steps above. Pass unit tests Every new commit in your Pull Request will trigger CI unit tests, so please make sure that necessary comments have been included in your commit message. Please refer to commit Please note the procedure of CI unit tests in your Pull Request which will be finished in several hours. You only need to focus on CI projects associated with your submitted branch. For example, there is no need to check whether release/1.1 pass test or not if you submit code to develop branch. Green ticks after all tests means that your commit has passed all unit tests. Red cross after the tests means your commit hasn't passed certain unit test. Please click detail to view bug details and make a screenshot of bug, then add it as a comment in your Pull Request. Our stuff will help you check it. Delete remote branch We can delete branches of remote repository in PR page after your PR is successfully merged into master repository. We can also delete the branch of remote repository with git push origin :the_branch_name , such as: $ git push origin :my-cool-stuff Delete local branch Finally,we delete local branch $ git checkout develop # switch to develop branch $ git branch -D my-cool-stuff # delete my-cool-stuff branch And now we finish a full process of code contribution Certain regulations about submitting code In order that reviewers focus on code in the code review, please follow these rules every time you submit your code: 1\uff09Make sure that unit tests in Travis-CI pass through successfully.If it fails,it means problems have been found in submitted code which will not be reviewed by reviewer. 2\uff09Before the submit of PUll Request: Please note the number of commit: Reason\uff1aIt will bother reviewers a lot if a dozen of commits are submitted after modification of only one file and only a few modifications are updated in every commit. Reviewers have to check commit one by one to figure out the modification. And sometimes it needs to take the overlap among commits into consideration. Suggestion\uff1aKeep commit concise as much as possible at every submit. You can make a supplyment to the previous commit with git commit --amend . About several commits having been pushed to remote repository, you can refer to squash commits after push \u3002 Pay attention to the name of every commit: It would be better to abstract the content of present commit and be not too arbitrary. 3\uff09If you have tackled with problems of an Issue, please add fix #issue_number to the first comment area of PULL Request.Then the corresponding Issue will be closed automatically after the merge of PULL Request. Keywords are including:close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved. Please select appropriate word. Please refer to Closing issues via commit messages for more details. In addition, please follow the following regulations in response to the suggestion of reviewers: 1\uff09A reply to every comment of reviewers\uff08It's a fundamental complimentary conduct in open source community.An expression of appreciation is a need for help from others): If you adopt the suggestion of reviewer and make a modification accordingly, it's courteous to reply with a simple Done . Please clarify your reason to the disagreenment 2\uff09If there are many suggestions Please show general modification Please follow start a review to give your reply,instead of directly replying for that every comment will result in sending an email causing email disaster.","title":"Sumbit PR"},{"location":"development/submit_pr_guide/#guide-of-submitting-pr-to-github","text":"","title":"Guide of submitting PR to Github"},{"location":"development/submit_pr_guide/#create-an-issue-and-finish-pull-request","text":"Create an Issue to describe your problem and keep its number. Switch to the branch you have created and click New pull request . Switch to targeted branch. A note of resolve #Issue number in PR description results in automatic close of corresponding Issue after the merge of PR. More details can be viewed here . Then please wait for review. If there is any need to make a modification, you can update corresponding branch in origin following the steps above.","title":"Create an Issue and finish Pull Request"},{"location":"development/submit_pr_guide/#pass-unit-tests","text":"Every new commit in your Pull Request will trigger CI unit tests, so please make sure that necessary comments have been included in your commit message. Please refer to commit Please note the procedure of CI unit tests in your Pull Request which will be finished in several hours. You only need to focus on CI projects associated with your submitted branch. For example, there is no need to check whether release/1.1 pass test or not if you submit code to develop branch. Green ticks after all tests means that your commit has passed all unit tests. Red cross after the tests means your commit hasn't passed certain unit test. Please click detail to view bug details and make a screenshot of bug, then add it as a comment in your Pull Request. Our stuff will help you check it.","title":"Pass unit tests"},{"location":"development/submit_pr_guide/#delete-remote-branch","text":"We can delete branches of remote repository in PR page after your PR is successfully merged into master repository. We can also delete the branch of remote repository with git push origin :the_branch_name , such as: $ git push origin :my-cool-stuff","title":"Delete remote branch"},{"location":"development/submit_pr_guide/#delete-local-branch","text":"Finally,we delete local branch $ git checkout develop # switch to develop branch $ git branch -D my-cool-stuff # delete my-cool-stuff branch And now we finish a full process of code contribution","title":"Delete local branch"},{"location":"development/submit_pr_guide/#certain-regulations-about-submitting-code","text":"In order that reviewers focus on code in the code review, please follow these rules every time you submit your code: 1\uff09Make sure that unit tests in Travis-CI pass through successfully.If it fails,it means problems have been found in submitted code which will not be reviewed by reviewer. 2\uff09Before the submit of PUll Request: Please note the number of commit: Reason\uff1aIt will bother reviewers a lot if a dozen of commits are submitted after modification of only one file and only a few modifications are updated in every commit. Reviewers have to check commit one by one to figure out the modification. And sometimes it needs to take the overlap among commits into consideration. Suggestion\uff1aKeep commit concise as much as possible at every submit. You can make a supplyment to the previous commit with git commit --amend . About several commits having been pushed to remote repository, you can refer to squash commits after push \u3002 Pay attention to the name of every commit: It would be better to abstract the content of present commit and be not too arbitrary. 3\uff09If you have tackled with problems of an Issue, please add fix #issue_number to the first comment area of PULL Request.Then the corresponding Issue will be closed automatically after the merge of PULL Request. Keywords are including:close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved. Please select appropriate word. Please refer to Closing issues via commit messages for more details. In addition, please follow the following regulations in response to the suggestion of reviewers: 1\uff09A reply to every comment of reviewers\uff08It's a fundamental complimentary conduct in open source community.An expression of appreciation is a need for help from others): If you adopt the suggestion of reviewer and make a modification accordingly, it's courteous to reply with a simple Done . Please clarify your reason to the disagreenment 2\uff09If there are many suggestions Please show general modification Please follow start a review to give your reply,instead of directly replying for that every comment will result in sending an email causing email disaster.","title":"Certain regulations about submitting code"},{"location":"development/write_doc_guide/","text":"How to contribute documentation BFE encourages you to contribute documentation. If your written or translated documents meet our requirements, your documents will be available on the bfe-networks.com website and on Github for BFE users. BFE's documentation is mainly divided into the following categories: Beginner's Guide: to help users get started and inspired; User Guides: to provide users with a tutorial of basic operations in BFE; Developer Guides: to meet the needs of developers; Our documentation supports contributions in format of Markdown (GitHub style) . Once the document is written, you can use the preview tool to check how the document appears to verify that your document is displayed correctly on the official website. How to use the preview tool Install its dependencies Before doing this, please make sure your operating system has gitbook installed. Take the ubuntu system as an example, run: $ sudo apt-get update && apt-get install -y npm $ sudo npm install -g gitbook-cli Clone related repository: First download the full repository: $ git clone https://github.com/bfenetworks/bfe Run document site locally Change to base directory of documents which you want to load and build(docs/LANG), run: $ cd docs/en_us/ $ gitbook serve --port 8000 ... Serving book on http://localhost:8000 Then: open your browser and navigate to http://localhost:8000. The site may take a few seconds to load because the building takes a certain amount of time* Contriubute documents All content should be written in Markdown (GitHub style). Contribute new documents Create a new .md file or modify an existing article in the repository you are currently working on Add the new document name to the corresponding index file (SUMMARY.md) Run the preview tool Run the preview tool in base directory of documents (docs/LANG) $ cd docs/en_us/ $ gitbook serve --port 8000 Preview modification Open your browser and navigate to http://localhost:8000 . On the page to be updated, click Refresh Content at the top right corner. Pull Request for your changes The steps to submit changes and PR can refer to How to contribute code Help improve preview tool We encourage your contributions to all aspects of the platform and supportive contents. You can Fork or Clone repository, ask questions and feedback, or submit bugs on issues. For details, please refer to the Development Guide .","title":"Contribute documents"},{"location":"development/write_doc_guide/#how-to-contribute-documentation","text":"BFE encourages you to contribute documentation. If your written or translated documents meet our requirements, your documents will be available on the bfe-networks.com website and on Github for BFE users. BFE's documentation is mainly divided into the following categories: Beginner's Guide: to help users get started and inspired; User Guides: to provide users with a tutorial of basic operations in BFE; Developer Guides: to meet the needs of developers; Our documentation supports contributions in format of Markdown (GitHub style) . Once the document is written, you can use the preview tool to check how the document appears to verify that your document is displayed correctly on the official website.","title":"How to contribute documentation"},{"location":"development/write_doc_guide/#how-to-use-the-preview-tool","text":"","title":"How to use the preview tool"},{"location":"development/write_doc_guide/#install-its-dependencies","text":"Before doing this, please make sure your operating system has gitbook installed. Take the ubuntu system as an example, run: $ sudo apt-get update && apt-get install -y npm $ sudo npm install -g gitbook-cli","title":"Install its dependencies"},{"location":"development/write_doc_guide/#clone-related-repository","text":"First download the full repository: $ git clone https://github.com/bfenetworks/bfe","title":"Clone related repository:"},{"location":"development/write_doc_guide/#run-document-site-locally","text":"Change to base directory of documents which you want to load and build(docs/LANG), run: $ cd docs/en_us/ $ gitbook serve --port 8000 ... Serving book on http://localhost:8000 Then: open your browser and navigate to http://localhost:8000. The site may take a few seconds to load because the building takes a certain amount of time*","title":"Run document site locally"},{"location":"development/write_doc_guide/#contriubute-documents","text":"All content should be written in Markdown (GitHub style).","title":"Contriubute documents"},{"location":"development/write_doc_guide/#contribute-new-documents","text":"Create a new .md file or modify an existing article in the repository you are currently working on Add the new document name to the corresponding index file (SUMMARY.md)","title":"Contribute new documents"},{"location":"development/write_doc_guide/#run-the-preview-tool","text":"Run the preview tool in base directory of documents (docs/LANG) $ cd docs/en_us/ $ gitbook serve --port 8000","title":"Run the preview tool"},{"location":"development/write_doc_guide/#preview-modification","text":"Open your browser and navigate to http://localhost:8000 . On the page to be updated, click Refresh Content at the top right corner.","title":"Preview modification"},{"location":"development/write_doc_guide/#pull-request-for-your-changes","text":"The steps to submit changes and PR can refer to How to contribute code","title":"Pull Request for your changes"},{"location":"development/write_doc_guide/#help-improve-preview-tool","text":"We encourage your contributions to all aspects of the platform and supportive contents. You can Fork or Clone repository, ask questions and feedback, or submit bugs on issues. For details, please refer to the Development Guide .","title":"Help improve preview tool"},{"location":"development/module/bfe_callback/","text":"BFE Callbacks Callback Points in forwarding process The Callback Points in the forwarding process are shown below. List of Callback Points There are 9 callback points in BFE: HandleAccept: after TCP connection with client is established. HandleHandshake: after SSL/TLS handshake with client is finished. HandleBeforeLocation: before the destination product for the request is identified. HandleFoundProduct: after the destination product is identified. HandleAfterLocation: after the destination cluster is identified. HandleForward: after the destination subcluster is identified, and before the request is forwarded. HandleReadResponse: after response from backend is received by BFE. HandleRequestFinish: after response from backend is forwarded by BFE. HandleFinish: after connection with client is closed. The definition of callback points is in /bfe_module/bfe_callback.go Return Values of Callback Function BFE takes different actions based on the return values of the callback functions. The return values and the actions are defined as follows: BfeHandlerFinish: send response, then close connection. BfeHandlerGoOn: go on to next callback function. BfeHandlerRedirect: redirect directly. BfeHandlerResponse: send response. BfeHandlerClose: close connection without sending response. The definition of return values is in /bfe_module/bfe_handler_list.go Types of Callback Functions The format of callback functions may be different for different callback points. There are 5 types of callback functions. HandlersAccept: Handler for processing connection estalishment HandlersRequest: Handler for processing request received HandlersForward: Handler for request forwarding process HandlersResponse: Handler for processing response received HandlersFinish: Handler for processing connection close The types of callback function are defined in /bfe_module/bfe_handler_list.go The following describes each type of callback functions in detail Note: For the meaning of type int in the return value below, please refer to \"Return Value of Callback Function\" section above. HandlersAccept Applicable callback points: HandleAccept HandleHandshake Function prototype: handler(session *bfe_basic.Session) int HandlersRequest Applicable callback point: HandleBeforeLocation HandleFoundProduct HandleAfterLocation Function prototype: handler(req *bfe_basic.Request) (int, *bfe_http.Response) HandlersForward Applicable callback point: HandleForward Function prototype: handler(req *bfe_basic.Request) int HandlersResponse Applicable callback point: HandleReadResponse HandleRequestFinish Function prototype: handler(req *bfe_basic.Request, res *bfe_http.Response) int HandlersFinish Applicable callback point: HandleFinish Function prototype: handler(session *bfe_basic.Session) int","title":"BFE callback introduction"},{"location":"development/module/bfe_callback/#bfe-callbacks","text":"","title":"BFE Callbacks"},{"location":"development/module/bfe_callback/#callback-points-in-forwarding-process","text":"The Callback Points in the forwarding process are shown below.","title":"Callback Points in forwarding process"},{"location":"development/module/bfe_callback/#list-of-callback-points","text":"There are 9 callback points in BFE: HandleAccept: after TCP connection with client is established. HandleHandshake: after SSL/TLS handshake with client is finished. HandleBeforeLocation: before the destination product for the request is identified. HandleFoundProduct: after the destination product is identified. HandleAfterLocation: after the destination cluster is identified. HandleForward: after the destination subcluster is identified, and before the request is forwarded. HandleReadResponse: after response from backend is received by BFE. HandleRequestFinish: after response from backend is forwarded by BFE. HandleFinish: after connection with client is closed. The definition of callback points is in /bfe_module/bfe_callback.go","title":"List of Callback Points"},{"location":"development/module/bfe_callback/#return-values-of-callback-function","text":"BFE takes different actions based on the return values of the callback functions. The return values and the actions are defined as follows: BfeHandlerFinish: send response, then close connection. BfeHandlerGoOn: go on to next callback function. BfeHandlerRedirect: redirect directly. BfeHandlerResponse: send response. BfeHandlerClose: close connection without sending response. The definition of return values is in /bfe_module/bfe_handler_list.go","title":"Return Values of Callback Function"},{"location":"development/module/bfe_callback/#types-of-callback-functions","text":"The format of callback functions may be different for different callback points. There are 5 types of callback functions. HandlersAccept: Handler for processing connection estalishment HandlersRequest: Handler for processing request received HandlersForward: Handler for request forwarding process HandlersResponse: Handler for processing response received HandlersFinish: Handler for processing connection close The types of callback function are defined in /bfe_module/bfe_handler_list.go The following describes each type of callback functions in detail Note: For the meaning of type int in the return value below, please refer to \"Return Value of Callback Function\" section above.","title":"Types of Callback Functions"},{"location":"development/module/bfe_callback/#handlersaccept","text":"Applicable callback points: HandleAccept HandleHandshake Function prototype: handler(session *bfe_basic.Session) int","title":"HandlersAccept"},{"location":"development/module/bfe_callback/#handlersrequest","text":"Applicable callback point: HandleBeforeLocation HandleFoundProduct HandleAfterLocation Function prototype: handler(req *bfe_basic.Request) (int, *bfe_http.Response)","title":"HandlersRequest"},{"location":"development/module/bfe_callback/#handlersforward","text":"Applicable callback point: HandleForward Function prototype: handler(req *bfe_basic.Request) int","title":"HandlersForward"},{"location":"development/module/bfe_callback/#handlersresponse","text":"Applicable callback point: HandleReadResponse HandleRequestFinish Function prototype: handler(req *bfe_basic.Request, res *bfe_http.Response) int","title":"HandlersResponse"},{"location":"development/module/bfe_callback/#handlersfinish","text":"Applicable callback point: HandleFinish Function prototype: handler(session *bfe_basic.Session) int","title":"HandlersFinish"},{"location":"development/module/how_to_write_module/","text":"How to Write a Module Overview When writing a module for BFE, the following aspects should be considered: How to load configuration How to write and register callback functions How to expose internal states mod_block is used as an example for ease of understanding.\uff08 /bfe_modules/mod_block \uff09 Load Configuration Types of configuration For a given module, there are 2 types of configuration: Static configuration: be loaded when BFE starts There is only one such configuration file for each module The name of the configuration file is the same as the module name. It is suffixed with .conf Example: mod_block.conf Dynamic configuration: be loaded when BFE starts. It can also be hot-reloaded without restarting BFE. There can be one or more such configuration files for each module The name of the configuration file usually ends with .data Example: block_rules.data and ip_blocklist.data in mod_block Placement of configuration files The configuration files of the modules should be placed in /conf/{module_name} Example: Configuration files of mod_block are located in /conf/mod_block Verification of configuration Configuration files are verified whenever they are loaded, regardless of static or dynamic configuration. BFE fails to start if the configuration files fails to be loaded. BFE will continue to run if dynamic configuration fails to be hot-reloaded. Hot-reload of dynamic configuration For dynamic configurations, it is required to register callback function on dedicated web server. Hot-reload of dynamic configuration can be triggered by accessing specified URL. Example: In the init function of mod_block, there is some logic as follows, used to register callback function for configuration reload( mod_block.go ) // register web handler for reload err = whs.RegisterHandler(web_monitor.WebHandleReload, m.name, m.loadConfData) if err != nil { ... } Write and register callback functions Write callback functions Write callback functions for appropriate callback point. Note that for different callback points, definition of callback functions may be different. Definition of callback points and callback functions in BFE can be found in bfe_callback . Example: there are two callback functions defined in mod_block( mod_block.go ) func (m *ModuleBlock) globalBlockHandler(session *bfe_basic.Session) int { ... } func (m *ModuleBlock) productBlockHandler(request *bfe_basic.Request) (int, *bfe_http.Response) { ... } Register callback functions Callback functions should be registered when the module is initialized. Example: registration of callback functions in mod_block is as follows( mod_block.go ) func (m *ModuleBlock) Init(cbs *bfe_module.BfeCallbacks, whs *web_monitor.WebHandlers, cr string) error { ... // register handler err = cbs.AddFilter(bfe_module.HandleAccept, m.globalBlockHandler) if err != nil { ... } err = cbs.AddFilter(bfe_module.HandleFoundProduct, m.productBlockHandler) if err != nil { ... } ... } Expose module internal states For each BFE module, it is strongly recommended to expose enough internal states. To expose internal states of a module, do the following 3 steps: Define state variables Register callback function for exposing internal states Insert code for doing statistic Define state variables Firstly, design statistical metrics and define them as member variables. Example: define ModuleBlockState in mod_block ( mod_block.go ) type ModuleBlockState struct { ConnTotal *metrics.Counter // all connnetion checked ConnAccept *metrics.Counter // connection passed ConnRefuse *metrics.Counter // connection refused ReqTotal *metrics.Counter // all request in ReqAccept *metrics.Counter // request accepted ReqRefuse *metrics.Counter // request refused WrongCommand *metrics.Counter // request with condition satisfied, but wrong command } Secondly, define a member variable of type ModuleBlockState in ModuleBlock. Also define a member variable of type Metrics for related calculations. type ModuleBlock struct { ... state ModuleBlockState // module state metrics metrics.Metrics ... Thirdly, do initialization in constructor function. func NewModuleBlock() *ModuleBlock { m := new(ModuleBlock) m.name = ModBlock m.metrics.Init(&m.state, ModBlock, 0) ... } Register a callback function that exposes the internal state In order to expose internal status, callback function should be implemented. Example: In mod_block, there is logic as follows, where monitorHandlers () is the callback function( mod_block.go ) func (m *ModuleBlock) getState(params map[string][]string) ([]byte, error) { s := m.metrics.GetAll() return s.Format(params) } func (m *ModuleBlock) getStateDiff(params map[string][]string) ([]byte, error) { s := m.metrics.GetDiff() return s.Format(params) } func (m *ModuleBlock) monitorHandlers() map[string]interface{} { handlers := map[string]interface{}{ m.name: m.getState, m.name + \".diff\": m.getStateDiff, } return handlers } Then register callback function during module initialization. // register web handler for monitor err = web_monitor.RegisterHandlers(whs, web_monitor.WebHandleMonitor, m.monitorHandlers()) if err != nil { ... } Insert code for statistic Insert some code for doing statistic. Example: mod_block.go func (m *ModuleBlock) globalBlockHandler(session *bfe_basic.Session) int { ... m.state.ConnTotal.Inc(1) ... }","title":"How to write a module"},{"location":"development/module/how_to_write_module/#how-to-write-a-module","text":"","title":"How to Write a Module"},{"location":"development/module/how_to_write_module/#overview","text":"When writing a module for BFE, the following aspects should be considered: How to load configuration How to write and register callback functions How to expose internal states mod_block is used as an example for ease of understanding.\uff08 /bfe_modules/mod_block \uff09","title":"Overview"},{"location":"development/module/how_to_write_module/#load-configuration","text":"","title":"Load Configuration"},{"location":"development/module/how_to_write_module/#types-of-configuration","text":"For a given module, there are 2 types of configuration: Static configuration: be loaded when BFE starts There is only one such configuration file for each module The name of the configuration file is the same as the module name. It is suffixed with .conf Example: mod_block.conf Dynamic configuration: be loaded when BFE starts. It can also be hot-reloaded without restarting BFE. There can be one or more such configuration files for each module The name of the configuration file usually ends with .data Example: block_rules.data and ip_blocklist.data in mod_block","title":"Types of configuration"},{"location":"development/module/how_to_write_module/#placement-of-configuration-files","text":"The configuration files of the modules should be placed in /conf/{module_name} Example: Configuration files of mod_block are located in /conf/mod_block","title":"Placement of configuration files"},{"location":"development/module/how_to_write_module/#verification-of-configuration","text":"Configuration files are verified whenever they are loaded, regardless of static or dynamic configuration. BFE fails to start if the configuration files fails to be loaded. BFE will continue to run if dynamic configuration fails to be hot-reloaded.","title":"Verification of configuration"},{"location":"development/module/how_to_write_module/#hot-reload-of-dynamic-configuration","text":"For dynamic configurations, it is required to register callback function on dedicated web server. Hot-reload of dynamic configuration can be triggered by accessing specified URL. Example: In the init function of mod_block, there is some logic as follows, used to register callback function for configuration reload( mod_block.go ) // register web handler for reload err = whs.RegisterHandler(web_monitor.WebHandleReload, m.name, m.loadConfData) if err != nil { ... }","title":"Hot-reload of dynamic configuration"},{"location":"development/module/how_to_write_module/#write-and-register-callback-functions","text":"","title":"Write and register callback functions"},{"location":"development/module/how_to_write_module/#write-callback-functions","text":"Write callback functions for appropriate callback point. Note that for different callback points, definition of callback functions may be different. Definition of callback points and callback functions in BFE can be found in bfe_callback . Example: there are two callback functions defined in mod_block( mod_block.go ) func (m *ModuleBlock) globalBlockHandler(session *bfe_basic.Session) int { ... } func (m *ModuleBlock) productBlockHandler(request *bfe_basic.Request) (int, *bfe_http.Response) { ... }","title":"Write callback functions"},{"location":"development/module/how_to_write_module/#register-callback-functions","text":"Callback functions should be registered when the module is initialized. Example: registration of callback functions in mod_block is as follows( mod_block.go ) func (m *ModuleBlock) Init(cbs *bfe_module.BfeCallbacks, whs *web_monitor.WebHandlers, cr string) error { ... // register handler err = cbs.AddFilter(bfe_module.HandleAccept, m.globalBlockHandler) if err != nil { ... } err = cbs.AddFilter(bfe_module.HandleFoundProduct, m.productBlockHandler) if err != nil { ... } ... }","title":"Register callback functions"},{"location":"development/module/how_to_write_module/#expose-module-internal-states","text":"For each BFE module, it is strongly recommended to expose enough internal states. To expose internal states of a module, do the following 3 steps: Define state variables Register callback function for exposing internal states Insert code for doing statistic","title":"Expose module internal states"},{"location":"development/module/how_to_write_module/#define-state-variables","text":"Firstly, design statistical metrics and define them as member variables. Example: define ModuleBlockState in mod_block ( mod_block.go ) type ModuleBlockState struct { ConnTotal *metrics.Counter // all connnetion checked ConnAccept *metrics.Counter // connection passed ConnRefuse *metrics.Counter // connection refused ReqTotal *metrics.Counter // all request in ReqAccept *metrics.Counter // request accepted ReqRefuse *metrics.Counter // request refused WrongCommand *metrics.Counter // request with condition satisfied, but wrong command } Secondly, define a member variable of type ModuleBlockState in ModuleBlock. Also define a member variable of type Metrics for related calculations. type ModuleBlock struct { ... state ModuleBlockState // module state metrics metrics.Metrics ... Thirdly, do initialization in constructor function. func NewModuleBlock() *ModuleBlock { m := new(ModuleBlock) m.name = ModBlock m.metrics.Init(&m.state, ModBlock, 0) ... }","title":"Define state variables"},{"location":"development/module/how_to_write_module/#register-a-callback-function-that-exposes-the-internal-state","text":"In order to expose internal status, callback function should be implemented. Example: In mod_block, there is logic as follows, where monitorHandlers () is the callback function( mod_block.go ) func (m *ModuleBlock) getState(params map[string][]string) ([]byte, error) { s := m.metrics.GetAll() return s.Format(params) } func (m *ModuleBlock) getStateDiff(params map[string][]string) ([]byte, error) { s := m.metrics.GetDiff() return s.Format(params) } func (m *ModuleBlock) monitorHandlers() map[string]interface{} { handlers := map[string]interface{}{ m.name: m.getState, m.name + \".diff\": m.getStateDiff, } return handlers } Then register callback function during module initialization. // register web handler for monitor err = web_monitor.RegisterHandlers(whs, web_monitor.WebHandleMonitor, m.monitorHandlers()) if err != nil { ... }","title":"Register a callback function that exposes the internal state"},{"location":"development/module/how_to_write_module/#insert-code-for-statistic","text":"Insert some code for doing statistic. Example: mod_block.go func (m *ModuleBlock) globalBlockHandler(session *bfe_basic.Session) int { ... m.state.ConnTotal.Inc(1) ... }","title":"Insert code for statistic"},{"location":"development/module/overview/","text":"Overview of BFE Module Introduction BFE supports plugin architecture that make it possible to develop new features rapidly by writing plugins (i.e. modules). How BFE Module works Multiple callback points are provided in the forwarding process in BFE. When initializing a module, callback functions are registered on specified callback points. On processing each request/connection, when reaching a certain callback point, all registered callback functions are executed sequentially. Dive into BFE Module BFE callback mechanism How to write a BFE module","title":"Overview"},{"location":"development/module/overview/#overview-of-bfe-module","text":"","title":"Overview of BFE Module"},{"location":"development/module/overview/#introduction","text":"BFE supports plugin architecture that make it possible to develop new features rapidly by writing plugins (i.e. modules).","title":"Introduction"},{"location":"development/module/overview/#how-bfe-module-works","text":"Multiple callback points are provided in the forwarding process in BFE. When initializing a module, callback functions are registered on specified callback points. On processing each request/connection, when reaching a certain callback point, all registered callback functions are executed sequentially.","title":"How BFE Module works"},{"location":"development/module/overview/#dive-into-bfe-module","text":"BFE callback mechanism How to write a BFE module","title":"Dive into BFE Module"},{"location":"example/block/","text":"Block Scenario Suppose our service has been attacked from a specific IP, or a specific API (such as issuing a voucher) has been maliciously called; we want to block specified traffic, such as: block attack traffic comes from some fixed IP\uff082.2.2.2\uff09 block attack traffic targeted at some specific PATH\uff08/bonus\uff09 Configuration Modify example configurations (conf/) as the following steps: Step 1. Modify conf/bfe.conf and enable mod_block Modules = mod_block #enable mod_block Step 2. Modify conf/mod_block/mod_block.conf and configure path of global ip blocklist and block rules [basic] ProductRulePath = mod_block/block_rules.data IPBlocklistPath = mod_block/ip_blocklist.data Step 3. Configure global blocklist (conf/mod_block/ip_blocklist.data) Config ip address list, such as 2.2.2.2 2.2.2.2 Step 4. Configure block rules (conf/mod_block/block_rules.data) { \"Version\": \"init version\", \"Config\": { \"example_product\": [{ \"action\": { \"cmd\": \"CLOSE\", \"params\": [] }, \"name\": \"block bonus\", \"cond\": \"req_path_in(\\\"/bonus\\\", false)\" }] } } Step 5. Verify configured rules curl -v -H \"host: example.org\" \"http://127.1:8080/bonus\" The connection will be closed by bfe immediately.","title":"Traffic blocking"},{"location":"example/block/#block","text":"","title":"Block"},{"location":"example/block/#scenario","text":"Suppose our service has been attacked from a specific IP, or a specific API (such as issuing a voucher) has been maliciously called; we want to block specified traffic, such as: block attack traffic comes from some fixed IP\uff082.2.2.2\uff09 block attack traffic targeted at some specific PATH\uff08/bonus\uff09","title":"Scenario"},{"location":"example/block/#configuration","text":"Modify example configurations (conf/) as the following steps: Step 1. Modify conf/bfe.conf and enable mod_block Modules = mod_block #enable mod_block Step 2. Modify conf/mod_block/mod_block.conf and configure path of global ip blocklist and block rules [basic] ProductRulePath = mod_block/block_rules.data IPBlocklistPath = mod_block/ip_blocklist.data Step 3. Configure global blocklist (conf/mod_block/ip_blocklist.data) Config ip address list, such as 2.2.2.2 2.2.2.2 Step 4. Configure block rules (conf/mod_block/block_rules.data) { \"Version\": \"init version\", \"Config\": { \"example_product\": [{ \"action\": { \"cmd\": \"CLOSE\", \"params\": [] }, \"name\": \"block bonus\", \"cond\": \"req_path_in(\\\"/bonus\\\", false)\" }] } } Step 5. Verify configured rules curl -v -H \"host: example.org\" \"http://127.1:8080/bonus\" The connection will be closed by bfe immediately.","title":"Configuration"},{"location":"example/client_auth/","text":"TLS client authentication Scenario The server needs to authenticate the client using TLS client authentication Configuration steps Step 1. Generate root certificate openssl genrsa -out root.key 2048 openssl req -new -x509 -days 365 -key root.key -out root.crt Step 2. Create a client certificate signing request openssl genrsa -out client.key 2048 openssl req -new -out client.csr -key client.key Step 3. Generate client certificate echo \"extendedKeyUsage = clientAuth\" > openssl.cnf openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -days 365 -extfile openssl.cnf Step4. Configure layer 4 load balancing service. In this example, HAproxy is used as the layer 4 load balancing service, and VIP is passed to BFE using PROXY protocol. HAproxy can be installed through \"apt install haproxy\" on Ubuntu system. For more details, see www.haproxy.org . Configuration file(haproxy.cfg) example\uff1a global defaults mode tcp balance leastconn timeout client 3000ms timeout server 3000ms timeout connect 3000ms frontend fr_server_http bind 0.0.0.0:7080 default_backend bk_server_http backend bk_server_http server srv1 0.0.0.0:8080 maxconn 2048 send-proxy frontend fr_server_https bind 0.0.0.0:7443 default_backend bk_server_https backend bk_server_https server srv1 0.0.0.0:8443 maxconn 2048 send-proxy Run HAproxy haproxy -f haproxy.cfg Step 5. Configure BFE. Copy root.crt to tls_conf/client_ca directory(note: the suffix of root certificate should be \".crt\"). [server] ... Layer4LoadBalancer = \"PROXY\" ... [HttpsBasic] ... clientCABaseDir = tls_conf/client_ca ... Modify conf/tls_conf_rule.data and set \"ClientAuth\" to true and \"ClientCAName\" to name of the root certificate. { \"Version\": \"12\", \"DefaultNextProtos\": [ \"http/1.1\" ], \"Config\": { \"example_product\": { \"VipConf\": [ \"127.0.0.1\" ], \"SniConf\": null, \"CertName\": \"example.org\", \"NextProtos\": [ \"h2;rate=0;isw=65535;mcs=200;level=0\", \"http/1.1\" ], \"Grade\": \"C\", \"ClientAuth\": true, \"ClientCAName\": \"root\" } } } Run BFE. ./bfe -c ../conf Step 6. Verify configuration openssl s_client -connect 127.0.0.1:7443 -cert client.crt -key client.key -state -quiet","title":"TLS mutual authentication"},{"location":"example/client_auth/#tls-client-authentication","text":"","title":"TLS client authentication"},{"location":"example/client_auth/#scenario","text":"The server needs to authenticate the client using TLS client authentication","title":"Scenario"},{"location":"example/client_auth/#configuration-steps","text":"Step 1. Generate root certificate openssl genrsa -out root.key 2048 openssl req -new -x509 -days 365 -key root.key -out root.crt Step 2. Create a client certificate signing request openssl genrsa -out client.key 2048 openssl req -new -out client.csr -key client.key Step 3. Generate client certificate echo \"extendedKeyUsage = clientAuth\" > openssl.cnf openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -days 365 -extfile openssl.cnf Step4. Configure layer 4 load balancing service. In this example, HAproxy is used as the layer 4 load balancing service, and VIP is passed to BFE using PROXY protocol. HAproxy can be installed through \"apt install haproxy\" on Ubuntu system. For more details, see www.haproxy.org . Configuration file(haproxy.cfg) example\uff1a global defaults mode tcp balance leastconn timeout client 3000ms timeout server 3000ms timeout connect 3000ms frontend fr_server_http bind 0.0.0.0:7080 default_backend bk_server_http backend bk_server_http server srv1 0.0.0.0:8080 maxconn 2048 send-proxy frontend fr_server_https bind 0.0.0.0:7443 default_backend bk_server_https backend bk_server_https server srv1 0.0.0.0:8443 maxconn 2048 send-proxy Run HAproxy haproxy -f haproxy.cfg Step 5. Configure BFE. Copy root.crt to tls_conf/client_ca directory(note: the suffix of root certificate should be \".crt\"). [server] ... Layer4LoadBalancer = \"PROXY\" ... [HttpsBasic] ... clientCABaseDir = tls_conf/client_ca ... Modify conf/tls_conf_rule.data and set \"ClientAuth\" to true and \"ClientCAName\" to name of the root certificate. { \"Version\": \"12\", \"DefaultNextProtos\": [ \"http/1.1\" ], \"Config\": { \"example_product\": { \"VipConf\": [ \"127.0.0.1\" ], \"SniConf\": null, \"CertName\": \"example.org\", \"NextProtos\": [ \"h2;rate=0;isw=65535;mcs=200;level=0\", \"http/1.1\" ], \"Grade\": \"C\", \"ClientAuth\": true, \"ClientCAName\": \"root\" } } } Run BFE. ./bfe -c ../conf Step 6. Verify configuration openssl s_client -connect 127.0.0.1:7443 -cert client.crt -key client.key -state -quiet","title":"Configuration steps"},{"location":"example/fastcgi/","text":"FastCGI protocol Scenario Imagine we have an http server which has two instances. One is responsible for processing fcgi protocol requests, and the other is responsible for http requests. Host\uff1aexample.org Requests that start with / fcgi are forwarded to the fcgi protocol service instance with address 10.0.0.1:8001 Other requests are forwarded to http service instance with address 10.0.0.1:8002 Configuration Modify example configurations (conf/) as the following steps: Step 1. Config path of forward rules in conf/bfe.conf hostRuleConf = server_data_conf/host_rule.data routeRuleConf = server_data_conf/route_rule.data clusterConf = server_data_conf/cluster_conf.data clusterTableConf = cluster_conf/cluster_table.data gslbConf = cluster_conf/gslb.data Step 2. Config host rules (conf/server_data_conf/host_rule.data) { \"Version\": \"init version\", \"DefaultProduct\": null, \"Hosts\": { \"exampleTag\":[ \"example.org\" // host name: example.org=>host tag: exampleTag ] }, \"HostTags\": { \"example_product\":[ \"exampleTag\" // host tag: exampleTag=>product name: example_product ] } } Step 3. Config cluster configuration (conf/server_data_conf/cluster_conf.data) Note: Set backend conf params and use default value for other params { \"Version\": \"init version\", \"Config\": { \"cluster_demo_http\": { \"BackendConf\": { \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"RetryLevel\": 0 } }, \"cluster_demo_fcgi\": { \"BackendConf\": { \"Protocol\": \"fcgi\", \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"RetryLevel\": 0, \"FCGIConf\": { \"Root\": \"/home/work\", \"EnvVars\": { \"VarKey\": \"VarVal\" } } } } } } Step 4. Config instances of cluster (conf/cluster_conf/cluster_table.data) { \"Version\": \"init version\", \"Config\": { \"cluster_demo_fcgi\": { // cluster => sub_cluster => instance list \"demo_fcgi.all\": [{ // subcluster: demo_fcgi.all \"Addr\": \"10.0.0.1\", \"Name\": \"fcgi.A\", \"Port\": 8001, \"Weight\": 1 }] }, \"cluster_demo_http\": { \"demo_http.all\": [{ \"Addr\": \"10.0.0.1\", \"Name\": \"http.A\", \"Port\": 8002, \"Weight\": 1 }] } } } Step 5. Config gslb configuration (conf/cluster_conf/gslb.data) { \"Hostname\": \"\", \"Ts\": \"0\", \"Clusters\": { \"cluster_demo_fcgi\": { // cluster => weight of subcluster \"GSLB_BLACKHOLE\": 0, // GSLB_BLACKHOLE == 0 means do not discard traffic \"demo_fcgi.all\": 100 // weight 100 means all traffic routes to demo_fcgi.all }, \"cluster_demo_http\": { \"GSLB_BLACKHOLE\": 0, \"demo_http.all\": 100 } } } Step 6. Config route rules (conf/server_data_conf/route_rule.data) { \"Version\": \"init version\", \"ProductRule\": { \"example_product\": [ // product => route rules { \"Cond\": \"req_path_prefix_in(\\\"/fcgi\\\", false)\", \"ClusterName\": \"cluster_demo_fcgi\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"cluster_demo_http\" } ] } } Step 7. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/fcgi/test\" # request will route to 10.0.0.1:8001 curl -H \"host: example.org\" \"http://127.1:8080/http/test\" # request will route to 10.0.0.1:8002","title":"FastCGI"},{"location":"example/fastcgi/#fastcgi-protocol","text":"","title":"FastCGI protocol"},{"location":"example/fastcgi/#scenario","text":"Imagine we have an http server which has two instances. One is responsible for processing fcgi protocol requests, and the other is responsible for http requests. Host\uff1aexample.org Requests that start with / fcgi are forwarded to the fcgi protocol service instance with address 10.0.0.1:8001 Other requests are forwarded to http service instance with address 10.0.0.1:8002","title":"Scenario"},{"location":"example/fastcgi/#configuration","text":"Modify example configurations (conf/) as the following steps: Step 1. Config path of forward rules in conf/bfe.conf hostRuleConf = server_data_conf/host_rule.data routeRuleConf = server_data_conf/route_rule.data clusterConf = server_data_conf/cluster_conf.data clusterTableConf = cluster_conf/cluster_table.data gslbConf = cluster_conf/gslb.data Step 2. Config host rules (conf/server_data_conf/host_rule.data) { \"Version\": \"init version\", \"DefaultProduct\": null, \"Hosts\": { \"exampleTag\":[ \"example.org\" // host name: example.org=>host tag: exampleTag ] }, \"HostTags\": { \"example_product\":[ \"exampleTag\" // host tag: exampleTag=>product name: example_product ] } } Step 3. Config cluster configuration (conf/server_data_conf/cluster_conf.data) Note: Set backend conf params and use default value for other params { \"Version\": \"init version\", \"Config\": { \"cluster_demo_http\": { \"BackendConf\": { \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"RetryLevel\": 0 } }, \"cluster_demo_fcgi\": { \"BackendConf\": { \"Protocol\": \"fcgi\", \"TimeoutConnSrv\": 2000, \"TimeoutResponseHeader\": 50000, \"MaxIdleConnsPerHost\": 0, \"RetryLevel\": 0, \"FCGIConf\": { \"Root\": \"/home/work\", \"EnvVars\": { \"VarKey\": \"VarVal\" } } } } } } Step 4. Config instances of cluster (conf/cluster_conf/cluster_table.data) { \"Version\": \"init version\", \"Config\": { \"cluster_demo_fcgi\": { // cluster => sub_cluster => instance list \"demo_fcgi.all\": [{ // subcluster: demo_fcgi.all \"Addr\": \"10.0.0.1\", \"Name\": \"fcgi.A\", \"Port\": 8001, \"Weight\": 1 }] }, \"cluster_demo_http\": { \"demo_http.all\": [{ \"Addr\": \"10.0.0.1\", \"Name\": \"http.A\", \"Port\": 8002, \"Weight\": 1 }] } } } Step 5. Config gslb configuration (conf/cluster_conf/gslb.data) { \"Hostname\": \"\", \"Ts\": \"0\", \"Clusters\": { \"cluster_demo_fcgi\": { // cluster => weight of subcluster \"GSLB_BLACKHOLE\": 0, // GSLB_BLACKHOLE == 0 means do not discard traffic \"demo_fcgi.all\": 100 // weight 100 means all traffic routes to demo_fcgi.all }, \"cluster_demo_http\": { \"GSLB_BLACKHOLE\": 0, \"demo_http.all\": 100 } } } Step 6. Config route rules (conf/server_data_conf/route_rule.data) { \"Version\": \"init version\", \"ProductRule\": { \"example_product\": [ // product => route rules { \"Cond\": \"req_path_prefix_in(\\\"/fcgi\\\", false)\", \"ClusterName\": \"cluster_demo_fcgi\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"cluster_demo_http\" } ] } } Step 7. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/fcgi/test\" # request will route to 10.0.0.1:8001 curl -H \"host: example.org\" \"http://127.1:8080/http/test\" # request will route to 10.0.0.1:8002","title":"Configuration"},{"location":"example/guide/","text":"Beginner's Guide This guide gives a basic introdction to some tasks that can be done with bfe. It is supposed that bfe is already installed on your machine. If it is not, see Installing bfe . Traffic forwarding Traffic blocking Request redirect Request rewrite TLS mutual authentication","title":"Overview"},{"location":"example/guide/#beginners-guide","text":"This guide gives a basic introdction to some tasks that can be done with bfe. It is supposed that bfe is already installed on your machine. If it is not, see Installing bfe . Traffic forwarding Traffic blocking Request redirect Request rewrite TLS mutual authentication","title":"Beginner's Guide"},{"location":"example/redirect/","text":"Redirect Scenario Redirect HTTP to HTTPS for requests visiting example.org Connfiguration Modify the example configurations (conf/) as the following steps: Step 1. modify conf/bfe.conf and enable mod_redirect Modules = mod_redirect Step 2. modify mod_redirect basic configuration (conf/mod_redirect/mod_redirect.conf) [basic] DataPath = mod_redirect/redirect.data Step 3. modify redirect rule configuration (conf/mod_redirect/redirect.data), and add following rules. { \"Version\": \"init version\", \"Config\": { \"example_product\": [{ \"Cond\": \"!req_proto_secure() && req_host_in(\\\"example.org\\\")\", \"Actions\": [{ \"Cmd\": \"SCHEME_SET\", \"Params\": [ \"https\" ] }], \"Status\": 301 }] } } Step 4. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/test\" The repsonse stuatus code should be 301, and the value of Location response Header should be \"https://example.org/test\".","title":"Request redirect"},{"location":"example/redirect/#redirect","text":"","title":"Redirect"},{"location":"example/redirect/#scenario","text":"Redirect HTTP to HTTPS for requests visiting example.org","title":"Scenario"},{"location":"example/redirect/#connfiguration","text":"Modify the example configurations (conf/) as the following steps: Step 1. modify conf/bfe.conf and enable mod_redirect Modules = mod_redirect Step 2. modify mod_redirect basic configuration (conf/mod_redirect/mod_redirect.conf) [basic] DataPath = mod_redirect/redirect.data Step 3. modify redirect rule configuration (conf/mod_redirect/redirect.data), and add following rules. { \"Version\": \"init version\", \"Config\": { \"example_product\": [{ \"Cond\": \"!req_proto_secure() && req_host_in(\\\"example.org\\\")\", \"Actions\": [{ \"Cmd\": \"SCHEME_SET\", \"Params\": [ \"https\" ] }], \"Status\": 301 }] } } Step 4. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/test\" The repsonse stuatus code should be 301, and the value of Location response Header should be \"https://example.org/test\".","title":"Connfiguration"},{"location":"example/rewrite/","text":"Rewrite Scenario The service API '/service' is upgraded to '/v1/service' during evolution. To avoid from breaking existing clients, bfe rewrites requests with path '/service' and then forward to the backend service. Configuration Modify example configurations (conf/) as the following steps: Step 1. Modify conf/bfe.conf and enable mod_rewrite Modules = mod_rewrite # enable mod_rewrite Step 2. Modify conf/mod_rewrite/mod_rewrite.conf and set the rule configuration file [basic] DataPath = mod_rewrite/rewrite.data Step 3. Modify rewrite rules configuration { \"Version\": \"init version\", \"Config\": { \"example_product\": [{ \"Cond\": \"req_path_prefix_in(\\\"/service\\\", false)\", \"Actions\": [{ \"Cmd\": \"PATH_PREFIX_ADD\", \"Params\": [ \"/v1/\" ] }], \"Last\": true }] } } Step 4. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/service\" The final path of request received by service 'cluster_demo_dynamic' is 'v1/service'.","title":"Request rewrite"},{"location":"example/rewrite/#rewrite","text":"","title":"Rewrite"},{"location":"example/rewrite/#scenario","text":"The service API '/service' is upgraded to '/v1/service' during evolution. To avoid from breaking existing clients, bfe rewrites requests with path '/service' and then forward to the backend service.","title":"Scenario"},{"location":"example/rewrite/#configuration","text":"Modify example configurations (conf/) as the following steps: Step 1. Modify conf/bfe.conf and enable mod_rewrite Modules = mod_rewrite # enable mod_rewrite Step 2. Modify conf/mod_rewrite/mod_rewrite.conf and set the rule configuration file [basic] DataPath = mod_rewrite/rewrite.data Step 3. Modify rewrite rules configuration { \"Version\": \"init version\", \"Config\": { \"example_product\": [{ \"Cond\": \"req_path_prefix_in(\\\"/service\\\", false)\", \"Actions\": [{ \"Cmd\": \"PATH_PREFIX_ADD\", \"Params\": [ \"/v1/\" ] }], \"Last\": true }] } } Step 4. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/service\" The final path of request received by service 'cluster_demo_dynamic' is 'v1/service'.","title":"Configuration"},{"location":"example/route/","text":"Route Scenario Imagine we have an http server which has two instances. One is responsible for processing static file requests, and the other is responsible for dynamic requests. Host\uff1aexample.org Requests that start with / static are forwarded to the static file service instance with address 10.0.0.1:8001 Other requests are forwarded to dynamic service instance with address 10.0.0.1:8002 Configuration Modify example configurations (conf/) as the following steps: Step 1. Config path of forward rules in conf/bfe.conf hostRuleConf = server_data_conf/host_rule.data routeRuleConf = server_data_conf/route_rule.data clusterConf = server_data_conf/cluster_conf.data clusterTableConf = cluster_conf/cluster_table.data gslbConf = cluster_conf/gslb.data Step 2. Config host rules (conf/server_data_conf/host_rule.data) { \"Version\": \"init version\", \"DefaultProduct\": null, \"Hosts\": { \"exampleTag\":[ \"example.org\" // host name: example.org=>host tag: exampleTag ] }, \"HostTags\": { \"example_product\":[ \"exampleTag\" // host tag: exampleTag=>product name: example_product ] } } Step 3. Config cluster configuration (conf/server_data_conf/cluster_conf.data) Note: Set health check params and use default value for other params { \"Version\": \"init version\", \"Config\": { \"cluster_demo_static\": { \"CheckConf\": { // health check config \"Schem\": \"http\", \"Uri\": \"/health_check\", \"Host\": \"example.org\", \"StatusCode\": 200 } }, \"cluster_demo_dynamic\": { \"CheckConf\": { // health check config \"Schem\": \"http\", \"Uri\": \"/health_check\", \"Host\": \"example.org\", \"StatusCode\": 200 } } } } Step 4. Config instances of cluster (conf/cluster_conf/cluster_table.data) { \"Version\": \"init version\", \"Config\": { \"cluster_demo_static\": { // cluster => sub_cluster => instance list \"demo_static.all\": [{ // subcluster: demo_static.all \"Addr\": \"10.0.0.1\", \"Name\": \"static.A\", \"Port\": 8001, \"Weight\": 1 }] }, \"cluster_demo_dynamic\": { \"demo_dynamic.all\": [{ \"Addr\": \"10.0.0.1\", \"Name\": \"dynamic.A\", \"Port\": 8002, \"Weight\": 1 }] } } } Step 5. Config gslb configuration (conf/cluster_conf/gslb.data) { \"Hostname\": \"\", \"Ts\": \"0\", \"Clusters\": { \"cluster_demo_static\": { // cluster => weight of subcluster \"GSLB_BLACKHOLE\": 0, // GSLB_BLACKHOLE == 0 means do not discard traffic \"demo_static.all\": 100 // weight 100 means all traffic routes to demo_static.all }, \"cluster_demo_dynamic\": { \"GSLB_BLACKHOLE\": 0, \"demo_dynamic.all\": 100 } } } Step 6. Config route rules (conf/server_data_conf/route_rule.data) { \"Version\": \"init version\", \"ProductRule\": { \"example_product\": [ // product => route rules { \"Cond\": \"req_path_prefix_in(\\\"/static\\\", false)\", \"ClusterName\": \"cluster_demo_static\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"cluster_demo_dynamic\" } ] } } Step 7. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/static/test.html\" # request will route to 10.0.0.1:8001 curl -H \"host: example.org\" \"http://127.1:8080/api/test\" # request will route to 10.0.0.1:8002","title":"Traffic forwarding"},{"location":"example/route/#route","text":"","title":"Route"},{"location":"example/route/#scenario","text":"Imagine we have an http server which has two instances. One is responsible for processing static file requests, and the other is responsible for dynamic requests. Host\uff1aexample.org Requests that start with / static are forwarded to the static file service instance with address 10.0.0.1:8001 Other requests are forwarded to dynamic service instance with address 10.0.0.1:8002","title":"Scenario"},{"location":"example/route/#configuration","text":"Modify example configurations (conf/) as the following steps: Step 1. Config path of forward rules in conf/bfe.conf hostRuleConf = server_data_conf/host_rule.data routeRuleConf = server_data_conf/route_rule.data clusterConf = server_data_conf/cluster_conf.data clusterTableConf = cluster_conf/cluster_table.data gslbConf = cluster_conf/gslb.data Step 2. Config host rules (conf/server_data_conf/host_rule.data) { \"Version\": \"init version\", \"DefaultProduct\": null, \"Hosts\": { \"exampleTag\":[ \"example.org\" // host name: example.org=>host tag: exampleTag ] }, \"HostTags\": { \"example_product\":[ \"exampleTag\" // host tag: exampleTag=>product name: example_product ] } } Step 3. Config cluster configuration (conf/server_data_conf/cluster_conf.data) Note: Set health check params and use default value for other params { \"Version\": \"init version\", \"Config\": { \"cluster_demo_static\": { \"CheckConf\": { // health check config \"Schem\": \"http\", \"Uri\": \"/health_check\", \"Host\": \"example.org\", \"StatusCode\": 200 } }, \"cluster_demo_dynamic\": { \"CheckConf\": { // health check config \"Schem\": \"http\", \"Uri\": \"/health_check\", \"Host\": \"example.org\", \"StatusCode\": 200 } } } } Step 4. Config instances of cluster (conf/cluster_conf/cluster_table.data) { \"Version\": \"init version\", \"Config\": { \"cluster_demo_static\": { // cluster => sub_cluster => instance list \"demo_static.all\": [{ // subcluster: demo_static.all \"Addr\": \"10.0.0.1\", \"Name\": \"static.A\", \"Port\": 8001, \"Weight\": 1 }] }, \"cluster_demo_dynamic\": { \"demo_dynamic.all\": [{ \"Addr\": \"10.0.0.1\", \"Name\": \"dynamic.A\", \"Port\": 8002, \"Weight\": 1 }] } } } Step 5. Config gslb configuration (conf/cluster_conf/gslb.data) { \"Hostname\": \"\", \"Ts\": \"0\", \"Clusters\": { \"cluster_demo_static\": { // cluster => weight of subcluster \"GSLB_BLACKHOLE\": 0, // GSLB_BLACKHOLE == 0 means do not discard traffic \"demo_static.all\": 100 // weight 100 means all traffic routes to demo_static.all }, \"cluster_demo_dynamic\": { \"GSLB_BLACKHOLE\": 0, \"demo_dynamic.all\": 100 } } } Step 6. Config route rules (conf/server_data_conf/route_rule.data) { \"Version\": \"init version\", \"ProductRule\": { \"example_product\": [ // product => route rules { \"Cond\": \"req_path_prefix_in(\\\"/static\\\", false)\", \"ClusterName\": \"cluster_demo_static\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"cluster_demo_dynamic\" } ] } } Step 7. Verify configured rules curl -H \"host: example.org\" \"http://127.1:8080/static/test.html\" # request will route to 10.0.0.1:8001 curl -H \"host: example.org\" \"http://127.1:8080/api/test\" # request will route to 10.0.0.1:8002","title":"Configuration"},{"location":"faq/configuration/","text":"Configuration FAQ How to enable TLS client authentication For more details, see TLS client authentication example How to enable HTTP2 protocol See conf/tls_conf/tls_rule_conf.data configuration example","title":"Configuration"},{"location":"faq/configuration/#configuration-faq","text":"","title":"Configuration FAQ"},{"location":"faq/configuration/#how-to-enable-tls-client-authentication","text":"For more details, see TLS client authentication example","title":"How to enable TLS client authentication"},{"location":"faq/configuration/#how-to-enable-http2-protocol","text":"See conf/tls_conf/tls_rule_conf.data configuration example","title":"How to enable HTTP2 protocol"},{"location":"faq/development/","text":"Development FAQ How to develop a module For more details, see introduction to module development","title":"Development"},{"location":"faq/development/#development-faq","text":"","title":"Development FAQ"},{"location":"faq/development/#how-to-develop-a-module","text":"For more details, see introduction to module development","title":"How to develop a module"},{"location":"faq/installation/","text":"Installation FAQ Go get timeout during installation Set GOPROXY environment variable as follows (go1.15+): $ go env -w GO111MODULE=on $ go env -w GOPROXY=https://goproxy.cn,direct For more details, see https://goproxy.cn or https://goproxy.io Whether compilation on MAC/Windows OS is supported or not ? It is supported since BFE v0.7.0","title":"Installation"},{"location":"faq/installation/#installation-faq","text":"","title":"Installation FAQ"},{"location":"faq/installation/#go-get-timeout-during-installation","text":"Set GOPROXY environment variable as follows (go1.15+): $ go env -w GO111MODULE=on $ go env -w GOPROXY=https://goproxy.cn,direct For more details, see https://goproxy.cn or https://goproxy.io","title":"Go get timeout during installation"},{"location":"faq/installation/#whether-compilation-on-macwindows-os-is-supported-or-not","text":"It is supported since BFE v0.7.0","title":"Whether compilation on MAC/Windows OS is supported or not ?"},{"location":"faq/performance/","text":"Performance FAQ How to tune performance Please feedback to bfe-osc@baidu.com for help, and performance tuning guide will be provided in future version.","title":"Performance"},{"location":"faq/performance/#performance-faq","text":"","title":"Performance FAQ"},{"location":"faq/performance/#how-to-tune-performance","text":"Please feedback to bfe-osc@baidu.com for help, and performance tuning guide will be provided in future version.","title":"How to tune performance"},{"location":"installation/install/","text":"Installation Notes This document explain the installation of BFE Server. For guide of installation of BFE control plane components, see deploy document of BFE API Server . Installation methods Install from source Install using binaries Install using go Install using snap Install using docker Supported platform Operating System Description Linux OS Support Recommended development and deployment system Mac OS Support Windows OS Support","title":"Overview"},{"location":"installation/install/#installation","text":"","title":"Installation"},{"location":"installation/install/#notes","text":"This document explain the installation of BFE Server. For guide of installation of BFE control plane components, see deploy document of BFE API Server .","title":"Notes"},{"location":"installation/install/#installation-methods","text":"Install from source Install using binaries Install using go Install using snap Install using docker","title":"Installation methods"},{"location":"installation/install/#supported-platform","text":"Operating System Description Linux OS Support Recommended development and deployment system Mac OS Support Windows OS Support","title":"Supported platform"},{"location":"installation/install_from_source/","text":"Install from source code Prerequisites golang 1.17+ git 2.0+ glibc-static 2.17+ Download source code $ git clone https://github.com/bfenetworks/bfe Build Execute the following command to build bfe: $ cd bfe $ make Tip If you encounter an error such as \"https fetch: Get ... connect: connection timed out\", please set the GOPROXY and try again. See Installation FAQ Execute the following command to run tests: $ make test Executable object file location: $ file output/bin/bfe output/bin/bfe: ELF 64-bit LSB executable, ... Run Run BFE with example configuration files: $ cd output/bin/ $ ./bfe -c ../conf -l ../log Further reading Get familiar with Command options Get started with Beginner's Guide","title":"Install from source"},{"location":"installation/install_from_source/#install-from-source-code","text":"","title":"Install from source code"},{"location":"installation/install_from_source/#prerequisites","text":"golang 1.17+ git 2.0+ glibc-static 2.17+","title":"Prerequisites"},{"location":"installation/install_from_source/#download-source-code","text":"$ git clone https://github.com/bfenetworks/bfe","title":"Download source code"},{"location":"installation/install_from_source/#build","text":"Execute the following command to build bfe: $ cd bfe $ make Tip If you encounter an error such as \"https fetch: Get ... connect: connection timed out\", please set the GOPROXY and try again. See Installation FAQ Execute the following command to run tests: $ make test Executable object file location: $ file output/bin/bfe output/bin/bfe: ELF 64-bit LSB executable, ...","title":"Build"},{"location":"installation/install_from_source/#run","text":"Run BFE with example configuration files: $ cd output/bin/ $ ./bfe -c ../conf -l ../log","title":"Run"},{"location":"installation/install_from_source/#further-reading","text":"Get familiar with Command options Get started with Beginner's Guide","title":"Further reading"},{"location":"installation/install_using_binaries/","text":"Install using binaries Download binaries Download the latest release of BFE for your platform. Installation Extract the files to the installation directory: $ tar zxvf bfe_<version>_<os>_<arch>.tar.gz Run Run BFE with example configuration files: $ cd bfe/bin $ ./bfe -c ../conf -l ../log Further reading Get familiar with Command options Get started with Beginner's Guide","title":"Install using binaries"},{"location":"installation/install_using_binaries/#install-using-binaries","text":"","title":"Install using binaries"},{"location":"installation/install_using_binaries/#download-binaries","text":"Download the latest release of BFE for your platform.","title":"Download binaries"},{"location":"installation/install_using_binaries/#installation","text":"Extract the files to the installation directory: $ tar zxvf bfe_<version>_<os>_<arch>.tar.gz","title":"Installation"},{"location":"installation/install_using_binaries/#run","text":"Run BFE with example configuration files: $ cd bfe/bin $ ./bfe -c ../conf -l ../log","title":"Run"},{"location":"installation/install_using_binaries/#further-reading","text":"Get familiar with Command options Get started with Beginner's Guide","title":"Further reading"},{"location":"installation/install_using_docker/","text":"Install using docker Install && Run Run BFE with example configuration files: docker run -p 8080:8080 -p 8443:8443 -p 8421:8421 bfenetworks/bfe you can access http://127.0.0.1:8080/ and got status code 500 because of there is rule be matched. you can access http://127.0.0.1:8421/ got monitor information. Run BFE with your configuration files: // prepare your configuration (see section Configuration if you need) to dir /Users/BFE/conf docker run -p 8080:8080 -p 8443:8443 -p 8421:8421 -v /Users/BFE/Desktop/log:/bfe/log -v /Users/BFE/Desktop/conf:/bfe/conf bfenetworks/bfe Further reading Get familiar with Command options Get started with Beginner's Guide","title":"Install using docker"},{"location":"installation/install_using_docker/#install-using-docker","text":"","title":"Install using docker"},{"location":"installation/install_using_docker/#install-run","text":"Run BFE with example configuration files: docker run -p 8080:8080 -p 8443:8443 -p 8421:8421 bfenetworks/bfe you can access http://127.0.0.1:8080/ and got status code 500 because of there is rule be matched. you can access http://127.0.0.1:8421/ got monitor information. Run BFE with your configuration files: // prepare your configuration (see section Configuration if you need) to dir /Users/BFE/conf docker run -p 8080:8080 -p 8443:8443 -p 8421:8421 -v /Users/BFE/Desktop/log:/bfe/log -v /Users/BFE/Desktop/conf:/bfe/conf bfenetworks/bfe","title":"Install &amp;&amp; Run"},{"location":"installation/install_using_docker/#further-reading","text":"Get familiar with Command options Get started with Beginner's Guide","title":"Further reading"},{"location":"installation/install_using_go/","text":"Install using go Prerequisites golang 1.15+ Installation Get the source code and install $ go get github.com/bfenetworks/bfe Executable object file location is ${GOPATH}/bin/bfe Tip If you encounter an error such as \"https fetch: Get ... connect: connection timed out\", please set the GOPROXY and try again. See Installation FAQ Run Run BFE with example configuration files: $ cd ${GOPATH}/bin/ $ ./bfe -c ${GOPATH}/src/github.com/bfenetworks/bfe/conf/ Further reading Get familiar with Command options Get started with Beginner's Guide","title":"Install using go"},{"location":"installation/install_using_go/#install-using-go","text":"","title":"Install using go"},{"location":"installation/install_using_go/#prerequisites","text":"golang 1.15+","title":"Prerequisites"},{"location":"installation/install_using_go/#installation","text":"Get the source code and install $ go get github.com/bfenetworks/bfe Executable object file location is ${GOPATH}/bin/bfe Tip If you encounter an error such as \"https fetch: Get ... connect: connection timed out\", please set the GOPROXY and try again. See Installation FAQ","title":"Installation"},{"location":"installation/install_using_go/#run","text":"Run BFE with example configuration files: $ cd ${GOPATH}/bin/ $ ./bfe -c ${GOPATH}/src/github.com/bfenetworks/bfe/conf/","title":"Run"},{"location":"installation/install_using_go/#further-reading","text":"Get familiar with Command options Get started with Beginner's Guide","title":"Further reading"},{"location":"installation/install_using_snap/","text":"Install using snap Prerequisite snap Installation Execute the following command to install bfe: $ sudo snap install --edge bfe Tip Configuration files location: /var/snap/bfe/common/conf/ Log files location: /var/snap/bfe/common/log/ Run Execute the following command to run bfe: $ sudo /snap/bin/bfe Further reading Get familiar with Command options Get started with Beginner's Guide","title":"Install using snap"},{"location":"installation/install_using_snap/#install-using-snap","text":"","title":"Install using snap"},{"location":"installation/install_using_snap/#prerequisite","text":"snap","title":"Prerequisite"},{"location":"installation/install_using_snap/#installation","text":"Execute the following command to install bfe: $ sudo snap install --edge bfe Tip Configuration files location: /var/snap/bfe/common/conf/ Log files location: /var/snap/bfe/common/log/","title":"Installation"},{"location":"installation/install_using_snap/#run","text":"Execute the following command to run bfe: $ sudo /snap/bin/bfe","title":"Run"},{"location":"installation/install_using_snap/#further-reading","text":"Get familiar with Command options Get started with Beginner's Guide","title":"Further reading"},{"location":"introduction/balance/","text":"Traffic balancing Sub cluster level load balance Overview Usually one cluster has more than one sub clusters. In BFE, it is supported to define weights for distributing traffic to each sub cluster. Also there is a special virtual sub cluster \"BLACKHOLE\" for each cluster. Traffic allocated to \"BLACKHOLE\" will be discarded. \"BLACKHOLE\" is used to prevent traffic overloading to the whole cluster. Load balance between sub clusters, it is a very important feature for BFE. This feature is very useful in multi-IDCs scenario. Example Consider the following scenario\uff1a Two IDCs\uff1aIDC_1, IDC_2 Two BFE clusters\uff1aBFE_1, BFE_2 Two backend sub clusters\uff1aSubCluster_1, SubCluster_2 In BFE clusters, weights for distributing traffic to each sub cluster can be configured as follows: BFE_1\uff1a{SubCluster_1: W11\uff0cSubCluster_2: W12, Blackhole: W1B} BFE_2\uff1a{SubCluster_1: W21\uff0cSubCluster_2: W22, Blackhole: W2B} Based on the above configuration, BFE clusters distribute traffic to backend sub clusters. For example\uff0cif configuration of BFE_1 is {W11\uff0cW12, W1B} ={45\uff0c45\uff0c10}, traffic percentage to SubCluster_1, SubCluster_2 and Blackhole is 45%, 45% and 10%. Instance level load balance Usually, a sub cluster is composed of multiple instances. Within sub cluster, several policies is provided for distributing traffic among instances. e.g., WRR(Weighted Round Robin) WLC(Weighted Least Connection) Instances can be assigned with different weights based on their capacity\u3002 Health check BFE supports health check for each backend instance. BFE maintains a state machine for each instance, with two states: NORMAL\uff1athe instance acts normally in processing request. CHECKING\uff1athe instance fails to process request and response to BFE. BFE starts health check for this instance, until it acts normally again. The condition for switching between states: NORMAL to CHECKING, when\uff1a Number of consecutive failures, in connecting or sending request to the instance, exceeds a threshhod. CHECKING to NORMAL, when\uff1a BFE receives correct response for health check request from the instance. Automatic retries If request forwarding fails, BFE supports retry in two ways\uff1a In-Sub-Cluster Retry: Re-forward request within the same sub cluster. Cross-Sub-Cluster Rery: Re-forward request to other sub cluster. Connection pool Two ways are supported for TCP connection between BFE and backend instance\uff1a Short-Lived Connection\uff1aBFE forwards each request to backend instance with a new established TCP connection. Connection Pool\uff1a BFE maintains a connection pool for each backend instance. For a request forwarded to given backend instance: If there is an available idle connection in the connection pool, take it from the pool and reuse it. Otherwise, establish a new TCP connection. After processing for a request is finished, for the connection used for this request: If number of idle connections in the pool is less than configured capacity, the connection is added into the pool. Otherwise, close the connection directly. Session stickiness BFE supports session stickiness. Session could be defined based on following infos of the request: Source IP Field in request header, cookie etc. Session stickiness is supported for the following two levels: Sub cluster level: requests of the same session are forwarded to the same sub cluster (may be different instances in this sub cluster). Instance level: requests of the same session are forwarded to the same instance.","title":"Traffic balancing"},{"location":"introduction/balance/#traffic-balancing","text":"","title":"Traffic balancing"},{"location":"introduction/balance/#sub-cluster-level-load-balance","text":"","title":"Sub cluster level load balance"},{"location":"introduction/balance/#overview","text":"Usually one cluster has more than one sub clusters. In BFE, it is supported to define weights for distributing traffic to each sub cluster. Also there is a special virtual sub cluster \"BLACKHOLE\" for each cluster. Traffic allocated to \"BLACKHOLE\" will be discarded. \"BLACKHOLE\" is used to prevent traffic overloading to the whole cluster. Load balance between sub clusters, it is a very important feature for BFE. This feature is very useful in multi-IDCs scenario.","title":"Overview"},{"location":"introduction/balance/#example","text":"Consider the following scenario\uff1a Two IDCs\uff1aIDC_1, IDC_2 Two BFE clusters\uff1aBFE_1, BFE_2 Two backend sub clusters\uff1aSubCluster_1, SubCluster_2 In BFE clusters, weights for distributing traffic to each sub cluster can be configured as follows: BFE_1\uff1a{SubCluster_1: W11\uff0cSubCluster_2: W12, Blackhole: W1B} BFE_2\uff1a{SubCluster_1: W21\uff0cSubCluster_2: W22, Blackhole: W2B} Based on the above configuration, BFE clusters distribute traffic to backend sub clusters. For example\uff0cif configuration of BFE_1 is {W11\uff0cW12, W1B} ={45\uff0c45\uff0c10}, traffic percentage to SubCluster_1, SubCluster_2 and Blackhole is 45%, 45% and 10%.","title":"Example"},{"location":"introduction/balance/#instance-level-load-balance","text":"Usually, a sub cluster is composed of multiple instances. Within sub cluster, several policies is provided for distributing traffic among instances. e.g., WRR(Weighted Round Robin) WLC(Weighted Least Connection) Instances can be assigned with different weights based on their capacity\u3002","title":"Instance level load balance"},{"location":"introduction/balance/#health-check","text":"BFE supports health check for each backend instance. BFE maintains a state machine for each instance, with two states: NORMAL\uff1athe instance acts normally in processing request. CHECKING\uff1athe instance fails to process request and response to BFE. BFE starts health check for this instance, until it acts normally again. The condition for switching between states: NORMAL to CHECKING, when\uff1a Number of consecutive failures, in connecting or sending request to the instance, exceeds a threshhod. CHECKING to NORMAL, when\uff1a BFE receives correct response for health check request from the instance.","title":"Health check"},{"location":"introduction/balance/#automatic-retries","text":"If request forwarding fails, BFE supports retry in two ways\uff1a In-Sub-Cluster Retry: Re-forward request within the same sub cluster. Cross-Sub-Cluster Rery: Re-forward request to other sub cluster.","title":"Automatic retries"},{"location":"introduction/balance/#connection-pool","text":"Two ways are supported for TCP connection between BFE and backend instance\uff1a Short-Lived Connection\uff1aBFE forwards each request to backend instance with a new established TCP connection. Connection Pool\uff1a BFE maintains a connection pool for each backend instance. For a request forwarded to given backend instance: If there is an available idle connection in the connection pool, take it from the pool and reuse it. Otherwise, establish a new TCP connection. After processing for a request is finished, for the connection used for this request: If number of idle connections in the pool is less than configured capacity, the connection is added into the pool. Otherwise, close the connection directly.","title":"Connection pool"},{"location":"introduction/balance/#session-stickiness","text":"BFE supports session stickiness. Session could be defined based on following infos of the request: Source IP Field in request header, cookie etc. Session stickiness is supported for the following two levels: Sub cluster level: requests of the same session are forwarded to the same sub cluster (may be different instances in this sub cluster). Instance level: requests of the same session are forwarded to the same instance.","title":"Session stickiness"},{"location":"introduction/comparison/","text":"Comparison to similar systems Here comparison will be made between BFE and several similar system. NOTE: Most of the projects below are under active development. Thus some of the information may become out of date. If that is the case please feedback to https://github.com/bfenetworks/bfe/issues. Briefs of BFE and similar systems The brief descriptions of several systems are as follows: BFE: BFE is an open-source layer 7 load balancer. Nginx : nginx is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server. Traefik : Traefik is a modern HTTP reverse proxy and load balancer. Envoy : Envoy is an open source edge and service proxy, designed for cloud-native applications. Features Protocol Support All 4 systems support HTTPS and HTTP/2. Health Check BFE and Nginx only support \"passive\" health check. Traefik only supports \"active\" health check. Envoy supports active, passive and hybrid health check. NOTE: Nginx Plus (i.e., the commercial version of nginx) supports \"active\" health check. Instance-Level Load Balancing All 4 systems support instance-level load balancing. Cluster-Level Load Balancing BFE, Traefik and Envoy support cluster-level load balancing. Nginx doesn't have this feature. NOTE: Envoy supports global and distributed load balancing. Forwarding Rules BFE provides Condition Expression . Nginx uses regular expression. Traefik supports traffic classification based on request content. But it can't support flexible AND or OR logic. Envoy supports rules based on Domain, Path and Header. Extensibility Language Both BFE and Traefik are written in Golang Nginx is written in C and Lua. Envoy is written in C++. Pluggable All 4 systems support pluggable architecture. Cost for New Features Due to difference in language, cost for new features is lower for BFE and Traefik, while cost is higher for Nginx and Envoy. Resilience to exception With recovery mechanism of Golang, Panic can be caught in BFE and Traefik. Both system are immune to sudden crash. While Nginx and Envoy can do nothing with wrong memory usage. Debugging such a bug is very time-consuming. Maintenance Observability BFE provides rich internal status for external observation. Nginx and Traefik provide less internal status. Envoy also provides quite a lot internal status. Hot-reload of configuration All 4 systems support hot-reload of configuration. In Nginx, process must be restarted for the configuration to take effect, while active connections are terminated. NOTE: Nginx Plus supports hot-reload of configuration, with no process restart.","title":"Comparsion to similar systems"},{"location":"introduction/comparison/#comparison-to-similar-systems","text":"Here comparison will be made between BFE and several similar system. NOTE: Most of the projects below are under active development. Thus some of the information may become out of date. If that is the case please feedback to https://github.com/bfenetworks/bfe/issues.","title":"Comparison to similar systems"},{"location":"introduction/comparison/#briefs-of-bfe-and-similar-systems","text":"The brief descriptions of several systems are as follows: BFE: BFE is an open-source layer 7 load balancer. Nginx : nginx is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server. Traefik : Traefik is a modern HTTP reverse proxy and load balancer. Envoy : Envoy is an open source edge and service proxy, designed for cloud-native applications.","title":"Briefs of BFE and similar systems"},{"location":"introduction/comparison/#features","text":"","title":"Features"},{"location":"introduction/comparison/#protocol-support","text":"All 4 systems support HTTPS and HTTP/2.","title":"Protocol Support"},{"location":"introduction/comparison/#health-check","text":"BFE and Nginx only support \"passive\" health check. Traefik only supports \"active\" health check. Envoy supports active, passive and hybrid health check. NOTE: Nginx Plus (i.e., the commercial version of nginx) supports \"active\" health check.","title":"Health Check"},{"location":"introduction/comparison/#instance-level-load-balancing","text":"All 4 systems support instance-level load balancing.","title":"Instance-Level Load Balancing"},{"location":"introduction/comparison/#cluster-level-load-balancing","text":"BFE, Traefik and Envoy support cluster-level load balancing. Nginx doesn't have this feature. NOTE: Envoy supports global and distributed load balancing.","title":"Cluster-Level Load Balancing"},{"location":"introduction/comparison/#forwarding-rules","text":"BFE provides Condition Expression . Nginx uses regular expression. Traefik supports traffic classification based on request content. But it can't support flexible AND or OR logic. Envoy supports rules based on Domain, Path and Header.","title":"Forwarding Rules"},{"location":"introduction/comparison/#extensibility","text":"","title":"Extensibility"},{"location":"introduction/comparison/#language","text":"Both BFE and Traefik are written in Golang Nginx is written in C and Lua. Envoy is written in C++.","title":"Language"},{"location":"introduction/comparison/#pluggable","text":"All 4 systems support pluggable architecture.","title":"Pluggable"},{"location":"introduction/comparison/#cost-for-new-features","text":"Due to difference in language, cost for new features is lower for BFE and Traefik, while cost is higher for Nginx and Envoy.","title":"Cost for New Features"},{"location":"introduction/comparison/#resilience-to-exception","text":"With recovery mechanism of Golang, Panic can be caught in BFE and Traefik. Both system are immune to sudden crash. While Nginx and Envoy can do nothing with wrong memory usage. Debugging such a bug is very time-consuming.","title":"Resilience to exception"},{"location":"introduction/comparison/#maintenance","text":"","title":"Maintenance"},{"location":"introduction/comparison/#observability","text":"BFE provides rich internal status for external observation. Nginx and Traefik provide less internal status. Envoy also provides quite a lot internal status.","title":"Observability"},{"location":"introduction/comparison/#hot-reload-of-configuration","text":"All 4 systems support hot-reload of configuration. In Nginx, process must be restarted for the configuration to take effect, while active connections are terminated. NOTE: Nginx Plus supports hot-reload of configuration, with no process restart.","title":"Hot-reload of configuration"},{"location":"introduction/forward_model/","text":"Traffic forwarding Step 1-2\uff1aDNS resolution The hostname to resolve is demo.example.com The translated IP address from DNS server is 6.6.6.6\uff08example\uff09 Step 3\uff1aThe client creates a TCP connection to 6.6.6.6 on port 80 and send a HTTP request. The IP diagrams are routed to PoP of IDC1\uff0cand processed by the Layer 4 Load Balancer. Step 4\uff1aThe Layer 4 Load Balancer forwards diagrams to BFE. Step 5\uff1aBFE receives an HTTP request and find a product for it: BFE uses the HTTP Host header to find the suitable product. In this scenario, assume demo.example.com belongs to product \"demo\". Step 6\uff1aBased on routing rules of product \"demo\", BFE finds a suitable cluster to process the request. In this scenario, assume the selected cluster is \"demo-static\". See Traffic routing Step 7-8\uff1aBased on balancing policies of product \"demo\", BFE selects a sub cluster and an instance within cluster \"demo-static\" In this scenario, assume the selected sub cluster is \"demo-static.idc1\" and the selected instance is \"demo-static-01.idc1\" . See Traffic balancing Step 9\uff1aThe request is forwarded to \"demo-static-01.idc1\". Step 10\uff1aBFE receives a response from \"demo-static-01.idc1\". Step 11-12\uff1aBFE forwards the response to the client via the Layer 4 Load Balancer.","title":"Traffic fowarding model"},{"location":"introduction/forward_model/#traffic-forwarding","text":"Step 1-2\uff1aDNS resolution The hostname to resolve is demo.example.com The translated IP address from DNS server is 6.6.6.6\uff08example\uff09 Step 3\uff1aThe client creates a TCP connection to 6.6.6.6 on port 80 and send a HTTP request. The IP diagrams are routed to PoP of IDC1\uff0cand processed by the Layer 4 Load Balancer. Step 4\uff1aThe Layer 4 Load Balancer forwards diagrams to BFE. Step 5\uff1aBFE receives an HTTP request and find a product for it: BFE uses the HTTP Host header to find the suitable product. In this scenario, assume demo.example.com belongs to product \"demo\". Step 6\uff1aBased on routing rules of product \"demo\", BFE finds a suitable cluster to process the request. In this scenario, assume the selected cluster is \"demo-static\". See Traffic routing Step 7-8\uff1aBased on balancing policies of product \"demo\", BFE selects a sub cluster and an instance within cluster \"demo-static\" In this scenario, assume the selected sub cluster is \"demo-static.idc1\" and the selected instance is \"demo-static-01.idc1\" . See Traffic balancing Step 9\uff1aThe request is forwarded to \"demo-static-01.idc1\". Step 10\uff1aBFE receives a response from \"demo-static-01.idc1\". Step 11-12\uff1aBFE forwards the response to the client via the Layer 4 Load Balancer.","title":"Traffic forwarding"},{"location":"introduction/getting_help/","text":"Getting help We are very interested in building a community around BFE. If you are interested in using it or need help, please feel free to contact us. Discussion about questions or requirements Welcome to submit issues at https://github.com/bfenetworks/bfe/issues/new/choose, we will reply you in working days Reporting security vulnerabilities Security issues and bugs should be reported privately to bfe-security@baidu.com. Please do not open issues for anything you think might have a security implication. Contributing to BFE We sincerely appreciate your contribution. Please visit https://github.com/bfenetworks/bfe and follow the workflow . Application for special cooperation Welcome to email us at bfe-osc@baidu.com","title":"Getting help"},{"location":"introduction/getting_help/#getting-help","text":"We are very interested in building a community around BFE. If you are interested in using it or need help, please feel free to contact us.","title":"Getting help"},{"location":"introduction/getting_help/#discussion-about-questions-or-requirements","text":"Welcome to submit issues at https://github.com/bfenetworks/bfe/issues/new/choose, we will reply you in working days","title":"Discussion about questions or requirements"},{"location":"introduction/getting_help/#reporting-security-vulnerabilities","text":"Security issues and bugs should be reported privately to bfe-security@baidu.com. Please do not open issues for anything you think might have a security implication.","title":"Reporting security vulnerabilities"},{"location":"introduction/getting_help/#contributing-to-bfe","text":"We sincerely appreciate your contribution. Please visit https://github.com/bfenetworks/bfe and follow the workflow .","title":"Contributing to BFE"},{"location":"introduction/getting_help/#application-for-special-cooperation","text":"Welcome to email us at bfe-osc@baidu.com","title":"Application for special cooperation"},{"location":"introduction/overview/","text":"Overview What is BFE BFE is an open-source layer 7 load balancer derived from proprietary Baidu Front End. Features and Advantages Written in Golang BFE is written in a memory safety language and immune to Buffer Overflow vulnerability; BFE recovers from the runtime panics and handles them appropriately without killing the BFE process; BFE runs on Linux, Windows, Mac OS and almost anything to which Go compiles. Flexible plugin framework BFE has a builtin plugin framework that makes it possible to develop new features rapidly by writing plugins. Multi-tenancy architecture BFE is designed to provide every tenant a dedicated share of the instance. Each tenant\u2019s configuration is isolated and remains invisible to other tenants. Multiple protocols supported BFE supports HTTP, HTTPS, SPDY, HTTP2, WebSocket, TLS, gRPC, FastCGI, etc. Future support is planned for HTTP/3. Content based routing BFE provides an advanced domain-specific language to describe routing rules which are easy to understand and maintain. Advanced load balancing BFE supports global load balancing and distributed load balancing for zone aware balancing, zone level failure resilience, overload protection etc. A rich set of builtin plugins BFE provides a rich set of plugins for traffic management, security, observability, etc. Best-in-class observability BFE includes detailed built-in metrics for all subsystems. BFE writes various logs(server log/access log/TLS key log) for trouble shooting, data analysis and visualization. BFE also supports distributed tracing. Easily integrated with ecosystem projects BFE is easily integrated with mainstream layer 4 load balancing solution, and other ecosystem projects(e.g. Kubernetes\u3001Prometheus\u3001Jaeger\u3001Fluentd etc). Components BFE system consists of components in both data plane and control plane: Data plane\uff1a BFE Server\uff1aBFE forward engine. BFE Server performs content based routing, load balancing and forwards the traffic to backend servers. Control plane\uff1a BFE API Server \uff1aprovides API and handles update, storage and generation of BFE config BFE Conf Agent \uff1acomponent for loading config, fetches latest config from API-Server and triggers BFE Server to reload it BFE Dashboard \uff1aprovides a graphic interface for user to manage and view major config of BFE Architecture overview This diagram illustrates the architecture of BFE and some of its ecosystem components: Data plane The incoming user traffic reaches the BFE server through the Layer 4 load balancing facilities. During the processing of user traffic, BFE routes each HTTP request to a target cluster based on request content (URI, header, cookie, etc), and then choose the best backend server instance from the target cluster based on the load balancing policy. For more details about traffic forwarding process, see Traffic forwarding model . Control plane The control plane is responsible for management and configuration of BFE system, which can be maintained via BFE Dashboard or RESTful API. BFE Conf Agent will trigger BFE Server to load the latest configuration.","title":"Overview"},{"location":"introduction/overview/#overview","text":"","title":"Overview"},{"location":"introduction/overview/#what-is-bfe","text":"BFE is an open-source layer 7 load balancer derived from proprietary Baidu Front End.","title":"What is BFE"},{"location":"introduction/overview/#features-and-advantages","text":"Written in Golang BFE is written in a memory safety language and immune to Buffer Overflow vulnerability; BFE recovers from the runtime panics and handles them appropriately without killing the BFE process; BFE runs on Linux, Windows, Mac OS and almost anything to which Go compiles. Flexible plugin framework BFE has a builtin plugin framework that makes it possible to develop new features rapidly by writing plugins. Multi-tenancy architecture BFE is designed to provide every tenant a dedicated share of the instance. Each tenant\u2019s configuration is isolated and remains invisible to other tenants. Multiple protocols supported BFE supports HTTP, HTTPS, SPDY, HTTP2, WebSocket, TLS, gRPC, FastCGI, etc. Future support is planned for HTTP/3. Content based routing BFE provides an advanced domain-specific language to describe routing rules which are easy to understand and maintain. Advanced load balancing BFE supports global load balancing and distributed load balancing for zone aware balancing, zone level failure resilience, overload protection etc. A rich set of builtin plugins BFE provides a rich set of plugins for traffic management, security, observability, etc. Best-in-class observability BFE includes detailed built-in metrics for all subsystems. BFE writes various logs(server log/access log/TLS key log) for trouble shooting, data analysis and visualization. BFE also supports distributed tracing. Easily integrated with ecosystem projects BFE is easily integrated with mainstream layer 4 load balancing solution, and other ecosystem projects(e.g. Kubernetes\u3001Prometheus\u3001Jaeger\u3001Fluentd etc).","title":"Features and Advantages"},{"location":"introduction/overview/#components","text":"BFE system consists of components in both data plane and control plane: Data plane\uff1a BFE Server\uff1aBFE forward engine. BFE Server performs content based routing, load balancing and forwards the traffic to backend servers. Control plane\uff1a BFE API Server \uff1aprovides API and handles update, storage and generation of BFE config BFE Conf Agent \uff1acomponent for loading config, fetches latest config from API-Server and triggers BFE Server to reload it BFE Dashboard \uff1aprovides a graphic interface for user to manage and view major config of BFE","title":"Components"},{"location":"introduction/overview/#architecture-overview","text":"This diagram illustrates the architecture of BFE and some of its ecosystem components:","title":"Architecture overview"},{"location":"introduction/overview/#data-plane","text":"The incoming user traffic reaches the BFE server through the Layer 4 load balancing facilities. During the processing of user traffic, BFE routes each HTTP request to a target cluster based on request content (URI, header, cookie, etc), and then choose the best backend server instance from the target cluster based on the load balancing policy. For more details about traffic forwarding process, see Traffic forwarding model .","title":"Data plane"},{"location":"introduction/overview/#control-plane","text":"The control plane is responsible for management and configuration of BFE system, which can be maintained via BFE Dashboard or RESTful API. BFE Conf Agent will trigger BFE Server to load the latest configuration.","title":"Control plane"},{"location":"introduction/route/","text":"Traffic Routing Overview In BFE forwarding model , after \"product name\" for one request is determined, the destination cluster should be specified. BFE provides a Forwarding Table for each product. For each request, the forwarding table for the determined product is searched, and destination cluster is specified. Composition of Forwarding Table A Forwarding Table is composed of two parts: Basic Rule Table , consists of \"Basic Rules\". BFE searches \"host\" and/or \"path\" conditions to match a Basic Rule. Advanced Rule Table , consists of \"Advanced Rules\". It's searched in listed order (from up to down). Various request contents (including host, path, header, cookie, method, etc) can be used in search to match conditions in advanced rules. A Default Rule should be configured in Advanced Rule Table, as the last resort. Basic Rule Table uses tree search and can be searched fast, even with large amount (thousands, for example) of rules configured. Advanced Rule Table has more powerful condition description capability, but its search performance may degrades when number of rules is large ( >100 rules, for example). Steps of search BFE will search in Basic Rule Table first, then Advanced Rule Table, to specify the destination cluster for a request. If required, destination cluster of a Basic Rule can be set to \"ADVANCED_MODE\". If such a rule is hit, BFE will continue to search in the Advanced Rule Table for this request. Detailed steps of search are described as below. Basic Rule Table Introduction Basic Rule Table consists of several \"Basic Rules\". Each Basic Rule includes one or both of two conditions: Host and Path. Destination Cluster is specified by a cluster name, or keyword \"ADVANCED_MODE\" which indicates to continue searching in Advanced Rule Table. There's no order among Basic Rules. The matched rule with most specific condition will take precedence. See details in \"Search in Basic Rule Table\". Conditions of Basic Rule Table For each Basic Rule, at least one of two conditions (Host and Path) should be configured. Host condition description's syntax is as follow: Use \".\" to split labels within a host name Support \"Exact Match\", \"Wildcard Match\", \"Any Match\" Exact Match: An exact hostname (for example \"www.test1.com\") Wildcard Match: A host name with first label set to \"*\". The \"*\" can only appear once in a hostname and only covers a single label (for example \"*.test1.com\"). Examples of invalid host condition description include \"*est.com\" and \"*.*.com\". Any Match: A special Wildcard Match. Standalone \"*\" can match any host. (A standalone \"*\" here can cover a hostname with multiple labels, which is different from Wildcard Match.) Host condition of a Basic Rule supports multiple host condition descriptions (for example: \"www.test1.com,\",\"*.example.com\"). Examples: Host Condition Host in a request Match\uff1f * www.test1.com Match *.test1.com host.test1.com Match *.test1.com vip.host.test1.com No Match, \"*\" only covers a single label *.test1.com example.com No Match *.test1.com test1.com No Match Path condition description's syntax is as follow: Use \"/\" to split elements within a path Start with \"/\", except for a standalone \"*\". Support \"Exact Match\", \"Prefix Match\", \"Any Match\" Exact Match: An exact path (for example \"/foo\") Prefix Match: A path prefix followed by a \"*\" means it's a prefix match. It compares element by element from the left. The \"*\" can only appear once, and can covers one or multiple consecutive path elements. A standalone \"*\" is also a prefix match. Examples: both /* and /foo/* can match path /foo/bar /foo/* is equivalent to /foo* /foo/b* can not match /foo/bar /*/* is not a valid path condition description Path condition of a Basic Rule supports multiple path condition descriptions (for example: \"/foo/bar\", \"/foo/cell/*\"). Examples: Path Condition Path in the request Match? * Any path Match / Empty No match / /a No match /* Empty No match /* / Match, * can match null /* /a/ Match, ignores trailing slash /a/b/* (equivalent to /a/b*) /a/b/c Match /a/b/* (equivalent to /a/b*) /a/b/c/d Match, * covers multiple consecutive path elements /a/b/* (equivalent to /a/b*) /a/b Match, ignores trailing slash and * can match null /a/b/* (equivalent to /a/b*) /a/c No match /a/b/* (equivalent to /a/b*) /a/ No match /a/b* /a/bacon No match Search in Basic Rule Table When search in Basic Rule Table, BFE will search the host condition first, then search the path condition in rules that match the host. Detailed steps of search in Basic Rule Table are described below: First, search host condition using Exact Match For rules that match (may be one or multiple rules), search path condition of them; If a rule matches the path, the rule is hit; If no rule matches path, then search in Basic Rule Table ends and BFE will continue to search in Advanced Rule Table. If no rule matches as host Exact Match, search host condition using Wildcard Match For rules that match (may be one or multiple rules), search path condition of them; If a rule matches the path, the rule is hit; If no rule matches path, then search in Basic Rule Table ends and BFE will continue to search in Advanced Rule Table. If no rule matches as host Wildcard Match, search host condition using Any Match For rules that match (may be one or multiple rules), search path condition of them; If a rule matches the path, the rule is hit; If no rule matches path, then search in Basic Rule Table ends and BFE will continue to search in Advanced Rule Table. Search in Basic Rule Table ends. If no rule matches, BFE will continue to search in Advanced Rule Table. Among above steps, when searching path condition in rules that has matches the host: Search path condition using Exact Match If no rule matches as Exact Match, search path condition using Prefix Match . Precedence will be given to the longest matching path. So if more than one rule matches the path in the request, the rule with most matching path elements is hit. Examples Four Basic Rules are configured, as below: Rule1\uff1a host condition \uff1a*.test1.com\uff0c path condition \uff1aempty\uff0c Destination Cluster \uff1aStaticCluster Rule2\uff1a host condition \uff1a*.b.test1.com\uff0c path condition \uff1a/interface/* \uff0c Destination Cluster \uff1aPhpCluster Rule3\uff1a host condition \uff1a*.b.test1.com\uff0c path condition \uff1a/*\uff0c Destination Cluster \uff1aStaticCluster Rule4\uff1a host condition \uff1awww.test1.com\uff0c path condition \uff1a/interface/d\uff0c Destination Cluster \uff1aPhpCluster A request arrives, with its URL=\"vip.b.test1.com/interface/d\" BFE searches host condition first\uff1a 1. Exact Match for host, no match 2. Wildcard Match for host, both Rule2 and Rule3 match host (vip.b.test1.com) of the request (Notice, Rule1 does not match this host, as wildcard \"*\" only covers a single label) Then BFE searches path condition\uff1a 1. Exact Match for path, no match 2. Prefix Match for path, both Rule2 and Rule3 match the path (/interface/d) of the request. And Rule2 has precedence as it has more matching path elements than Rule3. Search ends and Rule2 is hit. Request will be forwarded to cluster PhpCluster as specified in Rule2. Advanced Rule Table Advanced Rule Table consists of one or more \"Advanced Rules\" which have an order. Condition of a Advanced Rule is described using a pseudocode description called \" Condition Expression \". Destination Cluster is specified by a cluster name. When searching in Advanced Rule Table, the rules are searched from up to down, in listed order: Try to match the condition of the rule with information in the HTTP request (such as host\uff0cpath\uff0cquery\uff0ccookie\uff0cmethod). If it matches, the rule is hit. If a rule is hit, the search stops. A Default Rule must be configured in the Advanced Rule Table. If no other rule matches a request, the Default Rule is hit. Examples A product \"demo\" has several clusters: Demo-A, Demo-B, Demo-C, Demo-D\uff0cDemo-E The expected route is as below: Requests with host=www.a.com and path=\"/a/*\" (except \"/a/b\"), forwarded to Demo-A Requests with host=www.a.com and path=\"/a/b\", forwarded to Demo-B Other requests with host=*.a.com, forwarded to Demo-C Requests with host=www.c.com, forwarded to Demo-D For Demo-D, another cluster Demo-D1 is created for a canary release. For requests with host=www.c.com and cookie \"deviceid\" with its value starting with \"x\", forwarded to cluster Demo-D1 All the other requests, forward to Demo-E In this case, the Basic Rule Table can be configured as below: Host condition Path condition Destination Cluster www.a.com /a/* Demo-A www.a.com /a/b Demo-B *.a.com * Demo-C www.c.com * ADVANCED_MODE There's no order for Basic Rules. Refer to \"Search in Basic Rule Table\" above. As cookie information is need for the canary release of applications on Demo-D, the rule uses ADVANCED_MODE to do further search in Advanced Rule Table for related requests. If canary release is not required, the Destination Cluster of this rule can be set to Demo-D. The Advanced Rule Table can be configured as below: Conditions Destination Cluster req_host_in (\"www.c.com\") && req_cookie_value_prefix_in (\"deviceid\", \"x\", false) Demo-D1 req_host_in (\"www.c.com\") Demo-D default Demo-E Advanced Rules are searched from up to down. Rule for Demo-D1 should be placed before rule for Demo-D. Default Rule is configured in Advanced Rule Table. Requests that do not hit any other rule will be forwarded to Demo-E. For above configuration, configuration file (/conf/server_data_conf/route_rule.conf) is as follows: { \"Version\": \"1.0\", \"BasicRule\": { \"demo\": [ { \"Hostname\": [\"www.a.com\"], \"Path\": [\"/a/*\"], \"ClusterName\": \"Demo-A\" }, { \"Hostname\": [\"www.a.com\"], \"Path\": [\"/a/b\"], \"ClusterName\": \"Demo-B\" }, { \"Hostname\": [\"*.a.com\"], \"Path\": \"*\", \"ClusterName\": \"Demo-C\" }, { \"Hostname\": [\"www.c.com\"], \"Path\": \"*\", \"ClusterName\": \"ADVANCED_MODE\" } ] }, \"ProductRule\": { \"demo\": [ { \"Cond\": \" req_host_in(\\\"www.c.com\\\") && req_cookie_value_prefix_in(\\\"deviceid\\\", \\\"x\\\", false)\", \"ClusterName\": \"Demo-D1\" }, { \"Cond\": \" req_host_in(\\\"www.c.com\\\")\", \"ClusterName\": \"Demo-D\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"Demo-E\" } ] } }","title":"Traffic routing"},{"location":"introduction/route/#traffic-routing","text":"","title":"Traffic Routing"},{"location":"introduction/route/#overview","text":"In BFE forwarding model , after \"product name\" for one request is determined, the destination cluster should be specified. BFE provides a Forwarding Table for each product. For each request, the forwarding table for the determined product is searched, and destination cluster is specified.","title":"Overview"},{"location":"introduction/route/#composition-of-forwarding-table","text":"A Forwarding Table is composed of two parts: Basic Rule Table , consists of \"Basic Rules\". BFE searches \"host\" and/or \"path\" conditions to match a Basic Rule. Advanced Rule Table , consists of \"Advanced Rules\". It's searched in listed order (from up to down). Various request contents (including host, path, header, cookie, method, etc) can be used in search to match conditions in advanced rules. A Default Rule should be configured in Advanced Rule Table, as the last resort. Basic Rule Table uses tree search and can be searched fast, even with large amount (thousands, for example) of rules configured. Advanced Rule Table has more powerful condition description capability, but its search performance may degrades when number of rules is large ( >100 rules, for example).","title":"Composition of Forwarding Table"},{"location":"introduction/route/#steps-of-search","text":"BFE will search in Basic Rule Table first, then Advanced Rule Table, to specify the destination cluster for a request. If required, destination cluster of a Basic Rule can be set to \"ADVANCED_MODE\". If such a rule is hit, BFE will continue to search in the Advanced Rule Table for this request. Detailed steps of search are described as below.","title":"Steps of search"},{"location":"introduction/route/#basic-rule-table","text":"","title":"Basic Rule Table"},{"location":"introduction/route/#introduction","text":"Basic Rule Table consists of several \"Basic Rules\". Each Basic Rule includes one or both of two conditions: Host and Path. Destination Cluster is specified by a cluster name, or keyword \"ADVANCED_MODE\" which indicates to continue searching in Advanced Rule Table. There's no order among Basic Rules. The matched rule with most specific condition will take precedence. See details in \"Search in Basic Rule Table\".","title":"Introduction"},{"location":"introduction/route/#conditions-of-basic-rule-table","text":"For each Basic Rule, at least one of two conditions (Host and Path) should be configured. Host condition description's syntax is as follow: Use \".\" to split labels within a host name Support \"Exact Match\", \"Wildcard Match\", \"Any Match\" Exact Match: An exact hostname (for example \"www.test1.com\") Wildcard Match: A host name with first label set to \"*\". The \"*\" can only appear once in a hostname and only covers a single label (for example \"*.test1.com\"). Examples of invalid host condition description include \"*est.com\" and \"*.*.com\". Any Match: A special Wildcard Match. Standalone \"*\" can match any host. (A standalone \"*\" here can cover a hostname with multiple labels, which is different from Wildcard Match.) Host condition of a Basic Rule supports multiple host condition descriptions (for example: \"www.test1.com,\",\"*.example.com\"). Examples: Host Condition Host in a request Match\uff1f * www.test1.com Match *.test1.com host.test1.com Match *.test1.com vip.host.test1.com No Match, \"*\" only covers a single label *.test1.com example.com No Match *.test1.com test1.com No Match Path condition description's syntax is as follow: Use \"/\" to split elements within a path Start with \"/\", except for a standalone \"*\". Support \"Exact Match\", \"Prefix Match\", \"Any Match\" Exact Match: An exact path (for example \"/foo\") Prefix Match: A path prefix followed by a \"*\" means it's a prefix match. It compares element by element from the left. The \"*\" can only appear once, and can covers one or multiple consecutive path elements. A standalone \"*\" is also a prefix match. Examples: both /* and /foo/* can match path /foo/bar /foo/* is equivalent to /foo* /foo/b* can not match /foo/bar /*/* is not a valid path condition description Path condition of a Basic Rule supports multiple path condition descriptions (for example: \"/foo/bar\", \"/foo/cell/*\"). Examples: Path Condition Path in the request Match? * Any path Match / Empty No match / /a No match /* Empty No match /* / Match, * can match null /* /a/ Match, ignores trailing slash /a/b/* (equivalent to /a/b*) /a/b/c Match /a/b/* (equivalent to /a/b*) /a/b/c/d Match, * covers multiple consecutive path elements /a/b/* (equivalent to /a/b*) /a/b Match, ignores trailing slash and * can match null /a/b/* (equivalent to /a/b*) /a/c No match /a/b/* (equivalent to /a/b*) /a/ No match /a/b* /a/bacon No match","title":"Conditions of Basic Rule Table"},{"location":"introduction/route/#search-in-basic-rule-table","text":"When search in Basic Rule Table, BFE will search the host condition first, then search the path condition in rules that match the host. Detailed steps of search in Basic Rule Table are described below: First, search host condition using Exact Match For rules that match (may be one or multiple rules), search path condition of them; If a rule matches the path, the rule is hit; If no rule matches path, then search in Basic Rule Table ends and BFE will continue to search in Advanced Rule Table. If no rule matches as host Exact Match, search host condition using Wildcard Match For rules that match (may be one or multiple rules), search path condition of them; If a rule matches the path, the rule is hit; If no rule matches path, then search in Basic Rule Table ends and BFE will continue to search in Advanced Rule Table. If no rule matches as host Wildcard Match, search host condition using Any Match For rules that match (may be one or multiple rules), search path condition of them; If a rule matches the path, the rule is hit; If no rule matches path, then search in Basic Rule Table ends and BFE will continue to search in Advanced Rule Table. Search in Basic Rule Table ends. If no rule matches, BFE will continue to search in Advanced Rule Table. Among above steps, when searching path condition in rules that has matches the host: Search path condition using Exact Match If no rule matches as Exact Match, search path condition using Prefix Match . Precedence will be given to the longest matching path. So if more than one rule matches the path in the request, the rule with most matching path elements is hit.","title":"Search in Basic Rule Table"},{"location":"introduction/route/#examples","text":"Four Basic Rules are configured, as below: Rule1\uff1a host condition \uff1a*.test1.com\uff0c path condition \uff1aempty\uff0c Destination Cluster \uff1aStaticCluster Rule2\uff1a host condition \uff1a*.b.test1.com\uff0c path condition \uff1a/interface/* \uff0c Destination Cluster \uff1aPhpCluster Rule3\uff1a host condition \uff1a*.b.test1.com\uff0c path condition \uff1a/*\uff0c Destination Cluster \uff1aStaticCluster Rule4\uff1a host condition \uff1awww.test1.com\uff0c path condition \uff1a/interface/d\uff0c Destination Cluster \uff1aPhpCluster A request arrives, with its URL=\"vip.b.test1.com/interface/d\" BFE searches host condition first\uff1a 1. Exact Match for host, no match 2. Wildcard Match for host, both Rule2 and Rule3 match host (vip.b.test1.com) of the request (Notice, Rule1 does not match this host, as wildcard \"*\" only covers a single label) Then BFE searches path condition\uff1a 1. Exact Match for path, no match 2. Prefix Match for path, both Rule2 and Rule3 match the path (/interface/d) of the request. And Rule2 has precedence as it has more matching path elements than Rule3. Search ends and Rule2 is hit. Request will be forwarded to cluster PhpCluster as specified in Rule2.","title":"Examples"},{"location":"introduction/route/#advanced-rule-table","text":"Advanced Rule Table consists of one or more \"Advanced Rules\" which have an order. Condition of a Advanced Rule is described using a pseudocode description called \" Condition Expression \". Destination Cluster is specified by a cluster name. When searching in Advanced Rule Table, the rules are searched from up to down, in listed order: Try to match the condition of the rule with information in the HTTP request (such as host\uff0cpath\uff0cquery\uff0ccookie\uff0cmethod). If it matches, the rule is hit. If a rule is hit, the search stops. A Default Rule must be configured in the Advanced Rule Table. If no other rule matches a request, the Default Rule is hit.","title":"Advanced Rule Table"},{"location":"introduction/route/#examples_1","text":"A product \"demo\" has several clusters: Demo-A, Demo-B, Demo-C, Demo-D\uff0cDemo-E The expected route is as below: Requests with host=www.a.com and path=\"/a/*\" (except \"/a/b\"), forwarded to Demo-A Requests with host=www.a.com and path=\"/a/b\", forwarded to Demo-B Other requests with host=*.a.com, forwarded to Demo-C Requests with host=www.c.com, forwarded to Demo-D For Demo-D, another cluster Demo-D1 is created for a canary release. For requests with host=www.c.com and cookie \"deviceid\" with its value starting with \"x\", forwarded to cluster Demo-D1 All the other requests, forward to Demo-E In this case, the Basic Rule Table can be configured as below: Host condition Path condition Destination Cluster www.a.com /a/* Demo-A www.a.com /a/b Demo-B *.a.com * Demo-C www.c.com * ADVANCED_MODE There's no order for Basic Rules. Refer to \"Search in Basic Rule Table\" above. As cookie information is need for the canary release of applications on Demo-D, the rule uses ADVANCED_MODE to do further search in Advanced Rule Table for related requests. If canary release is not required, the Destination Cluster of this rule can be set to Demo-D. The Advanced Rule Table can be configured as below: Conditions Destination Cluster req_host_in (\"www.c.com\") && req_cookie_value_prefix_in (\"deviceid\", \"x\", false) Demo-D1 req_host_in (\"www.c.com\") Demo-D default Demo-E Advanced Rules are searched from up to down. Rule for Demo-D1 should be placed before rule for Demo-D. Default Rule is configured in Advanced Rule Table. Requests that do not hit any other rule will be forwarded to Demo-E. For above configuration, configuration file (/conf/server_data_conf/route_rule.conf) is as follows: { \"Version\": \"1.0\", \"BasicRule\": { \"demo\": [ { \"Hostname\": [\"www.a.com\"], \"Path\": [\"/a/*\"], \"ClusterName\": \"Demo-A\" }, { \"Hostname\": [\"www.a.com\"], \"Path\": [\"/a/b\"], \"ClusterName\": \"Demo-B\" }, { \"Hostname\": [\"*.a.com\"], \"Path\": \"*\", \"ClusterName\": \"Demo-C\" }, { \"Hostname\": [\"www.c.com\"], \"Path\": \"*\", \"ClusterName\": \"ADVANCED_MODE\" } ] }, \"ProductRule\": { \"demo\": [ { \"Cond\": \" req_host_in(\\\"www.c.com\\\") && req_cookie_value_prefix_in(\\\"deviceid\\\", \\\"x\\\", false)\", \"ClusterName\": \"Demo-D1\" }, { \"Cond\": \" req_host_in(\\\"www.c.com\\\")\", \"ClusterName\": \"Demo-D\" }, { \"Cond\": \"default_t()\", \"ClusterName\": \"Demo-E\" } ] } }","title":"Examples"},{"location":"introduction/terminology/","text":"Terminology Product The product equals \"tenant\" in BFE, which has its own configuration, such as forwarding policies, permission, etc. Cluster A Cluster means a set of backend servers which provide the same functionality. Multiple clusters can be defined within a product. Usually\uff0ca cluster may span multiple IDC. Sub Cluster A cluster may be composed of multiple sub clusters conceptually. Usually, backend servers within the same IDC are defined as a sub cluster. Instance A sub cluster contains multiple instances (i.e. backend servers). Each instance is identified by IP address and port.","title":"Terminology"},{"location":"introduction/terminology/#terminology","text":"","title":"Terminology"},{"location":"introduction/terminology/#product","text":"The product equals \"tenant\" in BFE, which has its own configuration, such as forwarding policies, permission, etc.","title":"Product"},{"location":"introduction/terminology/#cluster","text":"A Cluster means a set of backend servers which provide the same functionality. Multiple clusters can be defined within a product. Usually\uff0ca cluster may span multiple IDC.","title":"Cluster"},{"location":"introduction/terminology/#sub-cluster","text":"A cluster may be composed of multiple sub clusters conceptually. Usually, backend servers within the same IDC are defined as a sub cluster.","title":"Sub Cluster"},{"location":"introduction/terminology/#instance","text":"A sub cluster contains multiple instances (i.e. backend servers). Each instance is identified by IP address and port.","title":"Instance"},{"location":"modules/modules/","text":"BFE Module mod_access mod_auth_basic mod_auth_jwt mod_block mod_compress mod_doh mod_errors mod_geo mod_header mod_http_code mod_key_log mod_logid mod_prison mod_redirect mod_rewrite mod_static mod_tag mod_trace mod_trust_clientip mod_userid","title":"BFE Module"},{"location":"modules/modules/#bfe-module","text":"mod_access mod_auth_basic mod_auth_jwt mod_block mod_compress mod_doh mod_errors mod_geo mod_header mod_http_code mod_key_log mod_logid mod_prison mod_redirect mod_rewrite mod_static mod_tag mod_trace mod_trust_clientip mod_userid","title":"BFE Module"},{"location":"modules/mod_access/mod_access/","text":"mod_access Introduction mod_access writes request logs and session logs in the specified format. Module Configuration Description conf/mod_access/mod_access.conf Config Item Description Log.LogFile String Set file path of log for saving to a single file without rotation Log.LogPrefix String Filename prefix for log Log.LogDir String Directory of log files Log.RotateWhen String Interval to rotate log file Log.BackupCount Integer Max number of rotated log files Template.RequestTemplate String Template of request log Template.SessionTemplate String Template of session log Example Save log to a directory [Log] # filename prefix for log LogPrefix = access # access log directory LogDir = ../log # log rotate interval: M/H/D/MIDNIGHT/NEXTHOUR RotateWhen = NEXTHOUR # max number of rotated log files BackupCount = 2 [Template] # template of request log RequestTemplate = \"REQUEST_LOG $time clientip: $remote_addr serverip: $server_addr host: $host product: $product user_agent: ${User-Agent}req_header status: $status_code error: $error\" # template of session log SessionTemplate = \"SESSION_LOG $time clientip: $ses_clientip start_time: $ses_start_time end_time: $ses_end_time overhead: $ses_overhead read_total: $ses_read_total write_total: $ses_write_total keepalive_num: $ses_keepalive_num error: $ses_error\" Save log to a stdout [Log] # file path for log LogFile = /dev/stdout [Template] # template of request log RequestTemplate = \"REQUEST_LOG $time clientip: $remote_addr serverip: $server_addr host: $host product: $product user_agent: ${User-Agent}req_header status: $status_code error: $error\" # template of session log SessionTemplate = \"SESSION_LOG $time clientip: $ses_clientip start_time: $ses_start_time end_time: $ses_end_time overhead: $ses_overhead read_total: $ses_read_total write_total: $ses_write_total keepalive_num: $ses_keepalive_num error: $ses_error\"","title":"mod_access"},{"location":"modules/mod_access/mod_access/#mod_access","text":"","title":"mod_access"},{"location":"modules/mod_access/mod_access/#introduction","text":"mod_access writes request logs and session logs in the specified format.","title":"Introduction"},{"location":"modules/mod_access/mod_access/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_access/mod_access/#description","text":"conf/mod_access/mod_access.conf Config Item Description Log.LogFile String Set file path of log for saving to a single file without rotation Log.LogPrefix String Filename prefix for log Log.LogDir String Directory of log files Log.RotateWhen String Interval to rotate log file Log.BackupCount Integer Max number of rotated log files Template.RequestTemplate String Template of request log Template.SessionTemplate String Template of session log","title":"Description"},{"location":"modules/mod_access/mod_access/#example","text":"","title":"Example"},{"location":"modules/mod_access/mod_access/#save-log-to-a-directory","text":"[Log] # filename prefix for log LogPrefix = access # access log directory LogDir = ../log # log rotate interval: M/H/D/MIDNIGHT/NEXTHOUR RotateWhen = NEXTHOUR # max number of rotated log files BackupCount = 2 [Template] # template of request log RequestTemplate = \"REQUEST_LOG $time clientip: $remote_addr serverip: $server_addr host: $host product: $product user_agent: ${User-Agent}req_header status: $status_code error: $error\" # template of session log SessionTemplate = \"SESSION_LOG $time clientip: $ses_clientip start_time: $ses_start_time end_time: $ses_end_time overhead: $ses_overhead read_total: $ses_read_total write_total: $ses_write_total keepalive_num: $ses_keepalive_num error: $ses_error\"","title":"Save log to a directory"},{"location":"modules/mod_access/mod_access/#save-log-to-a-stdout","text":"[Log] # file path for log LogFile = /dev/stdout [Template] # template of request log RequestTemplate = \"REQUEST_LOG $time clientip: $remote_addr serverip: $server_addr host: $host product: $product user_agent: ${User-Agent}req_header status: $status_code error: $error\" # template of session log SessionTemplate = \"SESSION_LOG $time clientip: $ses_clientip start_time: $ses_start_time end_time: $ses_end_time overhead: $ses_overhead read_total: $ses_read_total write_total: $ses_write_total keepalive_num: $ses_keepalive_num error: $ses_error\"","title":"Save log to a stdout"},{"location":"modules/mod_auth_basic/mod_auth_basic/","text":"mod_auth_basic Introduction mod_auth_basic implements the HTTP basic authentication. Module Configuration Description conf/mod_auth_basic/mod_auth_basic.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Whether enable debug log Default False Example [Basic] DataPath = mod_auth_basic/auth_basic_rule.data [Log] OpenDebug = false Rule Configuration Description Config Item Description Version String Version of config file Config Object Auth rules for each product Config{k} String Product name Config{v} Object A list of auth rules Config{v}[] Object A auth rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].UserFile String Path of password configuration Config{v}[].Realm String Realm, ie. protection space Default \"Restricted\" Description about password configuration: The password configuration can be generated using htpasswd or openssl Generated using openssl: printf \"user1:$(openssl passwd -apr1 123456)\\n\" >> ./userfile Password configuration example # user1, 123456 user1:$apr1$mI7SilJz$CWwYJyYKbhVDNl26sdUSh/ user2:{SHA}fEqNCco3Yq9h5ZUglD3CZJT4lBs=:user2, 123456 Example { \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"UserFile\": \"../conf/mod_auth_basic/userfile\", \"Realm\": \"example_product\" } ] }, Version\": \"20190101000000\" }","title":"mod_auth_basic"},{"location":"modules/mod_auth_basic/mod_auth_basic/#mod_auth_basic","text":"","title":"mod_auth_basic"},{"location":"modules/mod_auth_basic/mod_auth_basic/#introduction","text":"mod_auth_basic implements the HTTP basic authentication.","title":"Introduction"},{"location":"modules/mod_auth_basic/mod_auth_basic/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_auth_basic/mod_auth_basic/#description","text":"conf/mod_auth_basic/mod_auth_basic.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Whether enable debug log Default False","title":"Description"},{"location":"modules/mod_auth_basic/mod_auth_basic/#example","text":"[Basic] DataPath = mod_auth_basic/auth_basic_rule.data [Log] OpenDebug = false","title":"Example"},{"location":"modules/mod_auth_basic/mod_auth_basic/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_auth_basic/mod_auth_basic/#description_1","text":"Config Item Description Version String Version of config file Config Object Auth rules for each product Config{k} String Product name Config{v} Object A list of auth rules Config{v}[] Object A auth rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].UserFile String Path of password configuration Config{v}[].Realm String Realm, ie. protection space Default \"Restricted\" Description about password configuration: The password configuration can be generated using htpasswd or openssl Generated using openssl: printf \"user1:$(openssl passwd -apr1 123456)\\n\" >> ./userfile Password configuration example # user1, 123456 user1:$apr1$mI7SilJz$CWwYJyYKbhVDNl26sdUSh/ user2:{SHA}fEqNCco3Yq9h5ZUglD3CZJT4lBs=:user2, 123456","title":"Description"},{"location":"modules/mod_auth_basic/mod_auth_basic/#example_1","text":"{ \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"UserFile\": \"../conf/mod_auth_basic/userfile\", \"Realm\": \"example_product\" } ] }, Version\": \"20190101000000\" }","title":"Example"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/","text":"mod_auth_jwt Introduction mod_auth_jwt implements JWT( JSON Web Token ). Module Configuration Description conf/mod_auth_jwt/mod_auth_jwt.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module Example [Basic] DataPath = mod_auth_jwt/auth_jwt_rule.data Rule Configuration Description conf/mod_auth_jwt/auth_jwt_rule.data Config Item Description Version String Version of config file Config Struct JWT rules for each product Config{k} String Product name Config{v} Object A ordered list of rules Config{v}[] Object A rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].KeyFile String Path of JWK configuration Config{v}[].Realm String Realm, ie. protection space Default \"Restricted\" Description about JWK configuration Key file must follow the format described by the JSON Web Key Specification Generate key: echo -n jwt_example | base64 | tr '+/' '-_' | tr -d '=' key file configuration example [ { \"k\": \"and0X2V4YW1wbGU\", \"kty\": \"oct\", \"kid\": \"0001\" } ] Example { \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"KeyFile\": \"mod_auth_jwt/key_file\", \"Realm\": \"Restricted\" } ] } }","title":"mod_auth_jwt"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#mod_auth_jwt","text":"","title":"mod_auth_jwt"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#introduction","text":"mod_auth_jwt implements JWT( JSON Web Token ).","title":"Introduction"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#description","text":"conf/mod_auth_jwt/mod_auth_jwt.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module","title":"Description"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#example","text":"[Basic] DataPath = mod_auth_jwt/auth_jwt_rule.data","title":"Example"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#description_1","text":"conf/mod_auth_jwt/auth_jwt_rule.data Config Item Description Version String Version of config file Config Struct JWT rules for each product Config{k} String Product name Config{v} Object A ordered list of rules Config{v}[] Object A rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].KeyFile String Path of JWK configuration Config{v}[].Realm String Realm, ie. protection space Default \"Restricted\" Description about JWK configuration Key file must follow the format described by the JSON Web Key Specification Generate key: echo -n jwt_example | base64 | tr '+/' '-_' | tr -d '=' key file configuration example [ { \"k\": \"and0X2V4YW1wbGU\", \"kty\": \"oct\", \"kid\": \"0001\" } ]","title":"Description"},{"location":"modules/mod_auth_jwt/mod_auth_jwt/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"KeyFile\": \"mod_auth_jwt/key_file\", \"Realm\": \"Restricted\" } ] } }","title":"Example"},{"location":"modules/mod_auth_request/mod_auth_request/","text":"mod_auth_request Introduction mod_auth_request supports sending request to the specified service for authentication. Module Configuration Description conf/mod_auth_request/mod_auth_request.conf Config Item Description Basic.DataPath String Path of rule configuration Basic.AuthAddress String Address of authentication service Basic.AuthTimeout Number Timeout for authentication Log.OpenDebug Boolean Whether enable debug log Default False Example [Basic] DataPath = mod_auth_request/auth_request_rule.data AuthAddress = http://127.0.0.1 AuthTimeout = 100 [Log] OpenDebug = false Rule Configuration Description Config Item Description Version String Version of config file Config Object Request auth rules for each product Config{k} String Product name Config{v} Object A list of request auth rules Config{v}[] Object A request auth rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Enable Boolean Whether enable request auth rule Example { \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_in(\\\"/auth_request\\\", false)\", \"Enable\": true } ] }, Version\": \"20190101000000\" } For example_product, for request to path /auth_request (e.g., www.example.com/auth_request), BFE will create a request and send it to http://127.0.0.1 for authentication. Actions Action Condition Forbid Response status code is 401 or 403 Pass Response status code is 200 or other Metrics Metric Description AUTH_REQUEST_CHECKED Counter for checked request AUTH_REQUEST_PASS Counter for passed request AUTH_REQUEST_FORBIDDEN Counter for forbidden request AUTH_REQUEST_UNAUTHORIZED Counter for unauthorized request AUTH_REQUEST_FAIL Counter for failed request AUTH_REQUEST_UNCERTAIN Counter for uncertain request Illustration of how BFE create auth request Method: Request Method of HTTP Request created by BFE is GET Header: The request header created by the BFE is originated from the original request , but BFE makes following changes to the request: Delete following headers: Content-Length/Connection/Keep-Alive/Proxy-Authenticate/Proxy-Authorization/Te/Trailers/Transfer-Encoding/Upgrade Add following headers: X-Forwarded-Method(Original Request Method\uff09\u3001X-Forwarded-Uri\uff08Original Request URI\uff09 Body: Body of HTTP Request created by BFE is null","title":"mod_auth_request"},{"location":"modules/mod_auth_request/mod_auth_request/#mod_auth_request","text":"","title":"mod_auth_request"},{"location":"modules/mod_auth_request/mod_auth_request/#introduction","text":"mod_auth_request supports sending request to the specified service for authentication.","title":"Introduction"},{"location":"modules/mod_auth_request/mod_auth_request/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_auth_request/mod_auth_request/#description","text":"conf/mod_auth_request/mod_auth_request.conf Config Item Description Basic.DataPath String Path of rule configuration Basic.AuthAddress String Address of authentication service Basic.AuthTimeout Number Timeout for authentication Log.OpenDebug Boolean Whether enable debug log Default False","title":"Description"},{"location":"modules/mod_auth_request/mod_auth_request/#example","text":"[Basic] DataPath = mod_auth_request/auth_request_rule.data AuthAddress = http://127.0.0.1 AuthTimeout = 100 [Log] OpenDebug = false","title":"Example"},{"location":"modules/mod_auth_request/mod_auth_request/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_auth_request/mod_auth_request/#description_1","text":"Config Item Description Version String Version of config file Config Object Request auth rules for each product Config{k} String Product name Config{v} Object A list of request auth rules Config{v}[] Object A request auth rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Enable Boolean Whether enable request auth rule","title":"Description"},{"location":"modules/mod_auth_request/mod_auth_request/#example_1","text":"{ \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_in(\\\"/auth_request\\\", false)\", \"Enable\": true } ] }, Version\": \"20190101000000\" } For example_product, for request to path /auth_request (e.g., www.example.com/auth_request), BFE will create a request and send it to http://127.0.0.1 for authentication.","title":"Example"},{"location":"modules/mod_auth_request/mod_auth_request/#actions","text":"Action Condition Forbid Response status code is 401 or 403 Pass Response status code is 200 or other","title":"Actions"},{"location":"modules/mod_auth_request/mod_auth_request/#metrics","text":"Metric Description AUTH_REQUEST_CHECKED Counter for checked request AUTH_REQUEST_PASS Counter for passed request AUTH_REQUEST_FORBIDDEN Counter for forbidden request AUTH_REQUEST_UNAUTHORIZED Counter for unauthorized request AUTH_REQUEST_FAIL Counter for failed request AUTH_REQUEST_UNCERTAIN Counter for uncertain request","title":"Metrics"},{"location":"modules/mod_auth_request/mod_auth_request/#illustration-of-how-bfe-create-auth-request","text":"Method: Request Method of HTTP Request created by BFE is GET Header: The request header created by the BFE is originated from the original request , but BFE makes following changes to the request: Delete following headers: Content-Length/Connection/Keep-Alive/Proxy-Authenticate/Proxy-Authorization/Te/Trailers/Transfer-Encoding/Upgrade Add following headers: X-Forwarded-Method(Original Request Method\uff09\u3001X-Forwarded-Uri\uff08Original Request URI\uff09 Body: Body of HTTP Request created by BFE is null","title":"Illustration of how BFE create auth request"},{"location":"modules/mod_block/mod_block/","text":"mod_block Introduction mod_block blocks incoming connections/requests based on defined rules. Module Configuration Description conf/mod_block/mod_block.conf Config Item Description Basic.ProductRulePath Path of product rule configuration Basic.IPBlocklistPath Path of ip blocklist file Example [Basic] # product rule config file path ProductRulePath = mod_block/block_rules.data # global ip blocklist file path IPBlocklistPath = mod_block/ip_blocklist.data Format of IPBlocklistPath file 192.168.1.253 192.168.1.254 192.168.1.250 Rule Configuration Description conf/mod_block/block_rules.data Config Item Description Version String Version of config file Config Struct Block rules for each product Config{k} String Product name Config{v} Object A list of rules Config{v}[] Object A block rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Name String Name of rule Config{v}[].Action Object Action of rule Config{v}[].Action.Cmd String Name of action Config{v}[].Action.Params Object A list of action parameters Config{v}[].Action.Params[] String A action parameter Actions Action Description CLOSE Close the connection ALLOW Accept the request Example { \"Version\": \"20190101000000\", \"Config\": { \"global\": [ { \"action\": { \"cmd\": \"ALLOW\", \"params\": [] }, \"cond\": \"req_host_in(\\\"n.example.org\\\") && req_path_prefix_in(\\\"/index/\\\", false) && req_query_key_in(\\\"space\\\")\", \"name\": \"example whiterule\" } ], \"example_product\": [ { \"action\": { \"cmd\": \"CLOSE\", \"params\": [] }, \"name\": \"example rule\", \"cond\": \"req_path_in(\\\"/limit\\\", false)\" } ] } } Metrics Metric Description CONN_ACCEPT Counter for connection accepted CONN_REFUSE Counter for connection refused CONN_TOTAL Counter for all connnetion checked REQ_ACCEPT Counter for request accepted REQ_REFUSE Counter for request refused REQ_TOTAL Counter for all request in REQ_TO_CHECK Counter for request to check WRONG_COMMAND Counter for request with condition satisfied, but wrong command","title":"mod_block"},{"location":"modules/mod_block/mod_block/#mod_block","text":"","title":"mod_block"},{"location":"modules/mod_block/mod_block/#introduction","text":"mod_block blocks incoming connections/requests based on defined rules.","title":"Introduction"},{"location":"modules/mod_block/mod_block/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_block/mod_block/#description","text":"conf/mod_block/mod_block.conf Config Item Description Basic.ProductRulePath Path of product rule configuration Basic.IPBlocklistPath Path of ip blocklist file","title":"Description"},{"location":"modules/mod_block/mod_block/#example","text":"[Basic] # product rule config file path ProductRulePath = mod_block/block_rules.data # global ip blocklist file path IPBlocklistPath = mod_block/ip_blocklist.data Format of IPBlocklistPath file 192.168.1.253 192.168.1.254 192.168.1.250","title":"Example"},{"location":"modules/mod_block/mod_block/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_block/mod_block/#description_1","text":"conf/mod_block/block_rules.data Config Item Description Version String Version of config file Config Struct Block rules for each product Config{k} String Product name Config{v} Object A list of rules Config{v}[] Object A block rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Name String Name of rule Config{v}[].Action Object Action of rule Config{v}[].Action.Cmd String Name of action Config{v}[].Action.Params Object A list of action parameters Config{v}[].Action.Params[] String A action parameter","title":"Description"},{"location":"modules/mod_block/mod_block/#actions","text":"Action Description CLOSE Close the connection ALLOW Accept the request","title":"Actions"},{"location":"modules/mod_block/mod_block/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"global\": [ { \"action\": { \"cmd\": \"ALLOW\", \"params\": [] }, \"cond\": \"req_host_in(\\\"n.example.org\\\") && req_path_prefix_in(\\\"/index/\\\", false) && req_query_key_in(\\\"space\\\")\", \"name\": \"example whiterule\" } ], \"example_product\": [ { \"action\": { \"cmd\": \"CLOSE\", \"params\": [] }, \"name\": \"example rule\", \"cond\": \"req_path_in(\\\"/limit\\\", false)\" } ] } }","title":"Example"},{"location":"modules/mod_block/mod_block/#metrics","text":"Metric Description CONN_ACCEPT Counter for connection accepted CONN_REFUSE Counter for connection refused CONN_TOTAL Counter for all connnetion checked REQ_ACCEPT Counter for request accepted REQ_REFUSE Counter for request refused REQ_TOTAL Counter for all request in REQ_TO_CHECK Counter for request to check WRONG_COMMAND Counter for request with condition satisfied, but wrong command","title":"Metrics"},{"location":"modules/mod_compress/mod_compress/","text":"mod_compress Introduction mod_compress compresses responses based on specified rules. Module Configuration Description conf/mod_compress/mod_compress.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Whether enable debug logs Default False Example [Basic] DataPath = mod_compress/compress_rule.data [Log] OpenDebug = false Rule Configuration Description Config Item Description Version String Version of config file Config Object Compress rule for each product Config{k} String Product name Config{v} Object A list of compress rules Config{v}[] Object A compress rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Action Object Action Config{v}[].Action.Cmd String Name of Action Config{v}[].Action.Quality Integer Compression level Config{v}[].Action.FlushSize Integer Flush size Module Actions Action Description GZIP Compress response using gzip method BROTLI Compress response using brotli method Example { \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"Action\": { \"Cmd\": \"GZIP\", \"Quality\": 9, \"FlushSize\": 512 } } ] }, \"Version\": \"20190101000000\" }","title":"mod_compress"},{"location":"modules/mod_compress/mod_compress/#mod_compress","text":"","title":"mod_compress"},{"location":"modules/mod_compress/mod_compress/#introduction","text":"mod_compress compresses responses based on specified rules.","title":"Introduction"},{"location":"modules/mod_compress/mod_compress/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_compress/mod_compress/#description","text":"conf/mod_compress/mod_compress.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Whether enable debug logs Default False","title":"Description"},{"location":"modules/mod_compress/mod_compress/#example","text":"[Basic] DataPath = mod_compress/compress_rule.data [Log] OpenDebug = false","title":"Example"},{"location":"modules/mod_compress/mod_compress/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_compress/mod_compress/#description_1","text":"Config Item Description Version String Version of config file Config Object Compress rule for each product Config{k} String Product name Config{v} Object A list of compress rules Config{v}[] Object A compress rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Action Object Action Config{v}[].Action.Cmd String Name of Action Config{v}[].Action.Quality Integer Compression level Config{v}[].Action.FlushSize Integer Flush size","title":"Description"},{"location":"modules/mod_compress/mod_compress/#module-actions","text":"Action Description GZIP Compress response using gzip method BROTLI Compress response using brotli method","title":"Module Actions"},{"location":"modules/mod_compress/mod_compress/#example_1","text":"{ \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"Action\": { \"Cmd\": \"GZIP\", \"Quality\": 9, \"FlushSize\": 512 } } ] }, \"Version\": \"20190101000000\" }","title":"Example"},{"location":"modules/mod_cors/mod_cors/","text":"mod_cors Introduction mod_cors support Cross-Origin Resource Sharing Module configuration Description conf/mod_cors/mod_cors.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module Example [Basic] DataPath = mod_cors/cors_rule.data [Log] OpenDebug = false Rule Configuration Description conf/mod_cors/cors_rule.data Config Item Description Version String Version of the config file Config Object Trace rules for each product Config[k] String Product name Config[v] Object A list of cors rules Config[v][] Object A cors rule Config[v][].Cond String Condition expression, See Condition Config[v][].AccessControlAllowOrigins List Indicates whether the response can be shared with requesting code from the given origin; for requests without credentials, the \"*\" wildcard, to tell browsers to allow any origin to access the resource. \"%origin\" specifies the origin from the request header \"Origin\" Config[v][].AccessControlAllowCredentials Boolean Indicates whether or not the response to the request can be exposed. Config[v][].AccessControlExposeHeaders Boolean Specifies the response headers that browsers are allowed to access. Config[v][].AccessControlAllowMethods List Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request. Config[v][].AccessControlAllowHeaders List Indicates which HTTP headers can be used when making the actual request. This is used in response to a preflight request. Config[v][].AccessControlMaxAge Int Indicates how long the results of a preflight request can be cached. This is used in response to a preflight request. Example { \"Version\": \"cors_rule.data.version\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"AccessControlAllowOrigins\": [\"%origin\"], \"AccessControlAllowCredentials\": true, \"AccessControlExposeHeaders\": [\"X-Custom-Header\"], \"AccessControlAllowMethods\": [\"HEAD\",\"GET\",\"POST\",\"PUT\",\"DELETE\",\"OPTIONS\",\"PATCH\"], \"AccessControlAllowHeaders\": [\"X-Custom-Header\"], \"AccessControlMaxAge\": -1 } ] } }","title":"mod_cors"},{"location":"modules/mod_cors/mod_cors/#mod_cors","text":"","title":"mod_cors"},{"location":"modules/mod_cors/mod_cors/#introduction","text":"mod_cors support Cross-Origin Resource Sharing","title":"Introduction"},{"location":"modules/mod_cors/mod_cors/#module-configuration","text":"","title":"Module configuration"},{"location":"modules/mod_cors/mod_cors/#description","text":"conf/mod_cors/mod_cors.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module","title":"Description"},{"location":"modules/mod_cors/mod_cors/#example","text":"[Basic] DataPath = mod_cors/cors_rule.data [Log] OpenDebug = false","title":"Example"},{"location":"modules/mod_cors/mod_cors/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_cors/mod_cors/#description_1","text":"conf/mod_cors/cors_rule.data Config Item Description Version String Version of the config file Config Object Trace rules for each product Config[k] String Product name Config[v] Object A list of cors rules Config[v][] Object A cors rule Config[v][].Cond String Condition expression, See Condition Config[v][].AccessControlAllowOrigins List Indicates whether the response can be shared with requesting code from the given origin; for requests without credentials, the \"*\" wildcard, to tell browsers to allow any origin to access the resource. \"%origin\" specifies the origin from the request header \"Origin\" Config[v][].AccessControlAllowCredentials Boolean Indicates whether or not the response to the request can be exposed. Config[v][].AccessControlExposeHeaders Boolean Specifies the response headers that browsers are allowed to access. Config[v][].AccessControlAllowMethods List Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request. Config[v][].AccessControlAllowHeaders List Indicates which HTTP headers can be used when making the actual request. This is used in response to a preflight request. Config[v][].AccessControlMaxAge Int Indicates how long the results of a preflight request can be cached. This is used in response to a preflight request.","title":"Description"},{"location":"modules/mod_cors/mod_cors/#example_1","text":"{ \"Version\": \"cors_rule.data.version\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"AccessControlAllowOrigins\": [\"%origin\"], \"AccessControlAllowCredentials\": true, \"AccessControlExposeHeaders\": [\"X-Custom-Header\"], \"AccessControlAllowMethods\": [\"HEAD\",\"GET\",\"POST\",\"PUT\",\"DELETE\",\"OPTIONS\",\"PATCH\"], \"AccessControlAllowHeaders\": [\"X-Custom-Header\"], \"AccessControlMaxAge\": -1 } ] } }","title":"Example"},{"location":"modules/mod_doh/mod_doh/","text":"mod_doh Introduction Module doh supports DNS over HTTPS. Module configuration Description conf/mod_doh/mod_doh.conf Config Item Description Basic.Cond String Condition for DoH requests, see Condition Dns.Address String Address of DNS server Dns.RetryMax Int Maximum retries Defaults to 0 (no retry) Dns.Timeout Int A cumulative timeout for dial, write and read (ms) Log.OpenDebug Boolean Whether enable debug log Defaults to False Example [Basic] Cond = \"default_t()\" [Dns] Address = \"127.0.0.1:53\" Timeout = 1000 [Log] OpenDebug = false","title":"mod_doh"},{"location":"modules/mod_doh/mod_doh/#mod_doh","text":"","title":"mod_doh"},{"location":"modules/mod_doh/mod_doh/#introduction","text":"Module doh supports DNS over HTTPS.","title":"Introduction"},{"location":"modules/mod_doh/mod_doh/#module-configuration","text":"","title":"Module configuration"},{"location":"modules/mod_doh/mod_doh/#description","text":"conf/mod_doh/mod_doh.conf Config Item Description Basic.Cond String Condition for DoH requests, see Condition Dns.Address String Address of DNS server Dns.RetryMax Int Maximum retries Defaults to 0 (no retry) Dns.Timeout Int A cumulative timeout for dial, write and read (ms) Log.OpenDebug Boolean Whether enable debug log Defaults to False","title":"Description"},{"location":"modules/mod_doh/mod_doh/#example","text":"[Basic] Cond = \"default_t()\" [Dns] Address = \"127.0.0.1:53\" Timeout = 1000 [Log] OpenDebug = false","title":"Example"},{"location":"modules/mod_errors/mod_errors/","text":"mod_errors Introduction mod_errors replaces error responses based on specified rules. Module Configuration Description conf/mod_errors/mod_errors.conf Config Item Description Basic.DataPath String Path for rule configuration Log.OpenDebug Boolean Whether enable debug logs Default False Example [Basic] DataPath = mod_errors/errors_rule.data Rule Configuration Description Config Item Description Version String Version of config file Config Object Error rules for each product Config{k} String Product name Config{v} Object A list of error rules Config{v}[] Object A error rule Config{v}[].Cond String Condition expressio, See Condition Config{v}[].Actions Object Action Config{v}[].Actions.Cmd String Name of Action Config{v}[].Actions.Params Object Parameters of Action Config{v}[].Actions.Params[] String A Parameter Module Actions Action Description RETURN Return response generated from specified static html REDIRECT Redirect to specified location Example { \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"res_code_in(\\\"404\\\")\", \"Actions\": [ { \"Cmd\": \"RETURN\", \"Params\": [ \"200\", \"text/html\", \"../conf/mod_errors/404.html\" ] } ] }, { \"Cond\": \"res_code_in(\\\"500\\\")\", \"Actions\": [ { \"Cmd\": \"REDIRECT\", \"Params\": [ \"http://example.org/error.html\" ] } ] } ] } }","title":"mod_errors"},{"location":"modules/mod_errors/mod_errors/#mod_errors","text":"","title":"mod_errors"},{"location":"modules/mod_errors/mod_errors/#introduction","text":"mod_errors replaces error responses based on specified rules.","title":"Introduction"},{"location":"modules/mod_errors/mod_errors/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_errors/mod_errors/#description","text":"conf/mod_errors/mod_errors.conf Config Item Description Basic.DataPath String Path for rule configuration Log.OpenDebug Boolean Whether enable debug logs Default False","title":"Description"},{"location":"modules/mod_errors/mod_errors/#example","text":"[Basic] DataPath = mod_errors/errors_rule.data","title":"Example"},{"location":"modules/mod_errors/mod_errors/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_errors/mod_errors/#description_1","text":"Config Item Description Version String Version of config file Config Object Error rules for each product Config{k} String Product name Config{v} Object A list of error rules Config{v}[] Object A error rule Config{v}[].Cond String Condition expressio, See Condition Config{v}[].Actions Object Action Config{v}[].Actions.Cmd String Name of Action Config{v}[].Actions.Params Object Parameters of Action Config{v}[].Actions.Params[] String A Parameter","title":"Description"},{"location":"modules/mod_errors/mod_errors/#module-actions","text":"Action Description RETURN Return response generated from specified static html REDIRECT Redirect to specified location","title":"Module Actions"},{"location":"modules/mod_errors/mod_errors/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"res_code_in(\\\"404\\\")\", \"Actions\": [ { \"Cmd\": \"RETURN\", \"Params\": [ \"200\", \"text/html\", \"../conf/mod_errors/404.html\" ] } ] }, { \"Cond\": \"res_code_in(\\\"500\\\")\", \"Actions\": [ { \"Cmd\": \"REDIRECT\", \"Params\": [ \"http://example.org/error.html\" ] } ] } ] } }","title":"Example"},{"location":"modules/mod_geo/mod_geo/","text":"mod_geo Introduction mod_geo creates variables with values depending on the client IP address, using the GEO databases. Module Configuration Description conf/mod_geo/mod_geo.conf Config Item Description Basic.GeoDBPath String Path of geo db file Log.OpenDebug Boolean Whether enable debug logs Default False mod_geo supports GeoDB in MaxMind format which can be downloaded from https://dev.maxmind.com/geoip/geoip2/geolite2/ Example [Basic] GeoDBPath = mod_geo/geo.db","title":"mod_geo"},{"location":"modules/mod_geo/mod_geo/#mod_geo","text":"","title":"mod_geo"},{"location":"modules/mod_geo/mod_geo/#introduction","text":"mod_geo creates variables with values depending on the client IP address, using the GEO databases.","title":"Introduction"},{"location":"modules/mod_geo/mod_geo/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_geo/mod_geo/#description","text":"conf/mod_geo/mod_geo.conf Config Item Description Basic.GeoDBPath String Path of geo db file Log.OpenDebug Boolean Whether enable debug logs Default False mod_geo supports GeoDB in MaxMind format which can be downloaded from https://dev.maxmind.com/geoip/geoip2/geolite2/","title":"Description"},{"location":"modules/mod_geo/mod_geo/#example","text":"[Basic] GeoDBPath = mod_geo/geo.db","title":"Example"},{"location":"modules/mod_header/mod_header/","text":"mod_header Introduction mod_header modifies header of HTTP request/response based on defined rules. Module Configuration Description conf/mod_header/mod_header.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module Example [Basic] DataPath = mod_header/header_rule.data Rule Configuration Description conf/mod_header/header_rule.data Config Item Description Version String Version of config file Config Struct Header rules for each product Config{k} String Product name Config{v} Object A ordered list of rules Config{v}[] Object A rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Last Boolean If true, stop processing the next rule Config{v}[].Actions Object A list of Actions Config{v}[].Actions.Cmd String A Action Config{v}[].Actions.Params Object A list of parameters for action Config{v}[].Actions.Params[] String A parameter Actions Action Description Parameters REQ_HEADER_SET Set request header HeaderName, HeaderValue REQ_HEADER_ADD Add request header HeaderName, HeaderValue REQ_HEADER_DEL Delete request header HeaderName RSP_HEADER_SET Set response header HeaderName, HeaderValue RSP_HEADER_ADD Add response header HeaderName, HeaderValue RSP_HEADER_DEL Delete response header HeaderName Example { \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"cond\": \"req_path_prefix_in(\\\"/header\\\", false)\", \"actions\": [ { \"cmd\": \"REQ_HEADER_SET\", \"params\": [ \"X-Bfe-Log-Id\", \"%bfe_log_id\" ] }, { \"cmd\": \"REQ_HEADER_SET\", \"params\": [ \"X-Bfe-Vip\", \"%bfe_vip\" ] }, { \"cmd\": \"RSP_HEADER_SET\", \"params\": [ \"X-Proxied-By\", \"bfe\" ] } ], \"last\": true } ] } } Builtin Variables BFE provides a list of variables which are evaluated in the runtime during the processing of each request. See the Example above. Variable Description %bfe_client_ip Client IP %bfe_client_port Client port %bfe_request_host Value of Request Host header %bfe_session_id Session ID %bfe_log_id Request ID %bfe_cip Client IP (CIP) %bfe_vip Virtual IP (VIP) %bfe_server_name BFE instance address %bfe_cluster Backend cluster %bfe_backend_info Backend information %bfe_ssl_resume Whether the TLS/SSL session is resumed with session id or session ticket %bfe_ssl_cipher TLS/SSL cipher suite %bfe_ssl_version TLS/SSL version %bfe_ssl_ja3_raw JA3 fingerprint string for TLS/SSL client %bfe_ssl_ja3_hash JA3 fingerprint hash for TLS/SSL client %bfe_http2_fingerprint HTTP/2 fingerprint %bfe_protocol Application level protocol %client_cert_serial_number Serial number of client certificate %client_cert_subject_title Subject title of client certificate %client_cert_subject_common_name Subject Common Name of client certificate %client_cert_subject_organization Subject Organization of client certificate %client_cert_subject_organizational_unit Subject Organizational Unit of client certificate %client_cert_subject_province Subject Province of client certificate %client_cert_subject_country Subject Country of client certificate %client_cert_subject_locality Subject Locality of client certificate","title":"mod_header"},{"location":"modules/mod_header/mod_header/#mod_header","text":"","title":"mod_header"},{"location":"modules/mod_header/mod_header/#introduction","text":"mod_header modifies header of HTTP request/response based on defined rules.","title":"Introduction"},{"location":"modules/mod_header/mod_header/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_header/mod_header/#description","text":"conf/mod_header/mod_header.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module","title":"Description"},{"location":"modules/mod_header/mod_header/#example","text":"[Basic] DataPath = mod_header/header_rule.data","title":"Example"},{"location":"modules/mod_header/mod_header/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_header/mod_header/#description_1","text":"conf/mod_header/header_rule.data Config Item Description Version String Version of config file Config Struct Header rules for each product Config{k} String Product name Config{v} Object A ordered list of rules Config{v}[] Object A rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Last Boolean If true, stop processing the next rule Config{v}[].Actions Object A list of Actions Config{v}[].Actions.Cmd String A Action Config{v}[].Actions.Params Object A list of parameters for action Config{v}[].Actions.Params[] String A parameter","title":"Description"},{"location":"modules/mod_header/mod_header/#actions","text":"Action Description Parameters REQ_HEADER_SET Set request header HeaderName, HeaderValue REQ_HEADER_ADD Add request header HeaderName, HeaderValue REQ_HEADER_DEL Delete request header HeaderName RSP_HEADER_SET Set response header HeaderName, HeaderValue RSP_HEADER_ADD Add response header HeaderName, HeaderValue RSP_HEADER_DEL Delete response header HeaderName","title":"Actions"},{"location":"modules/mod_header/mod_header/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"cond\": \"req_path_prefix_in(\\\"/header\\\", false)\", \"actions\": [ { \"cmd\": \"REQ_HEADER_SET\", \"params\": [ \"X-Bfe-Log-Id\", \"%bfe_log_id\" ] }, { \"cmd\": \"REQ_HEADER_SET\", \"params\": [ \"X-Bfe-Vip\", \"%bfe_vip\" ] }, { \"cmd\": \"RSP_HEADER_SET\", \"params\": [ \"X-Proxied-By\", \"bfe\" ] } ], \"last\": true } ] } }","title":"Example"},{"location":"modules/mod_header/mod_header/#builtin-variables","text":"BFE provides a list of variables which are evaluated in the runtime during the processing of each request. See the Example above. Variable Description %bfe_client_ip Client IP %bfe_client_port Client port %bfe_request_host Value of Request Host header %bfe_session_id Session ID %bfe_log_id Request ID %bfe_cip Client IP (CIP) %bfe_vip Virtual IP (VIP) %bfe_server_name BFE instance address %bfe_cluster Backend cluster %bfe_backend_info Backend information %bfe_ssl_resume Whether the TLS/SSL session is resumed with session id or session ticket %bfe_ssl_cipher TLS/SSL cipher suite %bfe_ssl_version TLS/SSL version %bfe_ssl_ja3_raw JA3 fingerprint string for TLS/SSL client %bfe_ssl_ja3_hash JA3 fingerprint hash for TLS/SSL client %bfe_http2_fingerprint HTTP/2 fingerprint %bfe_protocol Application level protocol %client_cert_serial_number Serial number of client certificate %client_cert_subject_title Subject title of client certificate %client_cert_subject_common_name Subject Common Name of client certificate %client_cert_subject_organization Subject Organization of client certificate %client_cert_subject_organizational_unit Subject Organizational Unit of client certificate %client_cert_subject_province Subject Province of client certificate %client_cert_subject_country Subject Country of client certificate %client_cert_subject_locality Subject Locality of client certificate","title":"Builtin Variables"},{"location":"modules/mod_http_code/mod_http_code/","text":"mod_http_code Introduction mod_http_code reports statistics of HTTP response codes. Module Configuration Not required Metrics Metric Description ALL2_X_X Counter of 2XX status ALL3_X_X Counter of 3XX status ALL4_X_X Counter of 4XX status ALL5_X_X Counter of 5XX status","title":"mod_http_code"},{"location":"modules/mod_http_code/mod_http_code/#mod_http_code","text":"","title":"mod_http_code"},{"location":"modules/mod_http_code/mod_http_code/#introduction","text":"mod_http_code reports statistics of HTTP response codes.","title":"Introduction"},{"location":"modules/mod_http_code/mod_http_code/#module-configuration","text":"Not required","title":"Module Configuration"},{"location":"modules/mod_http_code/mod_http_code/#metrics","text":"Metric Description ALL2_X_X Counter of 2XX status ALL3_X_X Counter of 3XX status ALL4_X_X Counter of 4XX status ALL5_X_X Counter of 5XX status","title":"Metrics"},{"location":"modules/mod_key_log/mod_key_log/","text":"mod_key_log Introduction mod_key_log writes tls key logs in NSS key log format so that external programs(eg. wireshark) can decrypt TLS connections for trouble shooting. For more information about NSS key log format, see: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format Module Configuration Description conf/mod_key_log/mod_key_log.conf Config Item Description Log.LogFile String Set file path of log for saving to a single file without rotation Log.LogPrefix String Filename prefix for log Log.LogDir String Directory of log files Log.RotateWhen String Interval to rotate log file Log.BackupCount Integer Max number of rotated log files Example Save log to a directory [Log] # filename prefix for log LogPrefix = key # log directory LogDir = ../log # interval to rotate logs: M/H/D # - M: minute # - H: hour # - D: day RotateWhen = H # max number of rotated log files BackupCount = 3 Output log to stdout [Log] # filename prefix for log LogFile = /dev/stdout","title":"mod_key_log"},{"location":"modules/mod_key_log/mod_key_log/#mod_key_log","text":"","title":"mod_key_log"},{"location":"modules/mod_key_log/mod_key_log/#introduction","text":"mod_key_log writes tls key logs in NSS key log format so that external programs(eg. wireshark) can decrypt TLS connections for trouble shooting. For more information about NSS key log format, see: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format","title":"Introduction"},{"location":"modules/mod_key_log/mod_key_log/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_key_log/mod_key_log/#description","text":"conf/mod_key_log/mod_key_log.conf Config Item Description Log.LogFile String Set file path of log for saving to a single file without rotation Log.LogPrefix String Filename prefix for log Log.LogDir String Directory of log files Log.RotateWhen String Interval to rotate log file Log.BackupCount Integer Max number of rotated log files","title":"Description"},{"location":"modules/mod_key_log/mod_key_log/#example","text":"","title":"Example"},{"location":"modules/mod_key_log/mod_key_log/#save-log-to-a-directory","text":"[Log] # filename prefix for log LogPrefix = key # log directory LogDir = ../log # interval to rotate logs: M/H/D # - M: minute # - H: hour # - D: day RotateWhen = H # max number of rotated log files BackupCount = 3","title":"Save log to a directory"},{"location":"modules/mod_key_log/mod_key_log/#output-log-to-stdout","text":"[Log] # filename prefix for log LogFile = /dev/stdout","title":"Output log to stdout"},{"location":"modules/mod_logid/mod_logid/","text":"mod_logid Introduction mod_logid generates log ids for sessions/requests. Module Configuration Not required Metrics Metric Description LOGID_CONVERT_FAILED Counter for old logid convert error","title":"mod_logid"},{"location":"modules/mod_logid/mod_logid/#mod_logid","text":"","title":"mod_logid"},{"location":"modules/mod_logid/mod_logid/#introduction","text":"mod_logid generates log ids for sessions/requests.","title":"Introduction"},{"location":"modules/mod_logid/mod_logid/#module-configuration","text":"Not required","title":"Module Configuration"},{"location":"modules/mod_logid/mod_logid/#metrics","text":"Metric Description LOGID_CONVERT_FAILED Counter for old logid convert error","title":"Metrics"},{"location":"modules/mod_prison/mod_prison/","text":"mod_prison Introduction mod_prison limits the amount of requests a user can make in a given period of time based on defined rules. Module Configuration Description conf/mod_prison/mod_prison.conf Config Item Description Basic.ProductRulePath String path of rule configuration Example [Basic] ProductRulePath = mod_prison/prison.data Rule Configuration Description conf/mod_prison/prison.data Config Item Description Version String Version of config file Config Object Prison rules for each product Config{k} String Product name Config{v} Array A ordered list of prison rules Config{v}[] Object A prison rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].AccessSignConf Object Conf of access sign which is the basis for judgment of same access Config{v}[].AccessSignConf.UseSocketIP Boolean Whether using socket ip to generate access sign Config{v}[].AccessSignConf.UseClientIP Boolean Whether using client ip to generate access sign Config{v}[].AccessSignConf.UseConnectID Boolean Whether using connect id to generate access sign Config{v}[].AccessSignConf.UseUrl Boolean Whether using url to generate access sign Config{v}[].AccessSignConf.UseHost Boolean Whether using host to generate access sign Config{v}[].AccessSignConf.UsePath Boolean Whether using path to generate access sign Config{v}[].AccessSignConf.UseHeaders Boolean Whether using headers to generate access sign Config{v}[].AccessSignConf.UrlRegexp String Substrings in url matching UrlRegexp which are used for generating access sign Config{v}[].AccessSignConf.[]Qeury Array Qeury keys used for generating access sign Config{v}[].AccessSignConf.[]Header Array Header keys used for generating access sign Config{v}[].AccessSignConf.[]Cookie Array Cookie keys used for generating access sign Config{v}[].Action Object Prison action if visits exceed the limit Config{v}[].Action.Cmd String Name of prison action Config{v}[].Action.Params Array Parameters of prison action Config{v}[].CheckPeriod Integer Period of check time (second) Config{v}[].StayPeriod Integer Period of prison time if visits exceed the limit (second) Config{v}[].Threshold Integer Take action if exceeding threshold during specified CheckPeriod Config{v}[].AccessDictSize Integer Size of LRU cache for access records Config{v}[].PrisonDictSize Integer Size of LRU cache for prison records Actions Action Description CLOSE Close the connection FINISH Return 403 response and close the connection PASS Just forward request REQ_HEADER_SET Set request header Example { \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [{ \"Name\": \"example_prison\", \"Cond\": \"req_path_prefix_in(\\\"/prison\\\", false)\", \"accessSignConf\": { \"url\": false, \"path\": false, \"query\": [], \"header\": [], \"Cookie\": [ \"UID\" ] }, \"action\": { \"cmd\": \"CLOSE\", \"params\": [] }, \"checkPeriod\": 10, \"stayPeriod\": 10, \"threshold\": 5, \"accessDictSize\": 1000, \"prisonDictSize\": 1000 }] } }","title":"mod_prison"},{"location":"modules/mod_prison/mod_prison/#mod_prison","text":"","title":"mod_prison"},{"location":"modules/mod_prison/mod_prison/#introduction","text":"mod_prison limits the amount of requests a user can make in a given period of time based on defined rules.","title":"Introduction"},{"location":"modules/mod_prison/mod_prison/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_prison/mod_prison/#description","text":"conf/mod_prison/mod_prison.conf Config Item Description Basic.ProductRulePath String path of rule configuration","title":"Description"},{"location":"modules/mod_prison/mod_prison/#example","text":"[Basic] ProductRulePath = mod_prison/prison.data","title":"Example"},{"location":"modules/mod_prison/mod_prison/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_prison/mod_prison/#description_1","text":"conf/mod_prison/prison.data Config Item Description Version String Version of config file Config Object Prison rules for each product Config{k} String Product name Config{v} Array A ordered list of prison rules Config{v}[] Object A prison rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].AccessSignConf Object Conf of access sign which is the basis for judgment of same access Config{v}[].AccessSignConf.UseSocketIP Boolean Whether using socket ip to generate access sign Config{v}[].AccessSignConf.UseClientIP Boolean Whether using client ip to generate access sign Config{v}[].AccessSignConf.UseConnectID Boolean Whether using connect id to generate access sign Config{v}[].AccessSignConf.UseUrl Boolean Whether using url to generate access sign Config{v}[].AccessSignConf.UseHost Boolean Whether using host to generate access sign Config{v}[].AccessSignConf.UsePath Boolean Whether using path to generate access sign Config{v}[].AccessSignConf.UseHeaders Boolean Whether using headers to generate access sign Config{v}[].AccessSignConf.UrlRegexp String Substrings in url matching UrlRegexp which are used for generating access sign Config{v}[].AccessSignConf.[]Qeury Array Qeury keys used for generating access sign Config{v}[].AccessSignConf.[]Header Array Header keys used for generating access sign Config{v}[].AccessSignConf.[]Cookie Array Cookie keys used for generating access sign Config{v}[].Action Object Prison action if visits exceed the limit Config{v}[].Action.Cmd String Name of prison action Config{v}[].Action.Params Array Parameters of prison action Config{v}[].CheckPeriod Integer Period of check time (second) Config{v}[].StayPeriod Integer Period of prison time if visits exceed the limit (second) Config{v}[].Threshold Integer Take action if exceeding threshold during specified CheckPeriod Config{v}[].AccessDictSize Integer Size of LRU cache for access records Config{v}[].PrisonDictSize Integer Size of LRU cache for prison records","title":"Description"},{"location":"modules/mod_prison/mod_prison/#actions","text":"Action Description CLOSE Close the connection FINISH Return 403 response and close the connection PASS Just forward request REQ_HEADER_SET Set request header","title":"Actions"},{"location":"modules/mod_prison/mod_prison/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [{ \"Name\": \"example_prison\", \"Cond\": \"req_path_prefix_in(\\\"/prison\\\", false)\", \"accessSignConf\": { \"url\": false, \"path\": false, \"query\": [], \"header\": [], \"Cookie\": [ \"UID\" ] }, \"action\": { \"cmd\": \"CLOSE\", \"params\": [] }, \"checkPeriod\": 10, \"stayPeriod\": 10, \"threshold\": 5, \"accessDictSize\": 1000, \"prisonDictSize\": 1000 }] } }","title":"Example"},{"location":"modules/mod_redirect/mod_redirect/","text":"mod_redirect Introduction mod_redirect redirects HTTP requests based on defined rules. Module Configuration Description conf/mod_redirect/mod_redirect.conf Config Item Description Basic.DataPath String Path of rule configuration Example [Basic] DataPath = mod_redirect/redirect.data Rule Configuration Description conf/mod_redirect/redirect.data Config Item Description Version String Version of config file Config Struct Redirect rules for each product. Config{k} String Product name Config{v} Object A ordered list of redirect rules Config{v}[] Object A redirect rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Actions Object A ordered list of redirect actions Config{v}[].Actions[] Object A redirect action Config{v}[].Actions[].Cmd Object Name of redirect action Config{v}[].Actions[].Params Object Parameters of redirect action Config{v}[].Status Integer Status code Actions Action Description URL_SET Redirect to specified URL URL_FROM_QUERY Redirect to URL parsed from specified query in request URL_PREFIX_ADD Redirect to URL concatenated by specified prefix and the original URL SCHEME_SET Redirect to the original URL but with scheme changed. supported scheme: http|https Example { \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_prefix_in(\\\"/redirect\\\", false)\", \"Actions\": [ { \"Cmd\": \"URL_SET\", \"Params\": [\"https://example.org\"] } ], \"Status\": 301 } ] } }","title":"mod_redirect"},{"location":"modules/mod_redirect/mod_redirect/#mod_redirect","text":"","title":"mod_redirect"},{"location":"modules/mod_redirect/mod_redirect/#introduction","text":"mod_redirect redirects HTTP requests based on defined rules.","title":"Introduction"},{"location":"modules/mod_redirect/mod_redirect/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_redirect/mod_redirect/#description","text":"conf/mod_redirect/mod_redirect.conf Config Item Description Basic.DataPath String Path of rule configuration","title":"Description"},{"location":"modules/mod_redirect/mod_redirect/#example","text":"[Basic] DataPath = mod_redirect/redirect.data","title":"Example"},{"location":"modules/mod_redirect/mod_redirect/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_redirect/mod_redirect/#description_1","text":"conf/mod_redirect/redirect.data Config Item Description Version String Version of config file Config Struct Redirect rules for each product. Config{k} String Product name Config{v} Object A ordered list of redirect rules Config{v}[] Object A redirect rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Actions Object A ordered list of redirect actions Config{v}[].Actions[] Object A redirect action Config{v}[].Actions[].Cmd Object Name of redirect action Config{v}[].Actions[].Params Object Parameters of redirect action Config{v}[].Status Integer Status code","title":"Description"},{"location":"modules/mod_redirect/mod_redirect/#actions","text":"Action Description URL_SET Redirect to specified URL URL_FROM_QUERY Redirect to URL parsed from specified query in request URL_PREFIX_ADD Redirect to URL concatenated by specified prefix and the original URL SCHEME_SET Redirect to the original URL but with scheme changed. supported scheme: http|https","title":"Actions"},{"location":"modules/mod_redirect/mod_redirect/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_prefix_in(\\\"/redirect\\\", false)\", \"Actions\": [ { \"Cmd\": \"URL_SET\", \"Params\": [\"https://example.org\"] } ], \"Status\": 301 } ] } }","title":"Example"},{"location":"modules/mod_rewrite/mod_rewrite/","text":"mod_rewrite Introduction mod_rewrite modifies the URI of HTTP request based on defined rules. Module Configuration Description conf/mod_rewrite/mod_rewrite.conf Config Item Description Basic.DataPath String Path of rule configuration Example [Basic] DataPath = mod_rewrite/rewrite.data Rule Configuration Description conf/mod_rewrite/rewrite.data Config Item Description Version String Version of config file Config Struct Rewrite rules for each product Config{k} String Product name Config{v} Object A ordered list of rewrite rules Config{v}[] Object A rewrite rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Actions Object A ordered list of rewrite actions Config{v}[].Actions[] Object A rewrite action Config{v}[].Actions[].Cmd Object Name of rewrite action Config{v}[].Actions[].Params Object Parameters of rewrite action Config{v}[].Last Integer If true, stop to check the remaining rules Actions Action Description HOST_SET Set host to specified value HOST_SET_FROM_PATH_PREFIX Set host to specified path prefix HOST_SUFFIX_REPLACE Replace suffix of host PATH_SET Set path to specified value PATH_PREFIX_ADD Add prefix to original path PATH_PREFIX_TRIM Trim prefix from original path QUERY_ADD Add query QUERY_DEL Delete query QUERY_DEL_ALL_EXCEPT Del all queries except specified queries QUERY_RENAME Rename query Example { \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_prefix_in(\\\"/rewrite\\\", false)\", \"Actions\": [ { \"Cmd\": \"PATH_PREFIX_ADD\", \"Params\": [ \"/bfe/\" ] } ], \"Last\": true } ] } }","title":"mod_rewrite"},{"location":"modules/mod_rewrite/mod_rewrite/#mod_rewrite","text":"","title":"mod_rewrite"},{"location":"modules/mod_rewrite/mod_rewrite/#introduction","text":"mod_rewrite modifies the URI of HTTP request based on defined rules.","title":"Introduction"},{"location":"modules/mod_rewrite/mod_rewrite/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_rewrite/mod_rewrite/#description","text":"conf/mod_rewrite/mod_rewrite.conf Config Item Description Basic.DataPath String Path of rule configuration","title":"Description"},{"location":"modules/mod_rewrite/mod_rewrite/#example","text":"[Basic] DataPath = mod_rewrite/rewrite.data","title":"Example"},{"location":"modules/mod_rewrite/mod_rewrite/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_rewrite/mod_rewrite/#description_1","text":"conf/mod_rewrite/rewrite.data Config Item Description Version String Version of config file Config Struct Rewrite rules for each product Config{k} String Product name Config{v} Object A ordered list of rewrite rules Config{v}[] Object A rewrite rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Actions Object A ordered list of rewrite actions Config{v}[].Actions[] Object A rewrite action Config{v}[].Actions[].Cmd Object Name of rewrite action Config{v}[].Actions[].Params Object Parameters of rewrite action Config{v}[].Last Integer If true, stop to check the remaining rules","title":"Description"},{"location":"modules/mod_rewrite/mod_rewrite/#actions","text":"Action Description HOST_SET Set host to specified value HOST_SET_FROM_PATH_PREFIX Set host to specified path prefix HOST_SUFFIX_REPLACE Replace suffix of host PATH_SET Set path to specified value PATH_PREFIX_ADD Add prefix to original path PATH_PREFIX_TRIM Trim prefix from original path QUERY_ADD Add query QUERY_DEL Delete query QUERY_DEL_ALL_EXCEPT Del all queries except specified queries QUERY_RENAME Rename query","title":"Actions"},{"location":"modules/mod_rewrite/mod_rewrite/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_prefix_in(\\\"/rewrite\\\", false)\", \"Actions\": [ { \"Cmd\": \"PATH_PREFIX_ADD\", \"Params\": [ \"/bfe/\" ] } ], \"Last\": true } ] } }","title":"Example"},{"location":"modules/mod_secure_link/mod_secure_link/","text":"mod_secure_link Introduction mod_secure_link is used to check authenticity of requested links, protect resources from unauthorized access, and limit link lifetime. Module Configuration Description the basic config in: conf/mod_secure_link/mod_secure_link.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module Example [Basic] DataPath = ./mod_secure_link/secure_link.data [Log] OpenDebug = true Rule Configuration Description conf/mod_secure_link/secure_link_rule.data Config Item Description Version String Version of config file Config Object Rules for each product Config{k} String Product name Config{v} Object A list of rules Config{v}[].Cond String Condition expression, See Condition Config[v][].ChecksumKey String The key which stored Checksum Value in Query Config[v][].ExpiresKey String The key which stored Expired time in Query Config[v][].ExpressionNodes Array Nodes which join calculate Checksum Config[v][].ExpressionNodes[].Type String Node Type, see Node Type to get more information Config[v][].ExpressionNodes[].Param String The param may be used to get Final Value Node Type be supported node type and Calculate logic: type Calculate logic label $Param query req.URL.Query($Param) header req.Header.Get($Param) host req.Host uri req.RequestURI remote_addr req.RemoteAddr Example { \"Version\": \"2019-12-10184356\", \"Config\": { \"p1\": [{ \"Cond\": \"default_t()\", \"ChecksumKey\": \"sign\", \"ExpiresKey\": \"time\", \"ExpressionNodes\": [{ \"Type\": \"query\", \"Param\": \"time\" }, { \"Type\": \"uri\" }, { \"Type\": \"remote_addr\" }, { \"Type\": \"label\", \"Param\": \" secret\" } ] }] } } Link generate logic With above config, the pseudo code to generate link is\uff1a func WrapSecureLinkParam (req *http.Request) { now := time.Now().Unix() expires := now + int64(time.Hour*24/time.Second) // step1: get origin data origin := fmt.Sprintf(\"%d%s%s%s\", expires, req.RequestURI, req.RemoteAddr, \" secret\") // step2: generator sign sign := func(origin string) string { tmpB := md5.Sum([]byte(origin)) tmp := base64.StdEncoding.EncodeToString(tmpB[:]) tmp = strings.ReplaceAll(tmp, \"+\", \"-\") tmp = strings.ReplaceAll(tmp, \"/\", \"_\") tmp = strings.ReplaceAll(tmp, \"=\", \"\") return tmp } // step3: generate link req.URL.Query().Set(\"sign\", sign(origin)) req.URL.Query().Set(\"time\", fmt.Sprintf(\"%d\", expires)) } step2: the sign logic in shell is: echo -n $origin | openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d = // one example: echo -n '2147483647/s/link127.0.0.1 secret' | openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d = _e4Nc3iduzkWRm01TBBNYw","title":"mod_secure_link"},{"location":"modules/mod_secure_link/mod_secure_link/#mod_secure_link","text":"","title":"mod_secure_link"},{"location":"modules/mod_secure_link/mod_secure_link/#introduction","text":"mod_secure_link is used to check authenticity of requested links, protect resources from unauthorized access, and limit link lifetime.","title":"Introduction"},{"location":"modules/mod_secure_link/mod_secure_link/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_secure_link/mod_secure_link/#description","text":"the basic config in: conf/mod_secure_link/mod_secure_link.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module","title":"Description"},{"location":"modules/mod_secure_link/mod_secure_link/#example","text":"[Basic] DataPath = ./mod_secure_link/secure_link.data [Log] OpenDebug = true","title":"Example"},{"location":"modules/mod_secure_link/mod_secure_link/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_secure_link/mod_secure_link/#description_1","text":"conf/mod_secure_link/secure_link_rule.data Config Item Description Version String Version of config file Config Object Rules for each product Config{k} String Product name Config{v} Object A list of rules Config{v}[].Cond String Condition expression, See Condition Config[v][].ChecksumKey String The key which stored Checksum Value in Query Config[v][].ExpiresKey String The key which stored Expired time in Query Config[v][].ExpressionNodes Array Nodes which join calculate Checksum Config[v][].ExpressionNodes[].Type String Node Type, see Node Type to get more information Config[v][].ExpressionNodes[].Param String The param may be used to get Final Value","title":"Description"},{"location":"modules/mod_secure_link/mod_secure_link/#node-type","text":"be supported node type and Calculate logic: type Calculate logic label $Param query req.URL.Query($Param) header req.Header.Get($Param) host req.Host uri req.RequestURI remote_addr req.RemoteAddr","title":"Node Type"},{"location":"modules/mod_secure_link/mod_secure_link/#example_1","text":"{ \"Version\": \"2019-12-10184356\", \"Config\": { \"p1\": [{ \"Cond\": \"default_t()\", \"ChecksumKey\": \"sign\", \"ExpiresKey\": \"time\", \"ExpressionNodes\": [{ \"Type\": \"query\", \"Param\": \"time\" }, { \"Type\": \"uri\" }, { \"Type\": \"remote_addr\" }, { \"Type\": \"label\", \"Param\": \" secret\" } ] }] } }","title":"Example"},{"location":"modules/mod_secure_link/mod_secure_link/#link-generate-logic","text":"With above config, the pseudo code to generate link is\uff1a func WrapSecureLinkParam (req *http.Request) { now := time.Now().Unix() expires := now + int64(time.Hour*24/time.Second) // step1: get origin data origin := fmt.Sprintf(\"%d%s%s%s\", expires, req.RequestURI, req.RemoteAddr, \" secret\") // step2: generator sign sign := func(origin string) string { tmpB := md5.Sum([]byte(origin)) tmp := base64.StdEncoding.EncodeToString(tmpB[:]) tmp = strings.ReplaceAll(tmp, \"+\", \"-\") tmp = strings.ReplaceAll(tmp, \"/\", \"_\") tmp = strings.ReplaceAll(tmp, \"=\", \"\") return tmp } // step3: generate link req.URL.Query().Set(\"sign\", sign(origin)) req.URL.Query().Set(\"time\", fmt.Sprintf(\"%d\", expires)) } step2: the sign logic in shell is: echo -n $origin | openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d = // one example: echo -n '2147483647/s/link127.0.0.1 secret' | openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d = _e4Nc3iduzkWRm01TBBNYw","title":"Link generate logic"},{"location":"modules/mod_static/mod_static/","text":"mod_static Introduction mod_static serves static files. Module Configuration Description conf/mod_static/mod_static.conf Config Item Description Basic.DataPath String Path of rule configuration Example [Basic] DataPath = mod_static/static_rule.data Rule Configuration Description conf/mod_static/static_rule.data Config Item Description Version String Version of config file Config Struct Static rules for each product Config{k} String Product name Config{v} Object A ordered list of static rules Config{v}[] Object A static rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Action Object A static action Config{v}[].Action.Cmd String Name of static action Config{v}[].Action.Params Object Parameters of static action Actions Action Description BROWSE Serve static files. The first parameter is the location of root directory. The second parameter is the name of default file. Example { \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"Action\": { \"Cmd\": \"BROWSE\", \"Params\": [ \"./\", \"index.html\" ] } } ] }, \"Version\": \"20190101000000\" } Metrics Metric Description FILE_BROWSE_COUNT Counter for BROWSE requests FILE_CURRENT_OPENED Counter for current opend files FILE_BROWSE_NOT_EXIST Counter for \"file not exists\" requests FILE_BROWSE_SIZE Total served file size","title":"mod_static"},{"location":"modules/mod_static/mod_static/#mod_static","text":"","title":"mod_static"},{"location":"modules/mod_static/mod_static/#introduction","text":"mod_static serves static files.","title":"Introduction"},{"location":"modules/mod_static/mod_static/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_static/mod_static/#description","text":"conf/mod_static/mod_static.conf Config Item Description Basic.DataPath String Path of rule configuration","title":"Description"},{"location":"modules/mod_static/mod_static/#example","text":"[Basic] DataPath = mod_static/static_rule.data","title":"Example"},{"location":"modules/mod_static/mod_static/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_static/mod_static/#description_1","text":"conf/mod_static/static_rule.data Config Item Description Version String Version of config file Config Struct Static rules for each product Config{k} String Product name Config{v} Object A ordered list of static rules Config{v}[] Object A static rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Action Object A static action Config{v}[].Action.Cmd String Name of static action Config{v}[].Action.Params Object Parameters of static action","title":"Description"},{"location":"modules/mod_static/mod_static/#actions","text":"Action Description BROWSE Serve static files. The first parameter is the location of root directory. The second parameter is the name of default file.","title":"Actions"},{"location":"modules/mod_static/mod_static/#example_1","text":"{ \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"www.example.org\\\")\", \"Action\": { \"Cmd\": \"BROWSE\", \"Params\": [ \"./\", \"index.html\" ] } } ] }, \"Version\": \"20190101000000\" }","title":"Example"},{"location":"modules/mod_static/mod_static/#metrics","text":"Metric Description FILE_BROWSE_COUNT Counter for BROWSE requests FILE_CURRENT_OPENED Counter for current opend files FILE_BROWSE_NOT_EXIST Counter for \"file not exists\" requests FILE_BROWSE_SIZE Total served file size","title":"Metrics"},{"location":"modules/mod_tag/mod_tag/","text":"mod_tag Introduction mod_tag sets tags for requests based on defined rules. Module Configuration Description conf/mod_tag/mod_tag.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module Example [Basic] DataPath = mod_tag/tag_rule.data [Log] OpenDebug = true Rule Configuration Description conf/mod_tag/tag_rule.data Config Item Description Version String Version of the config file Config Object Tag rules for each product Config{k} String Product name Config{v} Object A list of tag rules Config{v}[] Object A tag rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Param.TagName String Tag name Config{v}[].Param.TagValue String Tag value Config{v}[].Last Boolean If true, stop to check the remaining rules Example { \"Version\": \"20200218210000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"Param\": { \"TagName\": \"tag\", \"TagValue\": \"bfe\" }, \"Last\": false } ] } }","title":"mod_tag"},{"location":"modules/mod_tag/mod_tag/#mod_tag","text":"","title":"mod_tag"},{"location":"modules/mod_tag/mod_tag/#introduction","text":"mod_tag sets tags for requests based on defined rules.","title":"Introduction"},{"location":"modules/mod_tag/mod_tag/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_tag/mod_tag/#description","text":"conf/mod_tag/mod_tag.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module","title":"Description"},{"location":"modules/mod_tag/mod_tag/#example","text":"[Basic] DataPath = mod_tag/tag_rule.data [Log] OpenDebug = true","title":"Example"},{"location":"modules/mod_tag/mod_tag/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_tag/mod_tag/#description_1","text":"conf/mod_tag/tag_rule.data Config Item Description Version String Version of the config file Config Object Tag rules for each product Config{k} String Product name Config{v} Object A list of tag rules Config{v}[] Object A tag rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Param.TagName String Tag name Config{v}[].Param.TagValue String Tag value Config{v}[].Last Boolean If true, stop to check the remaining rules","title":"Description"},{"location":"modules/mod_tag/mod_tag/#example_1","text":"{ \"Version\": \"20200218210000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"Param\": { \"TagName\": \"tag\", \"TagValue\": \"bfe\" }, \"Last\": false } ] } }","title":"Example"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/","text":"mod_tcp_keepalive Introduction mod_tcp_keepalive is used to set strategy of sending keepalive message in tcp connection. In some situation, like smart watch, the device is sensitive to power consumption, it may be necessary to close the TCP-KeepAlive heartbeat message or increase the interval of sending TCP-KeepAlive heartbeat message. mod_tcp_keepalive can help to handle situation like this. Module Configuration Description conf/mod_tcp_keepalive/mod_tcp_keepalive.conf Config Item Description Basic.DataPath String Path of product rule configuration Log.OpenDebug Boolean Open debug mode or not Example [Basic] DataPath = ../data/mod_tcp_keepalive/tcp_keepalive.data [Log] OpenDebug = false Rule Configuration Description Config Item Description Version String Version of config file Config Object Rules for each product Config{k} String Product name Config{v} Array A list of rules Config{v}[] Object A specific rule Config{v}[].VipConf Array The list of virtual IPs to set the keepalive message strategy Config{v}[].KeepAliveParam Object The specific keepalive message strategy Config{v}[].KeepaliveParam.Disable Bool Disable sending keepalive message or not, default false Config{v}[].KeepaliveParam.KeepIdle Int Period to send heartbeat message since there is no data transport in tcp connection Config{v}[].KeepaliveParam.KeepIntvl Int Period to send heartbeat message again when last message is not applied Config{v}[].KeepaliveParam.KeepCnt Int Counter to resend heartbeat message when last message is not applied Example { \"Config\": { \"product1\": [ { \"VipConf\": [\"10.1.1.1\", \"10.1.1.2\"], \"KeepAliveParam\": { \"KeepIdle\": 70, \"KeepIntvl\": 15, \"KeepCnt\": 9 } }, { \"VipConf\": [\"10.1.1.3\"], \"KeepAliveParam\": { \"Disable\": true } } ], \"product2\": [ { \"VipConf\": [\"10.2.1.1\"], \"KeepAliveParam\": { \"KeepIdle\": 20, \"KeepIntvl\": 15 } } ] }, \"Version\": \"2021-06-25 14:31:05\" } Metrics Metric Description CONN_TO_SET Counter for connection which hit rule, to set or disable keeplaive CONN_SET_KEEP_IDLE Counter for connection set keepalive idle CONN_SET_KEEP_IDLE_ERROR Counter for connection set keepalive idle error CONN_SET_KEEP_INTVL Counter for connection set keepalive interval CONN_SET_KEEP_INTVL_ERROR Counter for connection set keepalive interval error CONN_SET_KEEP_CNT Counter for connection set keepalive retry count CONN_SET_KEEP_CNT_ERROR Counter for connection set keepalive retry count error CONN_DISABLE_KEEP_ALIVE Counter for connection disable keepalive message CONN_DISABLE_KEEP_ALIVE_ERROR Counter for connection disable keepalive error CONN_COVERT_TO_TCP_CONN_ERROR Counter for connection convert to TCPConn error","title":"mod_tcp_keepalive"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#mod_tcp_keepalive","text":"","title":"mod_tcp_keepalive"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#introduction","text":"mod_tcp_keepalive is used to set strategy of sending keepalive message in tcp connection. In some situation, like smart watch, the device is sensitive to power consumption, it may be necessary to close the TCP-KeepAlive heartbeat message or increase the interval of sending TCP-KeepAlive heartbeat message. mod_tcp_keepalive can help to handle situation like this.","title":"Introduction"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#description","text":"conf/mod_tcp_keepalive/mod_tcp_keepalive.conf Config Item Description Basic.DataPath String Path of product rule configuration Log.OpenDebug Boolean Open debug mode or not","title":"Description"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#example","text":"[Basic] DataPath = ../data/mod_tcp_keepalive/tcp_keepalive.data [Log] OpenDebug = false","title":"Example"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#description_1","text":"Config Item Description Version String Version of config file Config Object Rules for each product Config{k} String Product name Config{v} Array A list of rules Config{v}[] Object A specific rule Config{v}[].VipConf Array The list of virtual IPs to set the keepalive message strategy Config{v}[].KeepAliveParam Object The specific keepalive message strategy Config{v}[].KeepaliveParam.Disable Bool Disable sending keepalive message or not, default false Config{v}[].KeepaliveParam.KeepIdle Int Period to send heartbeat message since there is no data transport in tcp connection Config{v}[].KeepaliveParam.KeepIntvl Int Period to send heartbeat message again when last message is not applied Config{v}[].KeepaliveParam.KeepCnt Int Counter to resend heartbeat message when last message is not applied","title":"Description"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#example_1","text":"{ \"Config\": { \"product1\": [ { \"VipConf\": [\"10.1.1.1\", \"10.1.1.2\"], \"KeepAliveParam\": { \"KeepIdle\": 70, \"KeepIntvl\": 15, \"KeepCnt\": 9 } }, { \"VipConf\": [\"10.1.1.3\"], \"KeepAliveParam\": { \"Disable\": true } } ], \"product2\": [ { \"VipConf\": [\"10.2.1.1\"], \"KeepAliveParam\": { \"KeepIdle\": 20, \"KeepIntvl\": 15 } } ] }, \"Version\": \"2021-06-25 14:31:05\" }","title":"Example"},{"location":"modules/mod_tcp_keepalive/mod_tcp_keepalive/#metrics","text":"Metric Description CONN_TO_SET Counter for connection which hit rule, to set or disable keeplaive CONN_SET_KEEP_IDLE Counter for connection set keepalive idle CONN_SET_KEEP_IDLE_ERROR Counter for connection set keepalive idle error CONN_SET_KEEP_INTVL Counter for connection set keepalive interval CONN_SET_KEEP_INTVL_ERROR Counter for connection set keepalive interval error CONN_SET_KEEP_CNT Counter for connection set keepalive retry count CONN_SET_KEEP_CNT_ERROR Counter for connection set keepalive retry count error CONN_DISABLE_KEEP_ALIVE Counter for connection disable keepalive message CONN_DISABLE_KEEP_ALIVE_ERROR Counter for connection disable keepalive error CONN_COVERT_TO_TCP_CONN_ERROR Counter for connection convert to TCPConn error","title":"Metrics"},{"location":"modules/mod_trace/mod_trace/","text":"mod_trace Introduction mod_trace enables tracing for requests based on defined rules. Module Configuration Description conf/mod_trace/mod_trace.conf Basic Configuration Config Item Description Basic.DataPath String Path of rule configuration Basic.ServiceName String Service name Basic.TraceAgent String Which trace agent to use (jaeger/zipkin) Log.OpenDebug Boolean Debug flag of module Configuration about Zipkin Config Item Description Zipkin.HTTPEndpoint String Http endpoint to report traces to Zipkin.SameSpan String Whether to use Zipkin SameSpan RPC style traces Zipkin.ID128Bit String Whether to use 128 bit root span IDs Zipkin.SampleRate Float The rate between 0.0001 and 1.0 of requests to trace Configuration about Jaeger Config Item Description Jaeger.SamplingServerURL String The address of jaeger-agent's HTTP sampling server Jaeger.SamplingType String The type of the sampler: const, probabilistic, rateLimiting, or remote Jaeger.SamplingParam Float Param passed to the sampler Jaeger.LocalAgentHostPort String The address of jaeger-agent which receives spans Jaeger.Propagation String Which propagation format to use (jaeger/b3) Jaeger.Gen128Bit Boolean Whether to use 128 bit root span IDs Jaeger.TraceContextHeaderName String The http header name used to propagate tracing context Jaeger.CollectorEndpoint String The address of jaeger-collector Jaeger.CollectorUser String Basic http authentication when sending spans to jaeger-collector Jaeger.CollectorPassword String Basic http authentication when sending spans to jaeger-collector Configuration about Elastic Config Item Description Elastic.ServerURL String Set the URL of the Elastic APM server Elastic.SecretToken String Set the token used to connect to Elastic APM Server Example Example for Zipkin [Basic] DataPath = mod_trace/trace_rule.data ServiceName = bfe # Which trace agent to use (zipkin, jaeger, elastic) TraceAgent = zipkin [Log] OpenDebug = false [Zipkin] # Zipkin, only useful when the TraceAgent is zipkin # HTTP Endpoint to report traces to HTTPEndpoint = http://127.0.0.1:9411/api/v2/spans # Use Zipkin SameSpan RPC style traces SameSpan = false # Use Zipkin 128 bit root span IDs ID128Bit = true # The rate between 0.0001 and 1.0 of requests to trace SampleRate = 1.0 Example for Jaeger [Basic] DataPath = mod_trace/trace_rule.data ServiceName = bfe # Which trace agent to use (zipkin, jaeger, elastic) TraceAgent = jaeger [Log] OpenDebug = false [Jaeger] # Jaeger, only useful when the TraceAgent is jaeger # SamplingServerURL is the address of jaeger-agent's HTTP sampling server SamplingServerURL = http://127.0.0.1:5778/sampling # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote SamplingType = const # Param is a value passed to the sampler. # Valid values for Param field are: # - for \"const\" sampler, 0 or 1 for always false/true respectively # - for \"probabilistic\" sampler, a probability between 0 and 1 # - for \"rateLimiting\" sampler, the number of spans per second # - for \"remote\" sampler, param is the same as for \"probabilistic\" # and indicates the initial sampling rate before the actual one # is received from the mothership. SamplingParam = 1.0 # LocalAgentHostPort instructs reporter to send spans to jaeger-agent at this address LocalAgentHostPort = 127.0.0.1:6831 # Which propagation format to use (jaeger/b3) Propagation = jaeger # Use Jaeger 128 bit root span IDs Gen128Bit = true # TraceContextHeaderName is the http header name used to propagate tracing context. TraceContextHeaderName = uber-trace-id # Instructs reporter to send spans to jaeger-collector at this URL CollectorEndpoint = \"\" # CollectorUser for basic http authentication when sending spans to jaeger-collector CollectorUser = \"\" # CollectorPassword for basic http authentication when sending spans to jaeger-collector CollectorPassword = \"\" Example for Elastic [Basic] DataPath = mod_trace/trace_rule.data ServiceName = bfe # Which trace agent to use (zipkin, jaeger, elastic) TraceAgent = elastic [Log] OpenDebug = false [Elastic] # Elastic, only useful when TraceAgent is elastic # Set the URL of the Elastic APM server ServerURL = http://127.0.0.1:8200 # Set the token used to connect to Elastic APM Server SecretToken = \"\" Rule Configuration Description conf/mod_trace/trace_rule.data Config Item Description Version String Version of the config file Config Object Trace rules for each product Config[k] String Product name Config[v] Object A list of trace rules Config[v][] Object A trace rule Config[v][].Cond String Condition expression, See Condition Config[v][].Enable Boolean Enable trace Example { \"Version\": \"20200218210000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"Enable\": true } ] } }","title":"mod_trace"},{"location":"modules/mod_trace/mod_trace/#mod_trace","text":"","title":"mod_trace"},{"location":"modules/mod_trace/mod_trace/#introduction","text":"mod_trace enables tracing for requests based on defined rules.","title":"Introduction"},{"location":"modules/mod_trace/mod_trace/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_trace/mod_trace/#description","text":"conf/mod_trace/mod_trace.conf","title":"Description"},{"location":"modules/mod_trace/mod_trace/#basic-configuration","text":"Config Item Description Basic.DataPath String Path of rule configuration Basic.ServiceName String Service name Basic.TraceAgent String Which trace agent to use (jaeger/zipkin) Log.OpenDebug Boolean Debug flag of module","title":"Basic Configuration"},{"location":"modules/mod_trace/mod_trace/#configuration-about-zipkin","text":"Config Item Description Zipkin.HTTPEndpoint String Http endpoint to report traces to Zipkin.SameSpan String Whether to use Zipkin SameSpan RPC style traces Zipkin.ID128Bit String Whether to use 128 bit root span IDs Zipkin.SampleRate Float The rate between 0.0001 and 1.0 of requests to trace","title":"Configuration about Zipkin"},{"location":"modules/mod_trace/mod_trace/#configuration-about-jaeger","text":"Config Item Description Jaeger.SamplingServerURL String The address of jaeger-agent's HTTP sampling server Jaeger.SamplingType String The type of the sampler: const, probabilistic, rateLimiting, or remote Jaeger.SamplingParam Float Param passed to the sampler Jaeger.LocalAgentHostPort String The address of jaeger-agent which receives spans Jaeger.Propagation String Which propagation format to use (jaeger/b3) Jaeger.Gen128Bit Boolean Whether to use 128 bit root span IDs Jaeger.TraceContextHeaderName String The http header name used to propagate tracing context Jaeger.CollectorEndpoint String The address of jaeger-collector Jaeger.CollectorUser String Basic http authentication when sending spans to jaeger-collector Jaeger.CollectorPassword String Basic http authentication when sending spans to jaeger-collector","title":"Configuration about Jaeger"},{"location":"modules/mod_trace/mod_trace/#configuration-about-elastic","text":"Config Item Description Elastic.ServerURL String Set the URL of the Elastic APM server Elastic.SecretToken String Set the token used to connect to Elastic APM Server","title":"Configuration about Elastic"},{"location":"modules/mod_trace/mod_trace/#example","text":"","title":"Example"},{"location":"modules/mod_trace/mod_trace/#example-for-zipkin","text":"[Basic] DataPath = mod_trace/trace_rule.data ServiceName = bfe # Which trace agent to use (zipkin, jaeger, elastic) TraceAgent = zipkin [Log] OpenDebug = false [Zipkin] # Zipkin, only useful when the TraceAgent is zipkin # HTTP Endpoint to report traces to HTTPEndpoint = http://127.0.0.1:9411/api/v2/spans # Use Zipkin SameSpan RPC style traces SameSpan = false # Use Zipkin 128 bit root span IDs ID128Bit = true # The rate between 0.0001 and 1.0 of requests to trace SampleRate = 1.0","title":"Example for Zipkin"},{"location":"modules/mod_trace/mod_trace/#example-for-jaeger","text":"[Basic] DataPath = mod_trace/trace_rule.data ServiceName = bfe # Which trace agent to use (zipkin, jaeger, elastic) TraceAgent = jaeger [Log] OpenDebug = false [Jaeger] # Jaeger, only useful when the TraceAgent is jaeger # SamplingServerURL is the address of jaeger-agent's HTTP sampling server SamplingServerURL = http://127.0.0.1:5778/sampling # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote SamplingType = const # Param is a value passed to the sampler. # Valid values for Param field are: # - for \"const\" sampler, 0 or 1 for always false/true respectively # - for \"probabilistic\" sampler, a probability between 0 and 1 # - for \"rateLimiting\" sampler, the number of spans per second # - for \"remote\" sampler, param is the same as for \"probabilistic\" # and indicates the initial sampling rate before the actual one # is received from the mothership. SamplingParam = 1.0 # LocalAgentHostPort instructs reporter to send spans to jaeger-agent at this address LocalAgentHostPort = 127.0.0.1:6831 # Which propagation format to use (jaeger/b3) Propagation = jaeger # Use Jaeger 128 bit root span IDs Gen128Bit = true # TraceContextHeaderName is the http header name used to propagate tracing context. TraceContextHeaderName = uber-trace-id # Instructs reporter to send spans to jaeger-collector at this URL CollectorEndpoint = \"\" # CollectorUser for basic http authentication when sending spans to jaeger-collector CollectorUser = \"\" # CollectorPassword for basic http authentication when sending spans to jaeger-collector CollectorPassword = \"\"","title":"Example for Jaeger"},{"location":"modules/mod_trace/mod_trace/#example-for-elastic","text":"[Basic] DataPath = mod_trace/trace_rule.data ServiceName = bfe # Which trace agent to use (zipkin, jaeger, elastic) TraceAgent = elastic [Log] OpenDebug = false [Elastic] # Elastic, only useful when TraceAgent is elastic # Set the URL of the Elastic APM server ServerURL = http://127.0.0.1:8200 # Set the token used to connect to Elastic APM Server SecretToken = \"\"","title":"Example for Elastic"},{"location":"modules/mod_trace/mod_trace/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_trace/mod_trace/#description_1","text":"conf/mod_trace/trace_rule.data Config Item Description Version String Version of the config file Config Object Trace rules for each product Config[k] String Product name Config[v] Object A list of trace rules Config[v][] Object A trace rule Config[v][].Cond String Condition expression, See Condition Config[v][].Enable Boolean Enable trace","title":"Description"},{"location":"modules/mod_trace/mod_trace/#example_1","text":"{ \"Version\": \"20200218210000\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_host_in(\\\"example.org\\\")\", \"Enable\": true } ] } }","title":"Example"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/","text":"mod_trust_clientip Introduction mod_trust_clientip checks the client IP of incoming request/connnection against trusted ip dictionary. If matched, the request/connection is marked as trusted. Module Configuration Description conf/mod_trust_clientip/mod_trust_clientip.conf Config Item Description Basic.DataPath String Path of rule configuration Example [Basic] DataPath = mod_trust_clientip/trust_client_ip.data Rule Configuration Description conf/mod_trust_clientip/trust_client_ip.data Config Item Type Description Version String Version of config file Config Object Trusted ip config Config{k} Struct Label Config{v} String A list of ip segments Config{v}[] Object A ip segment Config{v}[].Begin String Start ip address Config{v}[].End String End ip address Example { \"Version\": \"20190101000000\", \"Config\": { \"inner-idc\": [ { \"Begin\": \"10.0.0.0\", \"End\": \"10.255.255.255\" } ] } } Metrics Metric Description CONN_ADDR_INTERNAL Counter for connection from internal CONN_ADDR_INTERNAL_NOT_TRUST Counter for connection from internal and not trust CONN_TOTAL Counter for all connnetion checked CONN_TRUST_CLIENTIP Counter for connection from trust address","title":"mod_trust_clientip"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#mod_trust_clientip","text":"","title":"mod_trust_clientip"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#introduction","text":"mod_trust_clientip checks the client IP of incoming request/connnection against trusted ip dictionary. If matched, the request/connection is marked as trusted.","title":"Introduction"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#description","text":"conf/mod_trust_clientip/mod_trust_clientip.conf Config Item Description Basic.DataPath String Path of rule configuration","title":"Description"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#example","text":"[Basic] DataPath = mod_trust_clientip/trust_client_ip.data","title":"Example"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#description_1","text":"conf/mod_trust_clientip/trust_client_ip.data Config Item Type Description Version String Version of config file Config Object Trusted ip config Config{k} Struct Label Config{v} String A list of ip segments Config{v}[] Object A ip segment Config{v}[].Begin String Start ip address Config{v}[].End String End ip address","title":"Description"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#example_1","text":"{ \"Version\": \"20190101000000\", \"Config\": { \"inner-idc\": [ { \"Begin\": \"10.0.0.0\", \"End\": \"10.255.255.255\" } ] } }","title":"Example"},{"location":"modules/mod_trust_clientip/mod_trust_clientip/#metrics","text":"Metric Description CONN_ADDR_INTERNAL Counter for connection from internal CONN_ADDR_INTERNAL_NOT_TRUST Counter for connection from internal and not trust CONN_TOTAL Counter for all connnetion checked CONN_TRUST_CLIENTIP Counter for connection from trust address","title":"Metrics"},{"location":"modules/mod_userid/mod_userid/","text":"mod_userid Introduction mod_userid generates user id for client identification. Module Configuration Description conf/mod_userid/mod_userid.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module Example [Basic] DataPath = mod_userid/userid_rule.data [Log] OpenDebug = true Rule Configuration Description conf/mod_userid/userid_rule.data Config Item Description Version String Version of config file Config Object Rules for each product Config{k} String Product name Config{v} Object A list of rules Config{v}[] Object A rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Params.Name String The cookie name Config{v}[].Params.Domain String The cookie domain Config{v}[].Params.Path String The cookie path Config{v}[].Params.MaxAge Integer The cookie max age Example { \"Version\": \"2019-12-10184356\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_prefix_in(\\\"/abc\\\", true)\", \"Params\": { \"Name\": \"bfe_userid_abc\", \"Domain\": \"\", \"Path\": \"/abc\", \"MaxAge\": 3153600 }, \"Generator\": \"default\" }, { \"Cond\": \"default_t()\", \"Params\": { \"Name\": \"bfe_userid\", \"Domain\": \"\", \"Path\": \"/\", \"MaxAge\": 3153600 } } ] } }","title":"mod_userid"},{"location":"modules/mod_userid/mod_userid/#mod_userid","text":"","title":"mod_userid"},{"location":"modules/mod_userid/mod_userid/#introduction","text":"mod_userid generates user id for client identification.","title":"Introduction"},{"location":"modules/mod_userid/mod_userid/#module-configuration","text":"","title":"Module Configuration"},{"location":"modules/mod_userid/mod_userid/#description","text":"conf/mod_userid/mod_userid.conf Config Item Description Basic.DataPath String Path of rule configuration Log.OpenDebug Boolean Debug flag of module","title":"Description"},{"location":"modules/mod_userid/mod_userid/#example","text":"[Basic] DataPath = mod_userid/userid_rule.data [Log] OpenDebug = true","title":"Example"},{"location":"modules/mod_userid/mod_userid/#rule-configuration","text":"","title":"Rule Configuration"},{"location":"modules/mod_userid/mod_userid/#description_1","text":"conf/mod_userid/userid_rule.data Config Item Description Version String Version of config file Config Object Rules for each product Config{k} String Product name Config{v} Object A list of rules Config{v}[] Object A rule Config{v}[].Cond String Condition expression, See Condition Config{v}[].Params.Name String The cookie name Config{v}[].Params.Domain String The cookie domain Config{v}[].Params.Path String The cookie path Config{v}[].Params.MaxAge Integer The cookie max age","title":"Description"},{"location":"modules/mod_userid/mod_userid/#example_1","text":"{ \"Version\": \"2019-12-10184356\", \"Config\": { \"example_product\": [ { \"Cond\": \"req_path_prefix_in(\\\"/abc\\\", true)\", \"Params\": { \"Name\": \"bfe_userid_abc\", \"Domain\": \"\", \"Path\": \"/abc\", \"MaxAge\": 3153600 }, \"Generator\": \"default\" }, { \"Cond\": \"default_t()\", \"Params\": { \"Name\": \"bfe_userid\", \"Domain\": \"\", \"Path\": \"/\", \"MaxAge\": 3153600 } } ] } }","title":"Example"},{"location":"monitor/bal_state/","text":"Balancing Error Introduction The endpoint /monitor/bal_state exposes metrics about subcluster level load balancing. Metrics Metric Description ERR_BK_NO_BACKEND Counter for no backend found ERR_BK_NO_SUB_CLUSTER Counter for no sub-cluster found ERR_BK_NO_SUB_CLUSTER_CROSS Counter for no cross sub-cluster found ERR_BK_RETRY_TOO_MANY Counter for reaching retry max times ERR_GSLB_BLACKHOLE Counter for denying by blackhole","title":"Balance error"},{"location":"monitor/bal_state/#balancing-error","text":"","title":"Balancing Error"},{"location":"monitor/bal_state/#introduction","text":"The endpoint /monitor/bal_state exposes metrics about subcluster level load balancing.","title":"Introduction"},{"location":"monitor/bal_state/#metrics","text":"Metric Description ERR_BK_NO_BACKEND Counter for no backend found ERR_BK_NO_SUB_CLUSTER Counter for no sub-cluster found ERR_BK_NO_SUB_CLUSTER_CROSS Counter for no cross sub-cluster found ERR_BK_RETRY_TOO_MANY Counter for reaching retry max times ERR_GSLB_BLACKHOLE Counter for denying by blackhole","title":"Metrics"},{"location":"monitor/bal_table_status/","text":"Balancing Details Introduction The endpoint /monitor/bal_table_status exposes metrics about backend clusters. Metrics Metric Description Balancers State of cluster, it is map data, key is cluster name, value is cluster state BackendNum Number of cluster backend cluster state Monitor Item Description SubClusters State of sub-cluster, it is map data, key is sub-cluster name, value is number of sub-cluster backend BackendNum Number of sub-cluster backend","title":"Balance details"},{"location":"monitor/bal_table_status/#balancing-details","text":"","title":"Balancing Details"},{"location":"monitor/bal_table_status/#introduction","text":"The endpoint /monitor/bal_table_status exposes metrics about backend clusters.","title":"Introduction"},{"location":"monitor/bal_table_status/#metrics","text":"Metric Description Balancers State of cluster, it is map data, key is cluster name, value is cluster state BackendNum Number of cluster backend","title":"Metrics"},{"location":"monitor/bal_table_status/#cluster-state","text":"Monitor Item Description SubClusters State of sub-cluster, it is map data, key is sub-cluster name, value is number of sub-cluster backend BackendNum Number of sub-cluster backend","title":"cluster state"},{"location":"monitor/host_table_status/","text":"Routing Introduction The endpoint /monitor/host_table_status expose metrics about routing configurations. Metrics Metric Description HostTableSize Size of host table HostTagTableSize Size of host tag table VipTableSize Size of vip table ProductRouteTableSize Size of product route table","title":"Host table"},{"location":"monitor/host_table_status/#routing","text":"","title":"Routing"},{"location":"monitor/host_table_status/#introduction","text":"The endpoint /monitor/host_table_status expose metrics about routing configurations.","title":"Introduction"},{"location":"monitor/host_table_status/#metrics","text":"Metric Description HostTableSize Size of host table HostTagTableSize Size of host tag table VipTableSize Size of vip table ProductRouteTableSize Size of product route table","title":"Metrics"},{"location":"monitor/http2_state/","text":"HTTP2 Introduction The endpoint /monitor/http2_state exposes metrics about HTTP2 protocol. Metrics Metric Description H2_ERR_MAX_HEADER_LIST_SIZE Counter for reaching max size of header list H2_ERR_MAX_HEADER_URI_SIZE Counter for reaching max size of header URI H2_ERR_MAX_STREAM_PER_CONN Counter for reaching advertised concurrent stream limit H2_ERR_GOT_RESET Counter for getting RST_STREAM H2_PANIC_CONN Counter for connection panic H2_PANIC_STREAM Counter for stream panic H2_REQ_HEADER_COMPRESS_SIZE Size of request header after compress H2_REQ_HEADER_ORIGINAL_SIZE Size of request header before compress H2_RES_HEADER_COMPRESS_SIZE Size of response header after compress H2_RES_HEADER_ORIGINAL_SIZE Size of response header before compress H2_TIMEOUT_CONN Counter for timeout of HTTP2 connection timeout H2_TIMEOUT_PREFACE Counter for timeout of waiting for client preface H2_TIMEOUT_READ_STREAM Counter for timeout of waiting for reading stream H2_TIMEOUT_SETTING Counter for timeout of waiting for SETTINGS frames H2_TIMEOUT_WRITE_STREAM Counter for timeout of waiting for writing stream","title":"HTTP2"},{"location":"monitor/http2_state/#http2","text":"","title":"HTTP2"},{"location":"monitor/http2_state/#introduction","text":"The endpoint /monitor/http2_state exposes metrics about HTTP2 protocol.","title":"Introduction"},{"location":"monitor/http2_state/#metrics","text":"Metric Description H2_ERR_MAX_HEADER_LIST_SIZE Counter for reaching max size of header list H2_ERR_MAX_HEADER_URI_SIZE Counter for reaching max size of header URI H2_ERR_MAX_STREAM_PER_CONN Counter for reaching advertised concurrent stream limit H2_ERR_GOT_RESET Counter for getting RST_STREAM H2_PANIC_CONN Counter for connection panic H2_PANIC_STREAM Counter for stream panic H2_REQ_HEADER_COMPRESS_SIZE Size of request header after compress H2_REQ_HEADER_ORIGINAL_SIZE Size of request header before compress H2_RES_HEADER_COMPRESS_SIZE Size of response header after compress H2_RES_HEADER_ORIGINAL_SIZE Size of response header before compress H2_TIMEOUT_CONN Counter for timeout of HTTP2 connection timeout H2_TIMEOUT_PREFACE Counter for timeout of waiting for client preface H2_TIMEOUT_READ_STREAM Counter for timeout of waiting for reading stream H2_TIMEOUT_SETTING Counter for timeout of waiting for SETTINGS frames H2_TIMEOUT_WRITE_STREAM Counter for timeout of waiting for writing stream","title":"Metrics"},{"location":"monitor/http_state/","text":"HTTP Introduction The endpoint /monitor/http_state exposes metrics about HTTP protocol. Metrics Metric Description HTTP_BACKEND_CONN_ALL Counter for connecting with backend HTTP_BACKEND_CONN_SUCC Counter for connecting successfully with backend HTTP_BACKEND_REQ_ALL Counter for sending request to backend HTTP_BACKEND_REQ_SUCC Counter for sending successfully request to backend HTTP_PANIC_BACKEND_READ Counter for reading backend panic HTTP_PANIC_BACKEND_WRITE Counter for writing backend panic HTTP_PANIC_CLIENT_FLUSH_LOOP Counter for client flushing loop panic HTTP_PANIC_CLIENT_WATCH_LOOP Counter for client watching loop panic","title":"HTTP"},{"location":"monitor/http_state/#http","text":"","title":"HTTP"},{"location":"monitor/http_state/#introduction","text":"The endpoint /monitor/http_state exposes metrics about HTTP protocol.","title":"Introduction"},{"location":"monitor/http_state/#metrics","text":"Metric Description HTTP_BACKEND_CONN_ALL Counter for connecting with backend HTTP_BACKEND_CONN_SUCC Counter for connecting successfully with backend HTTP_BACKEND_REQ_ALL Counter for sending request to backend HTTP_BACKEND_REQ_SUCC Counter for sending successfully request to backend HTTP_PANIC_BACKEND_READ Counter for reading backend panic HTTP_PANIC_BACKEND_WRITE Counter for writing backend panic HTTP_PANIC_CLIENT_FLUSH_LOOP Counter for client flushing loop panic HTTP_PANIC_CLIENT_WATCH_LOOP Counter for client watching loop panic","title":"Metrics"},{"location":"monitor/latency/","text":"Latency Histogram Introduction Endpoint Description /monitor/proxy_handshake_delay Latency of the TLS handshake /monitor/proxy_handshake_full_delay Latency of the TLS full handshake /monitor/proxy_handshake_resume_delay Latency of the TLS abbreviated handshake /monitor/proxy_delay Forwarding Latency for the GET requests /monitor/proxy_post_delay Forwarding Latency for the POST requests Metrics Metric Description Interval Statistical period (second) ProgramName Program name KeyPrefix Key prefix CurrTime Start time of current statistics Current Latency histogram for current statistics PastTime Start time of last statistics Past Latency histogram for last statistics Special Notes for Prometheus format BFE can expose metrics in various formats. Unlike other formats, in the Prometheus format latency histogram, counter for a bucket with lager upper bound will include the number of events in buckets with smaller upper bound. See Histogram in Prometheus document for more detail. Example: proxy_handshake_delay_Past_bucket{le=\"1000\"} is counter of handshakes with <= 1000 ms delay in last statistic interval proxy_handshake_delay_Past_bucket{le=\"2000\"} is counter of handshakes with <= 2000 ms delay (includes those with <=1000 ms delay) in last statistic interval proxy_handshake_delay_Past_bucket{le=\"+Inf\"} is counter of handshakes with less than infinity (equals total count) in last statistic interval. It is equal to proxy_handshake_delay_Past_count.","title":"Lentency histogram"},{"location":"monitor/latency/#latency-histogram","text":"","title":"Latency Histogram"},{"location":"monitor/latency/#introduction","text":"Endpoint Description /monitor/proxy_handshake_delay Latency of the TLS handshake /monitor/proxy_handshake_full_delay Latency of the TLS full handshake /monitor/proxy_handshake_resume_delay Latency of the TLS abbreviated handshake /monitor/proxy_delay Forwarding Latency for the GET requests /monitor/proxy_post_delay Forwarding Latency for the POST requests","title":"Introduction"},{"location":"monitor/latency/#metrics","text":"Metric Description Interval Statistical period (second) ProgramName Program name KeyPrefix Key prefix CurrTime Start time of current statistics Current Latency histogram for current statistics PastTime Start time of last statistics Past Latency histogram for last statistics","title":"Metrics"},{"location":"monitor/latency/#special-notes-for-prometheus-format","text":"BFE can expose metrics in various formats. Unlike other formats, in the Prometheus format latency histogram, counter for a bucket with lager upper bound will include the number of events in buckets with smaller upper bound. See Histogram in Prometheus document for more detail. Example: proxy_handshake_delay_Past_bucket{le=\"1000\"} is counter of handshakes with <= 1000 ms delay in last statistic interval proxy_handshake_delay_Past_bucket{le=\"2000\"} is counter of handshakes with <= 2000 ms delay (includes those with <=1000 ms delay) in last statistic interval proxy_handshake_delay_Past_bucket{le=\"+Inf\"} is counter of handshakes with less than infinity (equals total count) in last statistic interval. It is equal to proxy_handshake_delay_Past_count.","title":"Special Notes for Prometheus format"},{"location":"monitor/module_status/","text":"Modules Introduction The endpoint /monitor/modules exposes information about modules. Metrics Metric Description available List of available modules enabled List of enable modules For more details about metrics of each module, see BFE modules .","title":"Modules"},{"location":"monitor/module_status/#modules","text":"","title":"Modules"},{"location":"monitor/module_status/#introduction","text":"The endpoint /monitor/modules exposes information about modules.","title":"Introduction"},{"location":"monitor/module_status/#metrics","text":"Metric Description available List of available modules enabled List of enable modules For more details about metrics of each module, see BFE modules .","title":"Metrics"},{"location":"monitor/proxy_mem_stat/","text":"Memory Introduction The endpoint /monitor/proxy_mem_stat expose information about memory. Metrics See golang runtime.MemStats","title":"Memory"},{"location":"monitor/proxy_mem_stat/#memory","text":"","title":"Memory"},{"location":"monitor/proxy_mem_stat/#introduction","text":"The endpoint /monitor/proxy_mem_stat expose information about memory.","title":"Introduction"},{"location":"monitor/proxy_mem_stat/#metrics","text":"See golang runtime.MemStats","title":"Metrics"},{"location":"monitor/proxy_state/","text":"Proxy Introduction The endpoint /monitor/proxy_state exposes metrics about reverse proxy. Metrics Metric Description CLIENT_CONN_ACTIVE Counter for active connection CLIENT_CONN_SERVED Counter for connection serverd CLIENT_CONN_UNFINISHED_REQ Counter for connection closed with unfinished request CLIENT_CONN_USE100_CONTINUE Counter for connection used expect 100 continue CLIENT_REQ_ACTIVE Counter for active request CLIENT_REQ_FAIL Counter for failed request CLIENT_REQ_FAIL_WITH_NO_RETRY Counter for request fail with no retry CLIENT_REQ_SERVED Counter for request serverd CLIENT_REQ_WITH_CROSS_RETRY Counter for request serverd with cross cluster retry CLIENT_REQ_WITH_RETRY Counter for request serverd with retry ERR_BK_CONNECT_BACKEND Counter for connecting backend failed ERR_BK_FIND_LOCATION Counter for finding location failed ERR_BK_FIND_PRODUCT Counter for finding product failed ERR_BK_NO_BALANCE Counter for no balance config of backend ERR_BK_NO_CLUSTER Counter for no cluster config of backend ERR_BK_READ_RESP_HEADER Counter for reading response header from backend failed ERR_BK_REQUEST_BACKEND Counter for fail in invoking backend ERR_BK_RESP_HEADER_TIMEOUT Counter for getting response header from backend timeout ERR_BK_TRANSPORT_BROKEN Counter for transport broken of backend ERR_BK_WRITE_REQUEST Counter for writing request to backend failed ERR_CLIENT_BAD_REQUEST Counter for bad request of client ERR_CLIENT_CLOSE Counter for client closing connection ERR_CLIENT_CONN_ACCEPT Counter for accepting connection from client failed ERR_CLIENT_EXPECT_FAIL Counter for expecting fail from client ERR_CLIENT_LONG_HEADER Counter for request entity too large ERR_CLIENT_LONG_URL Counter for exceeding URI length limit ERR_CLIENT_RESET Counter for reseting by client ERR_CLIENT_TIMEOUT Counter for connecting with client timeout ERR_CLIENT_WRITE Counter for writing request to client failed ERR_CLIENT_ZERO_CONTENTLEN Counter for getting empty request content from client HTTP2_CLIENT_CONN_ACTIVE Counter for active connection using HTTP2 HTTP2_CLIENT_CONN_SERVED Counter for connection serverd using HTTP2 HTTP2_CLIENT_REQ_ACTIVE Counter for active request using HTTP2 HTTP2_CLIENT_REQ_SERVED Counter for request serverd using HTTP2 HTTPS_CLIENT_CONN_ACTIVE Counter for active connection using HTTPS HTTPS_CLIENT_CONN_SERVED Counter for connection serverd using HTTPS HTTPS_CLIENT_REQ_ACTIVE Counter for active request using HTTPS HTTPS_CLIENT_REQ_SERVED Counter for request serverd using HTTPS HTTP_CLIENT_CONN_ACTIVE Counter for active connection using HTTP1.0/1.1 HTTP_CLIENT_CONN_SERVED Counter for connection serverd using HTTP1.0/1.1 HTTP_CLIENT_REQ_ACTIVE Counter for active request using HTTP1.0/1.1 HTTP_CLIENT_REQ_SERVED Counter for request serverd using HTTP1.0/1.1 PANIC_BACKEND_READ Counter for reading from backend panic PANIC_BACKEND_WRITE Counter for writing to backend panic PANIC_CLIENT_CONN_SERVE Counter for accepting from client panic SESSION_CACHE_CONN Counter for connection using session cache SESSION_CACHE_CONN_FAIL Counter for failed connection using session cache SESSION_CACHE_GET Counter for getting session cache SESSION_CACHE_GET_FAIL Counter for getting session cache failed SESSION_CACHE_HIT Counter for hittting session cache SESSION_CACHE_MISS Counter for misssing session cache SESSION_CACHE_SET Counter for setting session cache SESSION_CACHE_SET_FAIL Counter for setting session cache failed SESSION_CACHE_TYPE_NOT_BYTES Counter for type of session cache is not bytes SPDY_CLIENT_CONN_ACTIVE Counter for active connection using SPDY SPDY_CLIENT_CONN_SERVED Counter for connection serverd using SPDY SPDY_CLIENT_REQ_ACTIVE Counter for active request using SPDY SPDY_CLIENT_REQ_SERVED Counter for request serverd using SPDY STREAM_CLIENT_CONN_ACTIVE Counter for active connection using STREAM STREAM_CLIENT_CONN_SERVED Counter for connection serverd using STREAM TLS_HANDSHAKE_ALL Counter for TLS handshake TLS_HANDSHAKE_SUCC Counter for successful TLS handshake TLS_MULTI_CERT_CONN_VIP_UNKNOWN Counter for not getting TLS cert by vip TLS_MULTI_CERT_CONN_WITHOUT_SNI Counter for getting TLS cert not by SNI TLS_MULTI_CERT_CONN_WITHOUT_VIP Counter for getting TLS cert not by vip TLS_MULTI_CERT_GET Counter for getting TLS cert TLS_MULTI_CERT_UPDATE Counter for updating TLS cert TLS_MULTI_CERT_UPDATE_ERR Counter for updating TLS cert failed TLS_MULTI_CERT_USE_DEFAULT Counter for using TLS cert default WSS_CLIENT_CONN_ACTIVE Counter for active connection using WSS WSS_CLIENT_CONN_SERVED Counter for connection serverd using WSS WS_CLIENT_CONN_ACTIVE Counter for active connection using WS WS_CLIENT_CONN_SERVED Counter for connection serverd using WS","title":"Proxy state"},{"location":"monitor/proxy_state/#proxy","text":"","title":"Proxy"},{"location":"monitor/proxy_state/#introduction","text":"The endpoint /monitor/proxy_state exposes metrics about reverse proxy.","title":"Introduction"},{"location":"monitor/proxy_state/#metrics","text":"Metric Description CLIENT_CONN_ACTIVE Counter for active connection CLIENT_CONN_SERVED Counter for connection serverd CLIENT_CONN_UNFINISHED_REQ Counter for connection closed with unfinished request CLIENT_CONN_USE100_CONTINUE Counter for connection used expect 100 continue CLIENT_REQ_ACTIVE Counter for active request CLIENT_REQ_FAIL Counter for failed request CLIENT_REQ_FAIL_WITH_NO_RETRY Counter for request fail with no retry CLIENT_REQ_SERVED Counter for request serverd CLIENT_REQ_WITH_CROSS_RETRY Counter for request serverd with cross cluster retry CLIENT_REQ_WITH_RETRY Counter for request serverd with retry ERR_BK_CONNECT_BACKEND Counter for connecting backend failed ERR_BK_FIND_LOCATION Counter for finding location failed ERR_BK_FIND_PRODUCT Counter for finding product failed ERR_BK_NO_BALANCE Counter for no balance config of backend ERR_BK_NO_CLUSTER Counter for no cluster config of backend ERR_BK_READ_RESP_HEADER Counter for reading response header from backend failed ERR_BK_REQUEST_BACKEND Counter for fail in invoking backend ERR_BK_RESP_HEADER_TIMEOUT Counter for getting response header from backend timeout ERR_BK_TRANSPORT_BROKEN Counter for transport broken of backend ERR_BK_WRITE_REQUEST Counter for writing request to backend failed ERR_CLIENT_BAD_REQUEST Counter for bad request of client ERR_CLIENT_CLOSE Counter for client closing connection ERR_CLIENT_CONN_ACCEPT Counter for accepting connection from client failed ERR_CLIENT_EXPECT_FAIL Counter for expecting fail from client ERR_CLIENT_LONG_HEADER Counter for request entity too large ERR_CLIENT_LONG_URL Counter for exceeding URI length limit ERR_CLIENT_RESET Counter for reseting by client ERR_CLIENT_TIMEOUT Counter for connecting with client timeout ERR_CLIENT_WRITE Counter for writing request to client failed ERR_CLIENT_ZERO_CONTENTLEN Counter for getting empty request content from client HTTP2_CLIENT_CONN_ACTIVE Counter for active connection using HTTP2 HTTP2_CLIENT_CONN_SERVED Counter for connection serverd using HTTP2 HTTP2_CLIENT_REQ_ACTIVE Counter for active request using HTTP2 HTTP2_CLIENT_REQ_SERVED Counter for request serverd using HTTP2 HTTPS_CLIENT_CONN_ACTIVE Counter for active connection using HTTPS HTTPS_CLIENT_CONN_SERVED Counter for connection serverd using HTTPS HTTPS_CLIENT_REQ_ACTIVE Counter for active request using HTTPS HTTPS_CLIENT_REQ_SERVED Counter for request serverd using HTTPS HTTP_CLIENT_CONN_ACTIVE Counter for active connection using HTTP1.0/1.1 HTTP_CLIENT_CONN_SERVED Counter for connection serverd using HTTP1.0/1.1 HTTP_CLIENT_REQ_ACTIVE Counter for active request using HTTP1.0/1.1 HTTP_CLIENT_REQ_SERVED Counter for request serverd using HTTP1.0/1.1 PANIC_BACKEND_READ Counter for reading from backend panic PANIC_BACKEND_WRITE Counter for writing to backend panic PANIC_CLIENT_CONN_SERVE Counter for accepting from client panic SESSION_CACHE_CONN Counter for connection using session cache SESSION_CACHE_CONN_FAIL Counter for failed connection using session cache SESSION_CACHE_GET Counter for getting session cache SESSION_CACHE_GET_FAIL Counter for getting session cache failed SESSION_CACHE_HIT Counter for hittting session cache SESSION_CACHE_MISS Counter for misssing session cache SESSION_CACHE_SET Counter for setting session cache SESSION_CACHE_SET_FAIL Counter for setting session cache failed SESSION_CACHE_TYPE_NOT_BYTES Counter for type of session cache is not bytes SPDY_CLIENT_CONN_ACTIVE Counter for active connection using SPDY SPDY_CLIENT_CONN_SERVED Counter for connection serverd using SPDY SPDY_CLIENT_REQ_ACTIVE Counter for active request using SPDY SPDY_CLIENT_REQ_SERVED Counter for request serverd using SPDY STREAM_CLIENT_CONN_ACTIVE Counter for active connection using STREAM STREAM_CLIENT_CONN_SERVED Counter for connection serverd using STREAM TLS_HANDSHAKE_ALL Counter for TLS handshake TLS_HANDSHAKE_SUCC Counter for successful TLS handshake TLS_MULTI_CERT_CONN_VIP_UNKNOWN Counter for not getting TLS cert by vip TLS_MULTI_CERT_CONN_WITHOUT_SNI Counter for getting TLS cert not by SNI TLS_MULTI_CERT_CONN_WITHOUT_VIP Counter for getting TLS cert not by vip TLS_MULTI_CERT_GET Counter for getting TLS cert TLS_MULTI_CERT_UPDATE Counter for updating TLS cert TLS_MULTI_CERT_UPDATE_ERR Counter for updating TLS cert failed TLS_MULTI_CERT_USE_DEFAULT Counter for using TLS cert default WSS_CLIENT_CONN_ACTIVE Counter for active connection using WSS WSS_CLIENT_CONN_SERVED Counter for connection serverd using WSS WS_CLIENT_CONN_ACTIVE Counter for active connection using WS WS_CLIENT_CONN_SERVED Counter for connection serverd using WS","title":"Metrics"},{"location":"monitor/spdy_state/","text":"SPDY Introduction The endpoint /monitor/spdy_state exposes metrics about SPDY. Metrics Metric Description SPDY_ERR_BAD_REQUEST Counter for bad request SPDY_ERR_FLOW_CONTROL Counter for flow control SPDY_ERR_GOT_RESET Counter for gettting RST_STREAM SPDY_ERR_INVALID_DATA_STREAM Counter for invalid data stream SPDY_ERR_INVALID_SYN_STREAM Counter for invalid SYN stream SPDY_ERR_MAX_STREAM_PER_CONN Counter for reaching advertised concurrent stream limit SPDY_ERR_NEW_FRAMER Counter for creating frame failed SPDY_PANIC_CONN Counter for connection panic SPDY_PANIC_STREAM Counter for stream panic SPDY_REQ_HEADER_COMPRESS_SIZE Size of request header before compress SPDY_REQ_HEADER_ORIGINAL_SIZE Size of request header after compress SPDY_RES_HEADER_COMPRESS_SIZE Size of response header before compress SPDY_RES_HEADER_ORIGINAL_SIZE Size of response header after compress SPDY_TIMEOUT_CONN Timeout of SPDY connection SPDY_TIMEOUT_READ_STREAM Timeout waiting for reading stream SPDY_TIMEOUT_WRITE_STREAM Timeout waiting for writing stream SPDY_UNKNOWN_FRAME Counter for unknown frame","title":"SPDY"},{"location":"monitor/spdy_state/#spdy","text":"","title":"SPDY"},{"location":"monitor/spdy_state/#introduction","text":"The endpoint /monitor/spdy_state exposes metrics about SPDY.","title":"Introduction"},{"location":"monitor/spdy_state/#metrics","text":"Metric Description SPDY_ERR_BAD_REQUEST Counter for bad request SPDY_ERR_FLOW_CONTROL Counter for flow control SPDY_ERR_GOT_RESET Counter for gettting RST_STREAM SPDY_ERR_INVALID_DATA_STREAM Counter for invalid data stream SPDY_ERR_INVALID_SYN_STREAM Counter for invalid SYN stream SPDY_ERR_MAX_STREAM_PER_CONN Counter for reaching advertised concurrent stream limit SPDY_ERR_NEW_FRAMER Counter for creating frame failed SPDY_PANIC_CONN Counter for connection panic SPDY_PANIC_STREAM Counter for stream panic SPDY_REQ_HEADER_COMPRESS_SIZE Size of request header before compress SPDY_REQ_HEADER_ORIGINAL_SIZE Size of request header after compress SPDY_RES_HEADER_COMPRESS_SIZE Size of response header before compress SPDY_RES_HEADER_ORIGINAL_SIZE Size of response header after compress SPDY_TIMEOUT_CONN Timeout of SPDY connection SPDY_TIMEOUT_READ_STREAM Timeout waiting for reading stream SPDY_TIMEOUT_WRITE_STREAM Timeout waiting for writing stream SPDY_UNKNOWN_FRAME Counter for unknown frame","title":"Metrics"},{"location":"monitor/stream_state/","text":"Stream Introduction The endport /monitor/stream_state exposes metrics about TLS-TCP reverse proxy. Metrics Metric Description STREAM_BYTES_RECV Counter for receiving stream bytes STREAM_BYTES_SENT Counter for sending stream bytes STREAM_ERR_BALANCE Counter for balance error STREAM_ERR_CONNECT Counter for connecting backend error STREAM_ERR_PROXY Counter for finding backend error STREAM_ERR_TRANSFER Counter for transfer error STREAM_PANIC_CONN Counter for connection panic","title":"Stream"},{"location":"monitor/stream_state/#stream","text":"","title":"Stream"},{"location":"monitor/stream_state/#introduction","text":"The endport /monitor/stream_state exposes metrics about TLS-TCP reverse proxy.","title":"Introduction"},{"location":"monitor/stream_state/#metrics","text":"Metric Description STREAM_BYTES_RECV Counter for receiving stream bytes STREAM_BYTES_SENT Counter for sending stream bytes STREAM_ERR_BALANCE Counter for balance error STREAM_ERR_CONNECT Counter for connecting backend error STREAM_ERR_PROXY Counter for finding backend error STREAM_ERR_TRANSFER Counter for transfer error STREAM_PANIC_CONN Counter for connection panic","title":"Metrics"},{"location":"monitor/tls_state/","text":"TLS Introduction The endpoint /monitor/tls_state exposes metrics about TLS protocol. Metrics Metric Description TLS_HANDSHAKE_ACCEPT_ECDHE_WITHOUT_EXT Counter for proposing ECDHE without extensions TLS_HANDSHAKE_ACCEPT_SSLV2_CLIENT_HELLO Counter for accepting SSLv2 client-hello TLS_HANDSHAKE_CHECK_RESUME_SESSION_CACHE Counter for checking resume session cache TLS_HANDSHAKE_CHECK_RESUME_SESSION_TICKET Counter for checking resume session ticket TLS_HANDSHAKE_FULL_ALL Counter for full TLS handshake TLS_HANDSHAKE_FULL_SUCC Counter for successful TLS handshake TLS_HANDSHAKE_NO_SHARED_CIPHER_SUITE Counter for no cipher suite supported by both client and server TLS_HANDSHAKE_OCSP_TIME_ERR Counter for ocsp time error TLS_HANDSHAKE_READ_CLIENT_HELLO_ERR Counter for reading client-hello error TLS_HANDSHAKE_RESUME_ALL Counter for resuming session TLS_HANDSHAKE_RESUME_SUCC Counter for resuming session successfully TLS_HANDSHAKE_SHOULD_RESUME_SESSION_CACHE Counter for resuming session by session cache TLS_HANDSHAKE_SHOULD_RESUME_SESSION_TICKET Counter for resuming session by session ticket TLS_HANDSHAKE_SSLV2_NOT_SUPPORT Counter for unsupported SSLv2 handshake received TLS_HANDSHAKE_ZERO_DATA Counter for zero data TLS_STATUS_REQUEST_EXT_COUNT Counter for request extensions","title":"SSL/TLS"},{"location":"monitor/tls_state/#tls","text":"","title":"TLS"},{"location":"monitor/tls_state/#introduction","text":"The endpoint /monitor/tls_state exposes metrics about TLS protocol.","title":"Introduction"},{"location":"monitor/tls_state/#metrics","text":"Metric Description TLS_HANDSHAKE_ACCEPT_ECDHE_WITHOUT_EXT Counter for proposing ECDHE without extensions TLS_HANDSHAKE_ACCEPT_SSLV2_CLIENT_HELLO Counter for accepting SSLv2 client-hello TLS_HANDSHAKE_CHECK_RESUME_SESSION_CACHE Counter for checking resume session cache TLS_HANDSHAKE_CHECK_RESUME_SESSION_TICKET Counter for checking resume session ticket TLS_HANDSHAKE_FULL_ALL Counter for full TLS handshake TLS_HANDSHAKE_FULL_SUCC Counter for successful TLS handshake TLS_HANDSHAKE_NO_SHARED_CIPHER_SUITE Counter for no cipher suite supported by both client and server TLS_HANDSHAKE_OCSP_TIME_ERR Counter for ocsp time error TLS_HANDSHAKE_READ_CLIENT_HELLO_ERR Counter for reading client-hello error TLS_HANDSHAKE_RESUME_ALL Counter for resuming session TLS_HANDSHAKE_RESUME_SUCC Counter for resuming session successfully TLS_HANDSHAKE_SHOULD_RESUME_SESSION_CACHE Counter for resuming session by session cache TLS_HANDSHAKE_SHOULD_RESUME_SESSION_TICKET Counter for resuming session by session ticket TLS_HANDSHAKE_SSLV2_NOT_SUPPORT Counter for unsupported SSLv2 handshake received TLS_HANDSHAKE_ZERO_DATA Counter for zero data TLS_STATUS_REQUEST_EXT_COUNT Counter for request extensions","title":"Metrics"},{"location":"monitor/websocket_state/","text":"WebSocket Introduction The endpoint /monitor/websocket_state exposes metrics about WebSocket. Metrics Metric Description WEB_SOCKET_BYTES_RECV Counter for receiving websocket bytes WEB_SOCKET_BYTES_SENT Counter for sending websocket bytes WEB_SOCKET_ERR_BACKEND_REJECT Counter for rejecting backend WEB_SOCKET_ERR_BALANCE Counter for balance error WEB_SOCKET_ERR_CONNECT Counter for connecting error WEB_SOCKET_ERR_HANDSHAKE Counter for handshake error WEB_SOCKET_ERR_PROXY Counter for finding backend WEB_SOCKET_ERR_TRANSFER Counter for transfer error WEB_SOCKET_PANIC_CONN Counter for connection panic","title":"WebSocket"},{"location":"monitor/websocket_state/#websocket","text":"","title":"WebSocket"},{"location":"monitor/websocket_state/#introduction","text":"The endpoint /monitor/websocket_state exposes metrics about WebSocket.","title":"Introduction"},{"location":"monitor/websocket_state/#metrics","text":"Metric Description WEB_SOCKET_BYTES_RECV Counter for receiving websocket bytes WEB_SOCKET_BYTES_SENT Counter for sending websocket bytes WEB_SOCKET_ERR_BACKEND_REJECT Counter for rejecting backend WEB_SOCKET_ERR_BALANCE Counter for balance error WEB_SOCKET_ERR_CONNECT Counter for connecting error WEB_SOCKET_ERR_HANDSHAKE Counter for handshake error WEB_SOCKET_ERR_PROXY Counter for finding backend WEB_SOCKET_ERR_TRANSFER Counter for transfer error WEB_SOCKET_PANIC_CONN Counter for connection panic","title":"Metrics"},{"location":"operation/api/","text":"Management API BFE provides a set of management APIs for metrics exposing, configruation reloading, debugging and profiling etc. It should not publicly exposing the APIs, keeping them restricted to internal networks. Configuration Set management port in BFE core configuration file(conf/bfe.conf) [Server] MonitorPort = 8421 Endpoints All the following endpoints must be accessed with a GET HTTP request. Path Description /monitor Lists all the monitor categories. See System metrics /monitor/{name} Returns the metrics information of the monitor category specified by name . /reload Lists all the reload entries. See Configuration reload /reload/{name} Reloads the configuration specified by name . /debug/pprof/ See the pprof Index Go documentation. /debug/cmdline See the pprof Cmdline Go documentation. /debug/profile See the pprof Profile Go documentation. /debug/symbol See the pprof Symbol Go documentation. /debug/trace See the pprof Trace Go documentation.","title":"Management API"},{"location":"operation/api/#management-api","text":"BFE provides a set of management APIs for metrics exposing, configruation reloading, debugging and profiling etc. It should not publicly exposing the APIs, keeping them restricted to internal networks.","title":"Management API"},{"location":"operation/api/#configuration","text":"Set management port in BFE core configuration file(conf/bfe.conf) [Server] MonitorPort = 8421","title":"Configuration"},{"location":"operation/api/#endpoints","text":"All the following endpoints must be accessed with a GET HTTP request. Path Description /monitor Lists all the monitor categories. See System metrics /monitor/{name} Returns the metrics information of the monitor category specified by name . /reload Lists all the reload entries. See Configuration reload /reload/{name} Reloads the configuration specified by name . /debug/pprof/ See the pprof Index Go documentation. /debug/cmdline See the pprof Cmdline Go documentation. /debug/profile See the pprof Profile Go documentation. /debug/symbol See the pprof Symbol Go documentation. /debug/trace See the pprof Trace Go documentation.","title":"Endpoints"},{"location":"operation/capture_packet/","text":"Traffic tapping Use packet capture and analysis tools to locate and analyze complex network problems Traffic capture tcpdump example\uff1a # tcpdump tcp port 8443 -i any -s -w test.pcap Traffic analysis Plaintext traffic Use wireshark to open packet capture file. Ciphertext traffic For TLS-based encrypted traffic, you can use mod_key_log and wireshark for analysis. Step1: Enable mod_key_log module and save the TLS session key to key.log file Note\uff1amodify bfe.conf and enable mod_key_log, See module configuration mod_key_log for details [Server] Modules = mod_key_log Step2: Set the path of the Master-Secret log file to key.log in wireshark Note\uff1aEdit\u2192Preferences\u2192Protocols\u2192SSL\u2192(Pre)-Master-Secret log filename Step3: Use wireshark to open and decrypt the captured data","title":"Traffic tapping"},{"location":"operation/capture_packet/#traffic-tapping","text":"Use packet capture and analysis tools to locate and analyze complex network problems","title":"Traffic tapping"},{"location":"operation/capture_packet/#traffic-capture","text":"tcpdump example\uff1a # tcpdump tcp port 8443 -i any -s -w test.pcap","title":"Traffic capture"},{"location":"operation/capture_packet/#traffic-analysis","text":"","title":"Traffic analysis"},{"location":"operation/capture_packet/#plaintext-traffic","text":"Use wireshark to open packet capture file.","title":"Plaintext traffic"},{"location":"operation/capture_packet/#ciphertext-traffic","text":"For TLS-based encrypted traffic, you can use mod_key_log and wireshark for analysis. Step1: Enable mod_key_log module and save the TLS session key to key.log file Note\uff1amodify bfe.conf and enable mod_key_log, See module configuration mod_key_log for details [Server] Modules = mod_key_log Step2: Set the path of the Master-Secret log file to key.log in wireshark Note\uff1aEdit\u2192Preferences\u2192Protocols\u2192SSL\u2192(Pre)-Master-Secret log filename Step3: Use wireshark to open and decrypt the captured data","title":"Ciphertext traffic"},{"location":"operation/command/","text":"Command line options bfe bfe [options] -c <config dir> The root directory of configuration files, default directory is ./conf -l <log dir> The root directory of log files, default directory is ./log -s Print logs to stdout. By default, this flag is set false. -d Print debug logs. By default, this flag is set false. -v Display bfe version and exit. By default, this flag is set false. -V Display verbose version information and exit. By default, this flag is set false. -h Display help infomation and exit. By default, this flag is set false.","title":"Command line options"},{"location":"operation/command/#command-line-options","text":"","title":"Command line options"},{"location":"operation/command/#bfe","text":"bfe [options] -c <config dir> The root directory of configuration files, default directory is ./conf -l <log dir> The root directory of log files, default directory is ./log -s Print logs to stdout. By default, this flag is set false. -d Print debug logs. By default, this flag is set false. -v Display bfe version and exit. By default, this flag is set false. -V Display verbose version information and exit. By default, this flag is set false. -h Display help infomation and exit. By default, this flag is set false.","title":"bfe"},{"location":"operation/env_var/","text":"Environment variables GODEBUG Output verbose log about http2 header info $ export GODEBUG=\"http2debug=1\" Output verbose log about http2 header and framer info $ export GODEBUG=\"http2debug=2\"","title":"Environment variables"},{"location":"operation/env_var/#environment-variables","text":"","title":"Environment variables"},{"location":"operation/env_var/#godebug","text":"Output verbose log about http2 header info $ export GODEBUG=\"http2debug=1\" Output verbose log about http2 header and framer info $ export GODEBUG=\"http2debug=2\"","title":"GODEBUG"},{"location":"operation/log_rotation/","text":"Log rotation Introdution As time passes, the size of log files increases and occupies more and more disk space. BFE has a built-in feature of log file rotation which can automatically rotate log files, remove old ones and retain the recent ones. Description Name Path Rotation Configuration Server Log log/bfe.log rotate log file at midnight; retain the recent 7 log files Access Log log/access.log conf/mod_access/mod_access.conf TLS Key Log log/key.log conf/mod_key_log/mod_key_log.conf","title":"Log rotation"},{"location":"operation/log_rotation/#log-rotation","text":"","title":"Log rotation"},{"location":"operation/log_rotation/#introdution","text":"As time passes, the size of log files increases and occupies more and more disk space. BFE has a built-in feature of log file rotation which can automatically rotate log files, remove old ones and retain the recent ones.","title":"Introdution"},{"location":"operation/log_rotation/#description","text":"Name Path Rotation Configuration Server Log log/bfe.log rotate log file at midnight; retain the recent 7 log files Access Log log/access.log conf/mod_access/mod_access.conf TLS Key Log log/key.log conf/mod_key_log/mod_key_log.conf","title":"Description"},{"location":"operation/monitor/","text":"System metrics BFE has a variety of built-in metrics which can be exposed in various formats. Configure monitor port Set monitor port in the BFE core configuration file (conf/bfe.conf). [Server] MonitorPort = 8421 Fetch metric categories Visit the following address for a list of available metric categories http://<addr>:8421/monitor Fetch metrics http://<addr>:8421/monitor/<category> Fetch metric data in specified format Currently supported formats: prometheus kv json (default) Specify the format of the output like below: http://<addr>:8421/monitor/proxy_state?format=prometheus","title":"System metrics"},{"location":"operation/monitor/#system-metrics","text":"BFE has a variety of built-in metrics which can be exposed in various formats.","title":"System metrics"},{"location":"operation/monitor/#configure-monitor-port","text":"Set monitor port in the BFE core configuration file (conf/bfe.conf). [Server] MonitorPort = 8421","title":"Configure monitor port"},{"location":"operation/monitor/#fetch-metric-categories","text":"Visit the following address for a list of available metric categories http://<addr>:8421/monitor","title":"Fetch metric categories"},{"location":"operation/monitor/#fetch-metrics","text":"http://<addr>:8421/monitor/<category>","title":"Fetch metrics"},{"location":"operation/monitor/#fetch-metric-data-in-specified-format","text":"Currently supported formats: prometheus kv json (default) Specify the format of the output like below: http://<addr>:8421/monitor/proxy_state?format=prometheus","title":"Fetch metric data in specified format"},{"location":"operation/performance/","text":"Performance BFE has built-in CPU profile interfaces, which can be used in conjunction with the FlameGraph tool to locate and analyze performance problems. Configure monitor port Set monitor port in the BFE core configuration file (conf/bfe.conf). [Server] MonitorPort = 8421 Tools FlameGragh $ git clone https://github.com/brendangregg/FlameGraph Which contains stackcollpase-go.pl and flamegraph.pl tools Step Get performance sampling data $ go tool pprof -seconds=60 -raw -output=bfe.pprof http://<addr>:<port>/debug/pprof/profile Note: seconds=60 means capturing 60 seconds of stack samples Transform and draw FlameGraph $ ./stackcollpase-go.pl bfe.pporf > bfe.flame $ ./flamegraph.pl bfe.flame > bfe.svg Open bfe.svg in browser","title":"Performance"},{"location":"operation/performance/#performance","text":"BFE has built-in CPU profile interfaces, which can be used in conjunction with the FlameGraph tool to locate and analyze performance problems.","title":"Performance"},{"location":"operation/performance/#configure-monitor-port","text":"Set monitor port in the BFE core configuration file (conf/bfe.conf). [Server] MonitorPort = 8421","title":"Configure monitor port"},{"location":"operation/performance/#tools","text":"FlameGragh $ git clone https://github.com/brendangregg/FlameGraph Which contains stackcollpase-go.pl and flamegraph.pl tools","title":"Tools"},{"location":"operation/performance/#step","text":"Get performance sampling data $ go tool pprof -seconds=60 -raw -output=bfe.pprof http://<addr>:<port>/debug/pprof/profile Note: seconds=60 means capturing 60 seconds of stack samples Transform and draw FlameGraph $ ./stackcollpase-go.pl bfe.pporf > bfe.flame $ ./flamegraph.pl bfe.flame > bfe.svg Open bfe.svg in browser","title":"Step"},{"location":"operation/reload/","text":"Configuration reload BFE has a built-in feature of configuration hot-reload. A new configuration file can be reload by sending a reload request. Configure monitor port Set MonitorPort in BFE core configuration file(conf/bfe.conf) [Server] MonitorPort = 8421 How to reload Reload APIs only allows to be accessed using localhost\uff08127.0.0.1/::1\uff09and only supports GET requests # reload routing configurations $ curl http://localhost:8421/reload/server_data_conf The complete list of reload APIs can be viewed at http://localhost:8421/reload Reload APIs Basic function Function Default configuration file Reload API routing server_data_conf/host_rule.data server_data_conf/vip_rule.data server_data_conf/route_rule.data server_data_conf/cluster_conf.data /reload/server_data_conf balancing cluster_conf/cluster_table.data cluster_conf/gslb.data /reload/gslb_data_conf name conf server_data_conf/name_conf.data /reload/name_conf TLS rule tls_conf/server_cert_conf.data tls_conf/tls_rule_conf.data /reload/tls_conf TLS session ticket key tls_conf/session_ticket_key.data /reload/tls_session_ticket_key Module Module Default configuration file Reload API mod_auth_basic mod_auth_basic/auth_basic_rule.data /reload/mod_auth_basic mod_block mod_block/block_rules.data mod_block/ip_blocklist.data /reload/mod_block.product_rule_table /reload/mod_block.global_ip_table mod_compress mod_compress/compress_rule.data /reload/mod_compress mod_errors mod_errors/errors_rule.data /reload/mod_errors mod_geo mod_geo/geo.db /reload/mod_geo mod_header mod_header/header_rule.data /reload/mod_header mod_redirect mod_redirect/redirect.data /reload/mod_redirect mod_rewrite mod_rewrite/rewrite.data /reload/mod_rewrite mod_static mod_static/static_rule.data mod_static/mime_type.data /reload/mod_static /reload/mod_static.mime_type mod_trust_clientip mod_trust_clientip/trust_client_ip.data /reload/mod_trust_clientip","title":"Configuration reload"},{"location":"operation/reload/#configuration-reload","text":"BFE has a built-in feature of configuration hot-reload. A new configuration file can be reload by sending a reload request.","title":"Configuration reload"},{"location":"operation/reload/#configure-monitor-port","text":"Set MonitorPort in BFE core configuration file(conf/bfe.conf) [Server] MonitorPort = 8421","title":"Configure monitor port"},{"location":"operation/reload/#how-to-reload","text":"Reload APIs only allows to be accessed using localhost\uff08127.0.0.1/::1\uff09and only supports GET requests # reload routing configurations $ curl http://localhost:8421/reload/server_data_conf The complete list of reload APIs can be viewed at http://localhost:8421/reload","title":"How to reload"},{"location":"operation/reload/#reload-apis","text":"","title":"Reload APIs"},{"location":"operation/reload/#basic-function","text":"Function Default configuration file Reload API routing server_data_conf/host_rule.data server_data_conf/vip_rule.data server_data_conf/route_rule.data server_data_conf/cluster_conf.data /reload/server_data_conf balancing cluster_conf/cluster_table.data cluster_conf/gslb.data /reload/gslb_data_conf name conf server_data_conf/name_conf.data /reload/name_conf TLS rule tls_conf/server_cert_conf.data tls_conf/tls_rule_conf.data /reload/tls_conf TLS session ticket key tls_conf/session_ticket_key.data /reload/tls_session_ticket_key","title":"Basic function"},{"location":"operation/reload/#module","text":"Module Default configuration file Reload API mod_auth_basic mod_auth_basic/auth_basic_rule.data /reload/mod_auth_basic mod_block mod_block/block_rules.data mod_block/ip_blocklist.data /reload/mod_block.product_rule_table /reload/mod_block.global_ip_table mod_compress mod_compress/compress_rule.data /reload/mod_compress mod_errors mod_errors/errors_rule.data /reload/mod_errors mod_geo mod_geo/geo.db /reload/mod_geo mod_header mod_header/header_rule.data /reload/mod_header mod_redirect mod_redirect/redirect.data /reload/mod_redirect mod_rewrite mod_rewrite/rewrite.data /reload/mod_rewrite mod_static mod_static/static_rule.data mod_static/mime_type.data /reload/mod_static /reload/mod_static.mime_type mod_trust_clientip mod_trust_clientip/trust_client_ip.data /reload/mod_trust_clientip","title":"Module"},{"location":"operation/signal/","text":"System signals SIGQUIT Gracefully shutdown the bfe process. SIGTERM Forcefully exits the bfe process directly.","title":"System signals"},{"location":"operation/signal/#system-signals","text":"","title":"System signals"},{"location":"operation/signal/#sigquit","text":"Gracefully shutdown the bfe process.","title":"SIGQUIT"},{"location":"operation/signal/#sigterm","text":"Forcefully exits the bfe process directly.","title":"SIGTERM"}]}