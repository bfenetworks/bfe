// Copyright (c) 2019 The BFE Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mod_degrade

import (
	"errors"
	"fmt"
	"github.com/bfenetworks/bfe/bfe_basic/action"
	"strconv"
	"strings"

	"github.com/bfenetworks/bfe/bfe_http"
)

const (
	ActionReturn = "RETURN" // return response
)

var allowActions = map[string]bool{
	ActionReturn:       true,
	action.ActionClose: true,
}

type DegradeActionFile struct {
	Cmd          *string          // command e.g. RETURN or CLOSE
	HTTPVersion  *string          // http version e.g. HTTP/1.1
	ReasonPhrase *string          // http reason phrase e.g. OK
	StatusLine   *string          // http status line e.g. HTTP/1.1 200 OK
	StatusCode   *int             // http status code e.g. 200
	Body         *string          // http response body e.g. {"message":"OK"}
	Header       *bfe_http.Header // http response headers
}

type DegradeAction struct {
	Cmd string // command e.g. RETURN or CLOSE
	Rsp string // the final result of http response, the value will be generated by covertAction()
}

// StatusLine encapsulation of http status line
// The first line of a Response message is the Status-Line, consisting of the protocol version
// followed by a numeric status code and its associated textual phrase, with each element
// separated by SP characters. No CR or LF is allowed except in the final CRLF sequence.
// Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
type StatusLine struct {
	HTTPVersion  string // http version e.g. HTTP/1.1
	StatusCode   int    // http status code e.g. 200
	ReasonPhrase string // http reason phrase e.g. OK
}

func NewStatusLine() StatusLine {
	return StatusLine{
		HTTPVersion:  "HTTP/1.1",
		StatusCode:   200,
		ReasonPhrase: "OK",
	}
}

// NewStatusLineFromConf create Status-Line from config file
func NewStatusLineFromConf(conf *DegradeActionFile) (StatusLine, error) {
	statusLine := NewStatusLine()

	// if value set in file, will replace it
	if conf.HTTPVersion != nil {
		statusLine.HTTPVersion = *conf.HTTPVersion
	}

	if conf.StatusCode != nil {
		statusLine.StatusCode = *conf.StatusCode
	}

	if conf.ReasonPhrase != nil {
		statusLine.ReasonPhrase = *conf.ReasonPhrase
	}

	return statusLine, statusLine.Check()
}

func (sl StatusLine) String() string {
	return fmt.Sprintf("%s %d %s\n", sl.HTTPVersion, sl.StatusCode, sl.ReasonPhrase)
}

func (sl StatusLine) Check() error {
	// check http version
	if _, _, ok := bfe_http.ParseHTTPVersion(sl.HTTPVersion); !ok {
		return fmt.Errorf("malformed HTTP version, value = %s", sl.HTTPVersion)
	}

	// check status code
	sc := sl.StatusCode / 100 //nolint:gomnd
	if sc < 1 || sc > 5 {
		return fmt.Errorf("malformed HTTP status code, value = %d", sl.StatusCode)
	}

	return nil
}

func ActionFileCheck(conf *DegradeActionFile) error {
	var err error

	if conf.Cmd == nil {
		return errors.New("no Cmd")
	}

	if *conf.Cmd == action.ActionClose {
		return nil
	}

	_, err = NewStatusLineFromConf(conf)
	if err != nil {
		return err
	}

	if conf.StatusLine != nil && len(*conf.StatusLine) > 0 {
		_, err = parseStatusLine(*conf.StatusLine)
		if err != nil {
			return err
		}
	}

	return nil
}

// parseStatusLine standard Status-Line format: HTTP-Version SP Status-Code SP Reason-Phrase CRLF
// Possible correct formats areï¼š
// HTTP-Version SP Status-Code SP Reason-Phrase CRLF: e.g. HTTP/1.1 200 OK
// HTTP-Version SP Status-Code CRLF					: e.g. HTTP/1.1 200
func parseStatusLine(line string) (StatusLine, error) {
	var (
		sl  StatusLine
		err error
	)

	statusLines := strings.SplitN(line, " ", 3)
	if len(statusLines) < 2 {
		return sl, fmt.Errorf("malformed HTTP status line, line=%s", line)
	}

	if len(statusLines) > 2 {
		sl.ReasonPhrase = statusLines[2]
	}

	// when len(statusLines) = 2, the status line format is:
	// HTTP-Version SP Status-Code CRLF
	sl.StatusCode, err = strconv.Atoi(statusLines[1])
	if err != nil {
		return sl, fmt.Errorf("malformed HTTP status code, line=%s", line)
	}

	sl.HTTPVersion = statusLines[0]

	return sl, sl.Check()
}
